// Code generated by protoc-gen-gogo.
// source: pricing/pricing.proto
// DO NOT EDIT!

/*
	Package pricing is a generated protocol buffer package.

	It is generated from these files:
		pricing/pricing.proto

	It has these top-level messages:
		Quote
		QuoteInitialRequest
		QuoteInitialResponse
*/
package pricing

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import io "io"
import fmt "fmt"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import strings "strings"
import reflect "reflect"

import sort "sort"
import strconv "strconv"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type Quote struct {
	// Reference data
	Isin            *string  `protobuf:"bytes,1,opt,name=isin" json:"isin,omitempty"`
	Sedol           *string  `protobuf:"bytes,2,opt,name=sedol" json:"sedol,omitempty"`
	Description     *string  `protobuf:"bytes,10,opt,name=description" json:"description,omitempty"`
	Crncy           *string  `protobuf:"bytes,11,opt,name=crncy" json:"crncy,omitempty"`
	PxTradeLotSize  *float64 `protobuf:"fixed64,12,opt,name=px_trade_lot_size" json:"px_trade_lot_size,omitempty"`
	RoundLot        *float64 `protobuf:"fixed64,13,opt,name=round_lot" json:"round_lot,omitempty"`
	ExchCode        *string  `protobuf:"bytes,14,opt,name=exch_code" json:"exch_code,omitempty"`
	PrimExch        *string  `protobuf:"bytes,15,opt,name=prim_exch" json:"prim_exch,omitempty"`
	Expiry          *string  `protobuf:"bytes,16,opt,name=expiry" json:"expiry,omitempty"`
	Multiplier      *string  `protobuf:"bytes,17,opt,name=multiplier" json:"multiplier,omitempty"`
	TickSize        *float64 `protobuf:"fixed64,18,opt,name=tick_size" json:"tick_size,omitempty"`
	OpenInterest    *int32   `protobuf:"varint,19,opt,name=open_interest" json:"open_interest,omitempty"`
	FirstNoticeDate *string  `protobuf:"bytes,20,opt,name=first_notice_date" json:"first_notice_date,omitempty"`
	Symbol          *string  `protobuf:"bytes,21,opt,name=symbol" json:"symbol,omitempty"`
	SymbolRoot      *string  `protobuf:"bytes,22,opt,name=symbol_root" json:"symbol_root,omitempty"`
	Margin          *float64 `protobuf:"fixed64,23,opt,name=margin" json:"margin,omitempty"`
	PriceScale      *float64 `protobuf:"fixed64,24,opt,name=price_scale" json:"price_scale,omitempty"`
	Country         *string  `protobuf:"bytes,25,opt,name=country" json:"country,omitempty"`
	// level 1 market data
	LastPrice     *float64 `protobuf:"fixed64,100,opt,name=last_price" json:"last_price,omitempty"`
	SizeLastTrade *int32   `protobuf:"varint,101,opt,name=size_last_trade" json:"size_last_trade,omitempty"`
	Bid           *float64 `protobuf:"fixed64,102,opt,name=bid" json:"bid,omitempty"`
	BidSize       *int32   `protobuf:"varint,103,opt,name=bid_size" json:"bid_size,omitempty"`
	Ask           *float64 `protobuf:"fixed64,104,opt,name=ask" json:"ask,omitempty"`
	AskSize       *int32   `protobuf:"varint,105,opt,name=ask_size" json:"ask_size,omitempty"`
	SpreadBa      *float64 `protobuf:"fixed64,106,opt,name=spread_ba" json:"spread_ba,omitempty"`
	High          *float64 `protobuf:"fixed64,107,opt,name=high" json:"high,omitempty"`
	Low           *float64 `protobuf:"fixed64,108,opt,name=low" json:"low,omitempty"`
	Open          *float64 `protobuf:"fixed64,109,opt,name=open" json:"open,omitempty"`
	Close         *float64 `protobuf:"fixed64,110,opt,name=close" json:"close,omitempty"`
	Volume        *int64   `protobuf:"varint,111,opt,name=volume" json:"volume,omitempty"`
	BidDatetime   *string  `protobuf:"bytes,112,opt,name=bid_datetime" json:"bid_datetime,omitempty"`
	AskDatetime   *string  `protobuf:"bytes,113,opt,name=ask_datetime" json:"ask_datetime,omitempty"`
	LastDatetime  *string  `protobuf:"bytes,114,opt,name=last_datetime" json:"last_datetime,omitempty"`
	// level 2 market data
	Bid1             *float64 `protobuf:"fixed64,201,opt,name=bid1" json:"bid1,omitempty"`
	Bid1Size         *int32   `protobuf:"varint,202,opt,name=bid1_size" json:"bid1_size,omitempty"`
	Bid2             *float64 `protobuf:"fixed64,203,opt,name=bid2" json:"bid2,omitempty"`
	Bid2Size         *int32   `protobuf:"varint,204,opt,name=bid2_size" json:"bid2_size,omitempty"`
	Bid3             *float64 `protobuf:"fixed64,205,opt,name=bid3" json:"bid3,omitempty"`
	Bid3Size         *int32   `protobuf:"varint,206,opt,name=bid3_size" json:"bid3_size,omitempty"`
	Bid4             *float64 `protobuf:"fixed64,207,opt,name=bid4" json:"bid4,omitempty"`
	Bid4Size         *int32   `protobuf:"varint,208,opt,name=bid4_size" json:"bid4_size,omitempty"`
	Bid5             *float64 `protobuf:"fixed64,209,opt,name=bid5" json:"bid5,omitempty"`
	Bid5Size         *int32   `protobuf:"varint,210,opt,name=bid5_size" json:"bid5_size,omitempty"`
	Ask1             *float64 `protobuf:"fixed64,211,opt,name=ask1" json:"ask1,omitempty"`
	Ask1Size         *int32   `protobuf:"varint,212,opt,name=ask1_size" json:"ask1_size,omitempty"`
	Ask2             *float64 `protobuf:"fixed64,213,opt,name=ask2" json:"ask2,omitempty"`
	Ask2Size         *int32   `protobuf:"varint,214,opt,name=ask2_size" json:"ask2_size,omitempty"`
	Ask3             *float64 `protobuf:"fixed64,215,opt,name=ask3" json:"ask3,omitempty"`
	Ask3Size         *int32   `protobuf:"varint,216,opt,name=ask3_size" json:"ask3_size,omitempty"`
	Ask4             *float64 `protobuf:"fixed64,217,opt,name=ask4" json:"ask4,omitempty"`
	Ask4Size         *int32   `protobuf:"varint,218,opt,name=ask4_size" json:"ask4_size,omitempty"`
	Ask5             *float64 `protobuf:"fixed64,219,opt,name=ask5" json:"ask5,omitempty"`
	Ask5Size         *int32   `protobuf:"varint,220,opt,name=ask5_size" json:"ask5_size,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Quote) Reset()      { *m = Quote{} }
func (*Quote) ProtoMessage() {}

func (m *Quote) GetIsin() string {
	if m != nil && m.Isin != nil {
		return *m.Isin
	}
	return ""
}

func (m *Quote) GetSedol() string {
	if m != nil && m.Sedol != nil {
		return *m.Sedol
	}
	return ""
}

func (m *Quote) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Quote) GetCrncy() string {
	if m != nil && m.Crncy != nil {
		return *m.Crncy
	}
	return ""
}

func (m *Quote) GetPxTradeLotSize() float64 {
	if m != nil && m.PxTradeLotSize != nil {
		return *m.PxTradeLotSize
	}
	return 0
}

func (m *Quote) GetRoundLot() float64 {
	if m != nil && m.RoundLot != nil {
		return *m.RoundLot
	}
	return 0
}

func (m *Quote) GetExchCode() string {
	if m != nil && m.ExchCode != nil {
		return *m.ExchCode
	}
	return ""
}

func (m *Quote) GetPrimExch() string {
	if m != nil && m.PrimExch != nil {
		return *m.PrimExch
	}
	return ""
}

func (m *Quote) GetExpiry() string {
	if m != nil && m.Expiry != nil {
		return *m.Expiry
	}
	return ""
}

func (m *Quote) GetMultiplier() string {
	if m != nil && m.Multiplier != nil {
		return *m.Multiplier
	}
	return ""
}

func (m *Quote) GetTickSize() float64 {
	if m != nil && m.TickSize != nil {
		return *m.TickSize
	}
	return 0
}

func (m *Quote) GetOpenInterest() int32 {
	if m != nil && m.OpenInterest != nil {
		return *m.OpenInterest
	}
	return 0
}

func (m *Quote) GetFirstNoticeDate() string {
	if m != nil && m.FirstNoticeDate != nil {
		return *m.FirstNoticeDate
	}
	return ""
}

func (m *Quote) GetSymbol() string {
	if m != nil && m.Symbol != nil {
		return *m.Symbol
	}
	return ""
}

func (m *Quote) GetSymbolRoot() string {
	if m != nil && m.SymbolRoot != nil {
		return *m.SymbolRoot
	}
	return ""
}

func (m *Quote) GetMargin() float64 {
	if m != nil && m.Margin != nil {
		return *m.Margin
	}
	return 0
}

func (m *Quote) GetPriceScale() float64 {
	if m != nil && m.PriceScale != nil {
		return *m.PriceScale
	}
	return 0
}

func (m *Quote) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *Quote) GetLastPrice() float64 {
	if m != nil && m.LastPrice != nil {
		return *m.LastPrice
	}
	return 0
}

func (m *Quote) GetSizeLastTrade() int32 {
	if m != nil && m.SizeLastTrade != nil {
		return *m.SizeLastTrade
	}
	return 0
}

func (m *Quote) GetBid() float64 {
	if m != nil && m.Bid != nil {
		return *m.Bid
	}
	return 0
}

func (m *Quote) GetBidSize() int32 {
	if m != nil && m.BidSize != nil {
		return *m.BidSize
	}
	return 0
}

func (m *Quote) GetAsk() float64 {
	if m != nil && m.Ask != nil {
		return *m.Ask
	}
	return 0
}

func (m *Quote) GetAskSize() int32 {
	if m != nil && m.AskSize != nil {
		return *m.AskSize
	}
	return 0
}

func (m *Quote) GetSpreadBa() float64 {
	if m != nil && m.SpreadBa != nil {
		return *m.SpreadBa
	}
	return 0
}

func (m *Quote) GetHigh() float64 {
	if m != nil && m.High != nil {
		return *m.High
	}
	return 0
}

func (m *Quote) GetLow() float64 {
	if m != nil && m.Low != nil {
		return *m.Low
	}
	return 0
}

func (m *Quote) GetOpen() float64 {
	if m != nil && m.Open != nil {
		return *m.Open
	}
	return 0
}

func (m *Quote) GetClose() float64 {
	if m != nil && m.Close != nil {
		return *m.Close
	}
	return 0
}

func (m *Quote) GetVolume() int64 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *Quote) GetBidDatetime() string {
	if m != nil && m.BidDatetime != nil {
		return *m.BidDatetime
	}
	return ""
}

func (m *Quote) GetAskDatetime() string {
	if m != nil && m.AskDatetime != nil {
		return *m.AskDatetime
	}
	return ""
}

func (m *Quote) GetLastDatetime() string {
	if m != nil && m.LastDatetime != nil {
		return *m.LastDatetime
	}
	return ""
}

func (m *Quote) GetBid1() float64 {
	if m != nil && m.Bid1 != nil {
		return *m.Bid1
	}
	return 0
}

func (m *Quote) GetBid1Size() int32 {
	if m != nil && m.Bid1Size != nil {
		return *m.Bid1Size
	}
	return 0
}

func (m *Quote) GetBid2() float64 {
	if m != nil && m.Bid2 != nil {
		return *m.Bid2
	}
	return 0
}

func (m *Quote) GetBid2Size() int32 {
	if m != nil && m.Bid2Size != nil {
		return *m.Bid2Size
	}
	return 0
}

func (m *Quote) GetBid3() float64 {
	if m != nil && m.Bid3 != nil {
		return *m.Bid3
	}
	return 0
}

func (m *Quote) GetBid3Size() int32 {
	if m != nil && m.Bid3Size != nil {
		return *m.Bid3Size
	}
	return 0
}

func (m *Quote) GetBid4() float64 {
	if m != nil && m.Bid4 != nil {
		return *m.Bid4
	}
	return 0
}

func (m *Quote) GetBid4Size() int32 {
	if m != nil && m.Bid4Size != nil {
		return *m.Bid4Size
	}
	return 0
}

func (m *Quote) GetBid5() float64 {
	if m != nil && m.Bid5 != nil {
		return *m.Bid5
	}
	return 0
}

func (m *Quote) GetBid5Size() int32 {
	if m != nil && m.Bid5Size != nil {
		return *m.Bid5Size
	}
	return 0
}

func (m *Quote) GetAsk1() float64 {
	if m != nil && m.Ask1 != nil {
		return *m.Ask1
	}
	return 0
}

func (m *Quote) GetAsk1Size() int32 {
	if m != nil && m.Ask1Size != nil {
		return *m.Ask1Size
	}
	return 0
}

func (m *Quote) GetAsk2() float64 {
	if m != nil && m.Ask2 != nil {
		return *m.Ask2
	}
	return 0
}

func (m *Quote) GetAsk2Size() int32 {
	if m != nil && m.Ask2Size != nil {
		return *m.Ask2Size
	}
	return 0
}

func (m *Quote) GetAsk3() float64 {
	if m != nil && m.Ask3 != nil {
		return *m.Ask3
	}
	return 0
}

func (m *Quote) GetAsk3Size() int32 {
	if m != nil && m.Ask3Size != nil {
		return *m.Ask3Size
	}
	return 0
}

func (m *Quote) GetAsk4() float64 {
	if m != nil && m.Ask4 != nil {
		return *m.Ask4
	}
	return 0
}

func (m *Quote) GetAsk4Size() int32 {
	if m != nil && m.Ask4Size != nil {
		return *m.Ask4Size
	}
	return 0
}

func (m *Quote) GetAsk5() float64 {
	if m != nil && m.Ask5 != nil {
		return *m.Ask5
	}
	return 0
}

func (m *Quote) GetAsk5Size() int32 {
	if m != nil && m.Ask5Size != nil {
		return *m.Ask5Size
	}
	return 0
}

type QuoteInitialRequest struct {
	Symbol *string `protobuf:"bytes,1,req,name=symbol" json:"symbol,omitempty"`
	// options
	Exchange           *string `protobuf:"bytes,5,opt,name=exchange" json:"exchange,omitempty"`
	IncludeOptionChain *bool   `protobuf:"varint,6,opt,name=include_option_chain" json:"include_option_chain,omitempty"`
	// entitlements
	Source           *string `protobuf:"bytes,50,opt,name=source" json:"source,omitempty"`
	User             *string `protobuf:"bytes,51,opt,name=user" json:"user,omitempty"`
	UserId           *int32  `protobuf:"varint,52,opt,name=user_id" json:"user_id,omitempty"`
	Machine          *string `protobuf:"bytes,53,opt,name=machine" json:"machine,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *QuoteInitialRequest) Reset()      { *m = QuoteInitialRequest{} }
func (*QuoteInitialRequest) ProtoMessage() {}

func (m *QuoteInitialRequest) GetSymbol() string {
	if m != nil && m.Symbol != nil {
		return *m.Symbol
	}
	return ""
}

func (m *QuoteInitialRequest) GetExchange() string {
	if m != nil && m.Exchange != nil {
		return *m.Exchange
	}
	return ""
}

func (m *QuoteInitialRequest) GetIncludeOptionChain() bool {
	if m != nil && m.IncludeOptionChain != nil {
		return *m.IncludeOptionChain
	}
	return false
}

func (m *QuoteInitialRequest) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *QuoteInitialRequest) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *QuoteInitialRequest) GetUserId() int32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *QuoteInitialRequest) GetMachine() string {
	if m != nil && m.Machine != nil {
		return *m.Machine
	}
	return ""
}

type QuoteInitialResponse struct {
	ErrorCode        *int32  `protobuf:"varint,1,opt,name=error_code" json:"error_code,omitempty"`
	ErrorMessage     *string `protobuf:"bytes,2,opt,name=error_message" json:"error_message,omitempty"`
	Quote            *Quote  `protobuf:"bytes,8,opt,name=quote" json:"quote,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *QuoteInitialResponse) Reset()      { *m = QuoteInitialResponse{} }
func (*QuoteInitialResponse) ProtoMessage() {}

func (m *QuoteInitialResponse) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *QuoteInitialResponse) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *QuoteInitialResponse) GetQuote() *Quote {
	if m != nil {
		return m.Quote
	}
	return nil
}

func init() {
}
func (m *Quote) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Isin = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sedol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Sedol = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crncy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Crncy = &s
			iNdEx = postIndex
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PxTradeLotSize", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.PxTradeLotSize = &v2
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundLot", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.RoundLot = &v2
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ExchCode = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimExch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.PrimExch = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Expiry = &s
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Multiplier = &s
			iNdEx = postIndex
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickSize", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.TickSize = &v2
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenInterest", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenInterest = &v
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstNoticeDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.FirstNoticeDate = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Symbol = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymbolRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.SymbolRoot = &s
			iNdEx = postIndex
		case 23:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Margin = &v2
		case 24:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceScale", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.PriceScale = &v2
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Country = &s
			iNdEx = postIndex
		case 100:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.LastPrice = &v2
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeLastTrade", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SizeLastTrade = &v
		case 102:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Bid = &v2
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BidSize = &v
		case 104:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Ask = &v2
		case 105:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AskSize = &v
		case 106:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadBa", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.SpreadBa = &v2
		case 107:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.High = &v2
		case 108:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Low = &v2
		case 109:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Open = &v2
		case 110:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Close", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Close = &v2
		case 111:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Volume = &v
		case 112:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidDatetime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.BidDatetime = &s
			iNdEx = postIndex
		case 113:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskDatetime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.AskDatetime = &s
			iNdEx = postIndex
		case 114:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDatetime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.LastDatetime = &s
			iNdEx = postIndex
		case 201:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Bid1 = &v2
		case 202:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid1Size", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bid1Size = &v
		case 203:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid2", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Bid2 = &v2
		case 204:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid2Size", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bid2Size = &v
		case 205:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid3", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Bid3 = &v2
		case 206:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid3Size", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bid3Size = &v
		case 207:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid4", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Bid4 = &v2
		case 208:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid4Size", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bid4Size = &v
		case 209:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid5", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Bid5 = &v2
		case 210:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid5Size", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bid5Size = &v
		case 211:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Ask1 = &v2
		case 212:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask1Size", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ask1Size = &v
		case 213:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask2", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Ask2 = &v2
		case 214:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask2Size", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ask2Size = &v
		case 215:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask3", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Ask3 = &v2
		case 216:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask3Size", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ask3Size = &v
		case 217:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask4", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Ask4 = &v2
		case 218:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask4Size", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ask4Size = &v
		case 219:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask5", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Ask5 = &v2
		case 220:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ask5Size", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ask5Size = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipPricing(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *QuoteInitialRequest) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Symbol = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Exchange = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeOptionChain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IncludeOptionChain = &b
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Source = &s
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.User = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Machine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Machine = &s
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipPricing(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("symbol")
	}

	return nil
}
func (m *QuoteInitialResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrorCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ErrorMessage = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quote == nil {
				m.Quote = &Quote{}
			}
			if err := m.Quote.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipPricing(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func skipPricing(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for {
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPricing(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}
func (this *Quote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Quote{`,
		`Isin:` + valueToStringPricing(this.Isin) + `,`,
		`Sedol:` + valueToStringPricing(this.Sedol) + `,`,
		`Description:` + valueToStringPricing(this.Description) + `,`,
		`Crncy:` + valueToStringPricing(this.Crncy) + `,`,
		`PxTradeLotSize:` + valueToStringPricing(this.PxTradeLotSize) + `,`,
		`RoundLot:` + valueToStringPricing(this.RoundLot) + `,`,
		`ExchCode:` + valueToStringPricing(this.ExchCode) + `,`,
		`PrimExch:` + valueToStringPricing(this.PrimExch) + `,`,
		`Expiry:` + valueToStringPricing(this.Expiry) + `,`,
		`Multiplier:` + valueToStringPricing(this.Multiplier) + `,`,
		`TickSize:` + valueToStringPricing(this.TickSize) + `,`,
		`OpenInterest:` + valueToStringPricing(this.OpenInterest) + `,`,
		`FirstNoticeDate:` + valueToStringPricing(this.FirstNoticeDate) + `,`,
		`Symbol:` + valueToStringPricing(this.Symbol) + `,`,
		`SymbolRoot:` + valueToStringPricing(this.SymbolRoot) + `,`,
		`Margin:` + valueToStringPricing(this.Margin) + `,`,
		`PriceScale:` + valueToStringPricing(this.PriceScale) + `,`,
		`Country:` + valueToStringPricing(this.Country) + `,`,
		`LastPrice:` + valueToStringPricing(this.LastPrice) + `,`,
		`SizeLastTrade:` + valueToStringPricing(this.SizeLastTrade) + `,`,
		`Bid:` + valueToStringPricing(this.Bid) + `,`,
		`BidSize:` + valueToStringPricing(this.BidSize) + `,`,
		`Ask:` + valueToStringPricing(this.Ask) + `,`,
		`AskSize:` + valueToStringPricing(this.AskSize) + `,`,
		`SpreadBa:` + valueToStringPricing(this.SpreadBa) + `,`,
		`High:` + valueToStringPricing(this.High) + `,`,
		`Low:` + valueToStringPricing(this.Low) + `,`,
		`Open:` + valueToStringPricing(this.Open) + `,`,
		`Close:` + valueToStringPricing(this.Close) + `,`,
		`Volume:` + valueToStringPricing(this.Volume) + `,`,
		`BidDatetime:` + valueToStringPricing(this.BidDatetime) + `,`,
		`AskDatetime:` + valueToStringPricing(this.AskDatetime) + `,`,
		`LastDatetime:` + valueToStringPricing(this.LastDatetime) + `,`,
		`Bid1:` + valueToStringPricing(this.Bid1) + `,`,
		`Bid1Size:` + valueToStringPricing(this.Bid1Size) + `,`,
		`Bid2:` + valueToStringPricing(this.Bid2) + `,`,
		`Bid2Size:` + valueToStringPricing(this.Bid2Size) + `,`,
		`Bid3:` + valueToStringPricing(this.Bid3) + `,`,
		`Bid3Size:` + valueToStringPricing(this.Bid3Size) + `,`,
		`Bid4:` + valueToStringPricing(this.Bid4) + `,`,
		`Bid4Size:` + valueToStringPricing(this.Bid4Size) + `,`,
		`Bid5:` + valueToStringPricing(this.Bid5) + `,`,
		`Bid5Size:` + valueToStringPricing(this.Bid5Size) + `,`,
		`Ask1:` + valueToStringPricing(this.Ask1) + `,`,
		`Ask1Size:` + valueToStringPricing(this.Ask1Size) + `,`,
		`Ask2:` + valueToStringPricing(this.Ask2) + `,`,
		`Ask2Size:` + valueToStringPricing(this.Ask2Size) + `,`,
		`Ask3:` + valueToStringPricing(this.Ask3) + `,`,
		`Ask3Size:` + valueToStringPricing(this.Ask3Size) + `,`,
		`Ask4:` + valueToStringPricing(this.Ask4) + `,`,
		`Ask4Size:` + valueToStringPricing(this.Ask4Size) + `,`,
		`Ask5:` + valueToStringPricing(this.Ask5) + `,`,
		`Ask5Size:` + valueToStringPricing(this.Ask5Size) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuoteInitialRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuoteInitialRequest{`,
		`Symbol:` + valueToStringPricing(this.Symbol) + `,`,
		`Exchange:` + valueToStringPricing(this.Exchange) + `,`,
		`IncludeOptionChain:` + valueToStringPricing(this.IncludeOptionChain) + `,`,
		`Source:` + valueToStringPricing(this.Source) + `,`,
		`User:` + valueToStringPricing(this.User) + `,`,
		`UserId:` + valueToStringPricing(this.UserId) + `,`,
		`Machine:` + valueToStringPricing(this.Machine) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuoteInitialResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuoteInitialResponse{`,
		`ErrorCode:` + valueToStringPricing(this.ErrorCode) + `,`,
		`ErrorMessage:` + valueToStringPricing(this.ErrorMessage) + `,`,
		`Quote:` + strings.Replace(fmt.Sprintf("%v", this.Quote), "Quote", "Quote", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPricing(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Quote) Size() (n int) {
	var l int
	_ = l
	if m.Isin != nil {
		l = len(*m.Isin)
		n += 1 + l + sovPricing(uint64(l))
	}
	if m.Sedol != nil {
		l = len(*m.Sedol)
		n += 1 + l + sovPricing(uint64(l))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovPricing(uint64(l))
	}
	if m.Crncy != nil {
		l = len(*m.Crncy)
		n += 1 + l + sovPricing(uint64(l))
	}
	if m.PxTradeLotSize != nil {
		n += 9
	}
	if m.RoundLot != nil {
		n += 9
	}
	if m.ExchCode != nil {
		l = len(*m.ExchCode)
		n += 1 + l + sovPricing(uint64(l))
	}
	if m.PrimExch != nil {
		l = len(*m.PrimExch)
		n += 1 + l + sovPricing(uint64(l))
	}
	if m.Expiry != nil {
		l = len(*m.Expiry)
		n += 2 + l + sovPricing(uint64(l))
	}
	if m.Multiplier != nil {
		l = len(*m.Multiplier)
		n += 2 + l + sovPricing(uint64(l))
	}
	if m.TickSize != nil {
		n += 10
	}
	if m.OpenInterest != nil {
		n += 2 + sovPricing(uint64(*m.OpenInterest))
	}
	if m.FirstNoticeDate != nil {
		l = len(*m.FirstNoticeDate)
		n += 2 + l + sovPricing(uint64(l))
	}
	if m.Symbol != nil {
		l = len(*m.Symbol)
		n += 2 + l + sovPricing(uint64(l))
	}
	if m.SymbolRoot != nil {
		l = len(*m.SymbolRoot)
		n += 2 + l + sovPricing(uint64(l))
	}
	if m.Margin != nil {
		n += 10
	}
	if m.PriceScale != nil {
		n += 10
	}
	if m.Country != nil {
		l = len(*m.Country)
		n += 2 + l + sovPricing(uint64(l))
	}
	if m.LastPrice != nil {
		n += 10
	}
	if m.SizeLastTrade != nil {
		n += 2 + sovPricing(uint64(*m.SizeLastTrade))
	}
	if m.Bid != nil {
		n += 10
	}
	if m.BidSize != nil {
		n += 2 + sovPricing(uint64(*m.BidSize))
	}
	if m.Ask != nil {
		n += 10
	}
	if m.AskSize != nil {
		n += 2 + sovPricing(uint64(*m.AskSize))
	}
	if m.SpreadBa != nil {
		n += 10
	}
	if m.High != nil {
		n += 10
	}
	if m.Low != nil {
		n += 10
	}
	if m.Open != nil {
		n += 10
	}
	if m.Close != nil {
		n += 10
	}
	if m.Volume != nil {
		n += 2 + sovPricing(uint64(*m.Volume))
	}
	if m.BidDatetime != nil {
		l = len(*m.BidDatetime)
		n += 2 + l + sovPricing(uint64(l))
	}
	if m.AskDatetime != nil {
		l = len(*m.AskDatetime)
		n += 2 + l + sovPricing(uint64(l))
	}
	if m.LastDatetime != nil {
		l = len(*m.LastDatetime)
		n += 2 + l + sovPricing(uint64(l))
	}
	if m.Bid1 != nil {
		n += 10
	}
	if m.Bid1Size != nil {
		n += 2 + sovPricing(uint64(*m.Bid1Size))
	}
	if m.Bid2 != nil {
		n += 10
	}
	if m.Bid2Size != nil {
		n += 2 + sovPricing(uint64(*m.Bid2Size))
	}
	if m.Bid3 != nil {
		n += 10
	}
	if m.Bid3Size != nil {
		n += 2 + sovPricing(uint64(*m.Bid3Size))
	}
	if m.Bid4 != nil {
		n += 10
	}
	if m.Bid4Size != nil {
		n += 2 + sovPricing(uint64(*m.Bid4Size))
	}
	if m.Bid5 != nil {
		n += 10
	}
	if m.Bid5Size != nil {
		n += 2 + sovPricing(uint64(*m.Bid5Size))
	}
	if m.Ask1 != nil {
		n += 10
	}
	if m.Ask1Size != nil {
		n += 2 + sovPricing(uint64(*m.Ask1Size))
	}
	if m.Ask2 != nil {
		n += 10
	}
	if m.Ask2Size != nil {
		n += 2 + sovPricing(uint64(*m.Ask2Size))
	}
	if m.Ask3 != nil {
		n += 10
	}
	if m.Ask3Size != nil {
		n += 2 + sovPricing(uint64(*m.Ask3Size))
	}
	if m.Ask4 != nil {
		n += 10
	}
	if m.Ask4Size != nil {
		n += 2 + sovPricing(uint64(*m.Ask4Size))
	}
	if m.Ask5 != nil {
		n += 10
	}
	if m.Ask5Size != nil {
		n += 2 + sovPricing(uint64(*m.Ask5Size))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QuoteInitialRequest) Size() (n int) {
	var l int
	_ = l
	if m.Symbol != nil {
		l = len(*m.Symbol)
		n += 1 + l + sovPricing(uint64(l))
	}
	if m.Exchange != nil {
		l = len(*m.Exchange)
		n += 1 + l + sovPricing(uint64(l))
	}
	if m.IncludeOptionChain != nil {
		n += 2
	}
	if m.Source != nil {
		l = len(*m.Source)
		n += 2 + l + sovPricing(uint64(l))
	}
	if m.User != nil {
		l = len(*m.User)
		n += 2 + l + sovPricing(uint64(l))
	}
	if m.UserId != nil {
		n += 2 + sovPricing(uint64(*m.UserId))
	}
	if m.Machine != nil {
		l = len(*m.Machine)
		n += 2 + l + sovPricing(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QuoteInitialResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != nil {
		n += 1 + sovPricing(uint64(*m.ErrorCode))
	}
	if m.ErrorMessage != nil {
		l = len(*m.ErrorMessage)
		n += 1 + l + sovPricing(uint64(l))
	}
	if m.Quote != nil {
		l = m.Quote.Size()
		n += 1 + l + sovPricing(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPricing(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPricing(x uint64) (n int) {
	return sovPricing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func NewPopulatedQuote(r randyPricing, easy bool) *Quote {
	this := &Quote{}
	if r.Intn(10) != 0 {
		v1 := randStringPricing(r)
		this.Isin = &v1
	}
	if r.Intn(10) != 0 {
		v2 := randStringPricing(r)
		this.Sedol = &v2
	}
	if r.Intn(10) != 0 {
		v3 := randStringPricing(r)
		this.Description = &v3
	}
	if r.Intn(10) != 0 {
		v4 := randStringPricing(r)
		this.Crncy = &v4
	}
	if r.Intn(10) != 0 {
		v5 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		this.PxTradeLotSize = &v5
	}
	if r.Intn(10) != 0 {
		v6 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		this.RoundLot = &v6
	}
	if r.Intn(10) != 0 {
		v7 := randStringPricing(r)
		this.ExchCode = &v7
	}
	if r.Intn(10) != 0 {
		v8 := randStringPricing(r)
		this.PrimExch = &v8
	}
	if r.Intn(10) != 0 {
		v9 := randStringPricing(r)
		this.Expiry = &v9
	}
	if r.Intn(10) != 0 {
		v10 := randStringPricing(r)
		this.Multiplier = &v10
	}
	if r.Intn(10) != 0 {
		v11 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		this.TickSize = &v11
	}
	if r.Intn(10) != 0 {
		v12 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		this.OpenInterest = &v12
	}
	if r.Intn(10) != 0 {
		v13 := randStringPricing(r)
		this.FirstNoticeDate = &v13
	}
	if r.Intn(10) != 0 {
		v14 := randStringPricing(r)
		this.Symbol = &v14
	}
	if r.Intn(10) != 0 {
		v15 := randStringPricing(r)
		this.SymbolRoot = &v15
	}
	if r.Intn(10) != 0 {
		v16 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v16 *= -1
		}
		this.Margin = &v16
	}
	if r.Intn(10) != 0 {
		v17 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v17 *= -1
		}
		this.PriceScale = &v17
	}
	if r.Intn(10) != 0 {
		v18 := randStringPricing(r)
		this.Country = &v18
	}
	if r.Intn(10) != 0 {
		v19 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v19 *= -1
		}
		this.LastPrice = &v19
	}
	if r.Intn(10) != 0 {
		v20 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v20 *= -1
		}
		this.SizeLastTrade = &v20
	}
	if r.Intn(10) != 0 {
		v21 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v21 *= -1
		}
		this.Bid = &v21
	}
	if r.Intn(10) != 0 {
		v22 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v22 *= -1
		}
		this.BidSize = &v22
	}
	if r.Intn(10) != 0 {
		v23 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v23 *= -1
		}
		this.Ask = &v23
	}
	if r.Intn(10) != 0 {
		v24 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v24 *= -1
		}
		this.AskSize = &v24
	}
	if r.Intn(10) != 0 {
		v25 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v25 *= -1
		}
		this.SpreadBa = &v25
	}
	if r.Intn(10) != 0 {
		v26 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v26 *= -1
		}
		this.High = &v26
	}
	if r.Intn(10) != 0 {
		v27 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v27 *= -1
		}
		this.Low = &v27
	}
	if r.Intn(10) != 0 {
		v28 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v28 *= -1
		}
		this.Open = &v28
	}
	if r.Intn(10) != 0 {
		v29 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v29 *= -1
		}
		this.Close = &v29
	}
	if r.Intn(10) != 0 {
		v30 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v30 *= -1
		}
		this.Volume = &v30
	}
	if r.Intn(10) != 0 {
		v31 := randStringPricing(r)
		this.BidDatetime = &v31
	}
	if r.Intn(10) != 0 {
		v32 := randStringPricing(r)
		this.AskDatetime = &v32
	}
	if r.Intn(10) != 0 {
		v33 := randStringPricing(r)
		this.LastDatetime = &v33
	}
	if r.Intn(10) != 0 {
		v34 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v34 *= -1
		}
		this.Bid1 = &v34
	}
	if r.Intn(10) != 0 {
		v35 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v35 *= -1
		}
		this.Bid1Size = &v35
	}
	if r.Intn(10) != 0 {
		v36 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v36 *= -1
		}
		this.Bid2 = &v36
	}
	if r.Intn(10) != 0 {
		v37 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v37 *= -1
		}
		this.Bid2Size = &v37
	}
	if r.Intn(10) != 0 {
		v38 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v38 *= -1
		}
		this.Bid3 = &v38
	}
	if r.Intn(10) != 0 {
		v39 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v39 *= -1
		}
		this.Bid3Size = &v39
	}
	if r.Intn(10) != 0 {
		v40 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v40 *= -1
		}
		this.Bid4 = &v40
	}
	if r.Intn(10) != 0 {
		v41 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v41 *= -1
		}
		this.Bid4Size = &v41
	}
	if r.Intn(10) != 0 {
		v42 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v42 *= -1
		}
		this.Bid5 = &v42
	}
	if r.Intn(10) != 0 {
		v43 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v43 *= -1
		}
		this.Bid5Size = &v43
	}
	if r.Intn(10) != 0 {
		v44 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v44 *= -1
		}
		this.Ask1 = &v44
	}
	if r.Intn(10) != 0 {
		v45 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v45 *= -1
		}
		this.Ask1Size = &v45
	}
	if r.Intn(10) != 0 {
		v46 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v46 *= -1
		}
		this.Ask2 = &v46
	}
	if r.Intn(10) != 0 {
		v47 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v47 *= -1
		}
		this.Ask2Size = &v47
	}
	if r.Intn(10) != 0 {
		v48 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v48 *= -1
		}
		this.Ask3 = &v48
	}
	if r.Intn(10) != 0 {
		v49 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v49 *= -1
		}
		this.Ask3Size = &v49
	}
	if r.Intn(10) != 0 {
		v50 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v50 *= -1
		}
		this.Ask4 = &v50
	}
	if r.Intn(10) != 0 {
		v51 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v51 *= -1
		}
		this.Ask4Size = &v51
	}
	if r.Intn(10) != 0 {
		v52 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v52 *= -1
		}
		this.Ask5 = &v52
	}
	if r.Intn(10) != 0 {
		v53 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v53 *= -1
		}
		this.Ask5Size = &v53
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPricing(r, 221)
	}
	return this
}

func NewPopulatedQuoteInitialRequest(r randyPricing, easy bool) *QuoteInitialRequest {
	this := &QuoteInitialRequest{}
	v54 := randStringPricing(r)
	this.Symbol = &v54
	if r.Intn(10) != 0 {
		v55 := randStringPricing(r)
		this.Exchange = &v55
	}
	if r.Intn(10) != 0 {
		v56 := bool(bool(r.Intn(2) == 0))
		this.IncludeOptionChain = &v56
	}
	if r.Intn(10) != 0 {
		v57 := randStringPricing(r)
		this.Source = &v57
	}
	if r.Intn(10) != 0 {
		v58 := randStringPricing(r)
		this.User = &v58
	}
	if r.Intn(10) != 0 {
		v59 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v59 *= -1
		}
		this.UserId = &v59
	}
	if r.Intn(10) != 0 {
		v60 := randStringPricing(r)
		this.Machine = &v60
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPricing(r, 54)
	}
	return this
}

func NewPopulatedQuoteInitialResponse(r randyPricing, easy bool) *QuoteInitialResponse {
	this := &QuoteInitialResponse{}
	if r.Intn(10) != 0 {
		v61 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v61 *= -1
		}
		this.ErrorCode = &v61
	}
	if r.Intn(10) != 0 {
		v62 := randStringPricing(r)
		this.ErrorMessage = &v62
	}
	if r.Intn(10) != 0 {
		this.Quote = NewPopulatedQuote(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPricing(r, 9)
	}
	return this
}

type randyPricing interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePricing(r randyPricing) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringPricing(r randyPricing) string {
	v63 := r.Intn(100)
	tmps := make([]rune, v63)
	for i := 0; i < v63; i++ {
		tmps[i] = randUTF8RunePricing(r)
	}
	return string(tmps)
}
func randUnrecognizedPricing(r randyPricing, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldPricing(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldPricing(data []byte, r randyPricing, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulatePricing(data, uint64(key))
		v64 := r.Int63()
		if r.Intn(2) == 0 {
			v64 *= -1
		}
		data = encodeVarintPopulatePricing(data, uint64(v64))
	case 1:
		data = encodeVarintPopulatePricing(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulatePricing(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulatePricing(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulatePricing(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulatePricing(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Quote) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Quote) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Isin != nil {
		data[i] = 0xa
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.Isin)))
		i += copy(data[i:], *m.Isin)
	}
	if m.Sedol != nil {
		data[i] = 0x12
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.Sedol)))
		i += copy(data[i:], *m.Sedol)
	}
	if m.Description != nil {
		data[i] = 0x52
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.Description)))
		i += copy(data[i:], *m.Description)
	}
	if m.Crncy != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.Crncy)))
		i += copy(data[i:], *m.Crncy)
	}
	if m.PxTradeLotSize != nil {
		data[i] = 0x61
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.PxTradeLotSize)))
	}
	if m.RoundLot != nil {
		data[i] = 0x69
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.RoundLot)))
	}
	if m.ExchCode != nil {
		data[i] = 0x72
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.ExchCode)))
		i += copy(data[i:], *m.ExchCode)
	}
	if m.PrimExch != nil {
		data[i] = 0x7a
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.PrimExch)))
		i += copy(data[i:], *m.PrimExch)
	}
	if m.Expiry != nil {
		data[i] = 0x82
		i++
		data[i] = 0x1
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.Expiry)))
		i += copy(data[i:], *m.Expiry)
	}
	if m.Multiplier != nil {
		data[i] = 0x8a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.Multiplier)))
		i += copy(data[i:], *m.Multiplier)
	}
	if m.TickSize != nil {
		data[i] = 0x91
		i++
		data[i] = 0x1
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.TickSize)))
	}
	if m.OpenInterest != nil {
		data[i] = 0x98
		i++
		data[i] = 0x1
		i++
		i = encodeVarintPricing(data, i, uint64(*m.OpenInterest))
	}
	if m.FirstNoticeDate != nil {
		data[i] = 0xa2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.FirstNoticeDate)))
		i += copy(data[i:], *m.FirstNoticeDate)
	}
	if m.Symbol != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.Symbol)))
		i += copy(data[i:], *m.Symbol)
	}
	if m.SymbolRoot != nil {
		data[i] = 0xb2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.SymbolRoot)))
		i += copy(data[i:], *m.SymbolRoot)
	}
	if m.Margin != nil {
		data[i] = 0xb9
		i++
		data[i] = 0x1
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Margin)))
	}
	if m.PriceScale != nil {
		data[i] = 0xc1
		i++
		data[i] = 0x1
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.PriceScale)))
	}
	if m.Country != nil {
		data[i] = 0xca
		i++
		data[i] = 0x1
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.Country)))
		i += copy(data[i:], *m.Country)
	}
	if m.LastPrice != nil {
		data[i] = 0xa1
		i++
		data[i] = 0x6
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.LastPrice)))
	}
	if m.SizeLastTrade != nil {
		data[i] = 0xa8
		i++
		data[i] = 0x6
		i++
		i = encodeVarintPricing(data, i, uint64(*m.SizeLastTrade))
	}
	if m.Bid != nil {
		data[i] = 0xb1
		i++
		data[i] = 0x6
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Bid)))
	}
	if m.BidSize != nil {
		data[i] = 0xb8
		i++
		data[i] = 0x6
		i++
		i = encodeVarintPricing(data, i, uint64(*m.BidSize))
	}
	if m.Ask != nil {
		data[i] = 0xc1
		i++
		data[i] = 0x6
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Ask)))
	}
	if m.AskSize != nil {
		data[i] = 0xc8
		i++
		data[i] = 0x6
		i++
		i = encodeVarintPricing(data, i, uint64(*m.AskSize))
	}
	if m.SpreadBa != nil {
		data[i] = 0xd1
		i++
		data[i] = 0x6
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.SpreadBa)))
	}
	if m.High != nil {
		data[i] = 0xd9
		i++
		data[i] = 0x6
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.High)))
	}
	if m.Low != nil {
		data[i] = 0xe1
		i++
		data[i] = 0x6
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Low)))
	}
	if m.Open != nil {
		data[i] = 0xe9
		i++
		data[i] = 0x6
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Open)))
	}
	if m.Close != nil {
		data[i] = 0xf1
		i++
		data[i] = 0x6
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Close)))
	}
	if m.Volume != nil {
		data[i] = 0xf8
		i++
		data[i] = 0x6
		i++
		i = encodeVarintPricing(data, i, uint64(*m.Volume))
	}
	if m.BidDatetime != nil {
		data[i] = 0x82
		i++
		data[i] = 0x7
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.BidDatetime)))
		i += copy(data[i:], *m.BidDatetime)
	}
	if m.AskDatetime != nil {
		data[i] = 0x8a
		i++
		data[i] = 0x7
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.AskDatetime)))
		i += copy(data[i:], *m.AskDatetime)
	}
	if m.LastDatetime != nil {
		data[i] = 0x92
		i++
		data[i] = 0x7
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.LastDatetime)))
		i += copy(data[i:], *m.LastDatetime)
	}
	if m.Bid1 != nil {
		data[i] = 0xc9
		i++
		data[i] = 0xc
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Bid1)))
	}
	if m.Bid1Size != nil {
		data[i] = 0xd0
		i++
		data[i] = 0xc
		i++
		i = encodeVarintPricing(data, i, uint64(*m.Bid1Size))
	}
	if m.Bid2 != nil {
		data[i] = 0xd9
		i++
		data[i] = 0xc
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Bid2)))
	}
	if m.Bid2Size != nil {
		data[i] = 0xe0
		i++
		data[i] = 0xc
		i++
		i = encodeVarintPricing(data, i, uint64(*m.Bid2Size))
	}
	if m.Bid3 != nil {
		data[i] = 0xe9
		i++
		data[i] = 0xc
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Bid3)))
	}
	if m.Bid3Size != nil {
		data[i] = 0xf0
		i++
		data[i] = 0xc
		i++
		i = encodeVarintPricing(data, i, uint64(*m.Bid3Size))
	}
	if m.Bid4 != nil {
		data[i] = 0xf9
		i++
		data[i] = 0xc
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Bid4)))
	}
	if m.Bid4Size != nil {
		data[i] = 0x80
		i++
		data[i] = 0xd
		i++
		i = encodeVarintPricing(data, i, uint64(*m.Bid4Size))
	}
	if m.Bid5 != nil {
		data[i] = 0x89
		i++
		data[i] = 0xd
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Bid5)))
	}
	if m.Bid5Size != nil {
		data[i] = 0x90
		i++
		data[i] = 0xd
		i++
		i = encodeVarintPricing(data, i, uint64(*m.Bid5Size))
	}
	if m.Ask1 != nil {
		data[i] = 0x99
		i++
		data[i] = 0xd
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Ask1)))
	}
	if m.Ask1Size != nil {
		data[i] = 0xa0
		i++
		data[i] = 0xd
		i++
		i = encodeVarintPricing(data, i, uint64(*m.Ask1Size))
	}
	if m.Ask2 != nil {
		data[i] = 0xa9
		i++
		data[i] = 0xd
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Ask2)))
	}
	if m.Ask2Size != nil {
		data[i] = 0xb0
		i++
		data[i] = 0xd
		i++
		i = encodeVarintPricing(data, i, uint64(*m.Ask2Size))
	}
	if m.Ask3 != nil {
		data[i] = 0xb9
		i++
		data[i] = 0xd
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Ask3)))
	}
	if m.Ask3Size != nil {
		data[i] = 0xc0
		i++
		data[i] = 0xd
		i++
		i = encodeVarintPricing(data, i, uint64(*m.Ask3Size))
	}
	if m.Ask4 != nil {
		data[i] = 0xc9
		i++
		data[i] = 0xd
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Ask4)))
	}
	if m.Ask4Size != nil {
		data[i] = 0xd0
		i++
		data[i] = 0xd
		i++
		i = encodeVarintPricing(data, i, uint64(*m.Ask4Size))
	}
	if m.Ask5 != nil {
		data[i] = 0xd9
		i++
		data[i] = 0xd
		i++
		i = encodeFixed64Pricing(data, i, uint64(math.Float64bits(*m.Ask5)))
	}
	if m.Ask5Size != nil {
		data[i] = 0xe0
		i++
		data[i] = 0xd
		i++
		i = encodeVarintPricing(data, i, uint64(*m.Ask5Size))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QuoteInitialRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *QuoteInitialRequest) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Symbol == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("symbol")
	} else {
		data[i] = 0xa
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.Symbol)))
		i += copy(data[i:], *m.Symbol)
	}
	if m.Exchange != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.Exchange)))
		i += copy(data[i:], *m.Exchange)
	}
	if m.IncludeOptionChain != nil {
		data[i] = 0x30
		i++
		if *m.IncludeOptionChain {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Source != nil {
		data[i] = 0x92
		i++
		data[i] = 0x3
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.Source)))
		i += copy(data[i:], *m.Source)
	}
	if m.User != nil {
		data[i] = 0x9a
		i++
		data[i] = 0x3
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.User)))
		i += copy(data[i:], *m.User)
	}
	if m.UserId != nil {
		data[i] = 0xa0
		i++
		data[i] = 0x3
		i++
		i = encodeVarintPricing(data, i, uint64(*m.UserId))
	}
	if m.Machine != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x3
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.Machine)))
		i += copy(data[i:], *m.Machine)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QuoteInitialResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *QuoteInitialResponse) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != nil {
		data[i] = 0x8
		i++
		i = encodeVarintPricing(data, i, uint64(*m.ErrorCode))
	}
	if m.ErrorMessage != nil {
		data[i] = 0x12
		i++
		i = encodeVarintPricing(data, i, uint64(len(*m.ErrorMessage)))
		i += copy(data[i:], *m.ErrorMessage)
	}
	if m.Quote != nil {
		data[i] = 0x42
		i++
		i = encodeVarintPricing(data, i, uint64(m.Quote.Size()))
		n1, err := m.Quote.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Pricing(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Pricing(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPricing(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (this *Quote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pricing.Quote{` +
		`Isin:` + valueToGoStringPricing(this.Isin, "string"),
		`Sedol:` + valueToGoStringPricing(this.Sedol, "string"),
		`Description:` + valueToGoStringPricing(this.Description, "string"),
		`Crncy:` + valueToGoStringPricing(this.Crncy, "string"),
		`PxTradeLotSize:` + valueToGoStringPricing(this.PxTradeLotSize, "float64"),
		`RoundLot:` + valueToGoStringPricing(this.RoundLot, "float64"),
		`ExchCode:` + valueToGoStringPricing(this.ExchCode, "string"),
		`PrimExch:` + valueToGoStringPricing(this.PrimExch, "string"),
		`Expiry:` + valueToGoStringPricing(this.Expiry, "string"),
		`Multiplier:` + valueToGoStringPricing(this.Multiplier, "string"),
		`TickSize:` + valueToGoStringPricing(this.TickSize, "float64"),
		`OpenInterest:` + valueToGoStringPricing(this.OpenInterest, "int32"),
		`FirstNoticeDate:` + valueToGoStringPricing(this.FirstNoticeDate, "string"),
		`Symbol:` + valueToGoStringPricing(this.Symbol, "string"),
		`SymbolRoot:` + valueToGoStringPricing(this.SymbolRoot, "string"),
		`Margin:` + valueToGoStringPricing(this.Margin, "float64"),
		`PriceScale:` + valueToGoStringPricing(this.PriceScale, "float64"),
		`Country:` + valueToGoStringPricing(this.Country, "string"),
		`LastPrice:` + valueToGoStringPricing(this.LastPrice, "float64"),
		`SizeLastTrade:` + valueToGoStringPricing(this.SizeLastTrade, "int32"),
		`Bid:` + valueToGoStringPricing(this.Bid, "float64"),
		`BidSize:` + valueToGoStringPricing(this.BidSize, "int32"),
		`Ask:` + valueToGoStringPricing(this.Ask, "float64"),
		`AskSize:` + valueToGoStringPricing(this.AskSize, "int32"),
		`SpreadBa:` + valueToGoStringPricing(this.SpreadBa, "float64"),
		`High:` + valueToGoStringPricing(this.High, "float64"),
		`Low:` + valueToGoStringPricing(this.Low, "float64"),
		`Open:` + valueToGoStringPricing(this.Open, "float64"),
		`Close:` + valueToGoStringPricing(this.Close, "float64"),
		`Volume:` + valueToGoStringPricing(this.Volume, "int64"),
		`BidDatetime:` + valueToGoStringPricing(this.BidDatetime, "string"),
		`AskDatetime:` + valueToGoStringPricing(this.AskDatetime, "string"),
		`LastDatetime:` + valueToGoStringPricing(this.LastDatetime, "string"),
		`Bid1:` + valueToGoStringPricing(this.Bid1, "float64"),
		`Bid1Size:` + valueToGoStringPricing(this.Bid1Size, "int32"),
		`Bid2:` + valueToGoStringPricing(this.Bid2, "float64"),
		`Bid2Size:` + valueToGoStringPricing(this.Bid2Size, "int32"),
		`Bid3:` + valueToGoStringPricing(this.Bid3, "float64"),
		`Bid3Size:` + valueToGoStringPricing(this.Bid3Size, "int32"),
		`Bid4:` + valueToGoStringPricing(this.Bid4, "float64"),
		`Bid4Size:` + valueToGoStringPricing(this.Bid4Size, "int32"),
		`Bid5:` + valueToGoStringPricing(this.Bid5, "float64"),
		`Bid5Size:` + valueToGoStringPricing(this.Bid5Size, "int32"),
		`Ask1:` + valueToGoStringPricing(this.Ask1, "float64"),
		`Ask1Size:` + valueToGoStringPricing(this.Ask1Size, "int32"),
		`Ask2:` + valueToGoStringPricing(this.Ask2, "float64"),
		`Ask2Size:` + valueToGoStringPricing(this.Ask2Size, "int32"),
		`Ask3:` + valueToGoStringPricing(this.Ask3, "float64"),
		`Ask3Size:` + valueToGoStringPricing(this.Ask3Size, "int32"),
		`Ask4:` + valueToGoStringPricing(this.Ask4, "float64"),
		`Ask4Size:` + valueToGoStringPricing(this.Ask4Size, "int32"),
		`Ask5:` + valueToGoStringPricing(this.Ask5, "float64"),
		`Ask5Size:` + valueToGoStringPricing(this.Ask5Size, "int32"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *QuoteInitialRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pricing.QuoteInitialRequest{` +
		`Symbol:` + valueToGoStringPricing(this.Symbol, "string"),
		`Exchange:` + valueToGoStringPricing(this.Exchange, "string"),
		`IncludeOptionChain:` + valueToGoStringPricing(this.IncludeOptionChain, "bool"),
		`Source:` + valueToGoStringPricing(this.Source, "string"),
		`User:` + valueToGoStringPricing(this.User, "string"),
		`UserId:` + valueToGoStringPricing(this.UserId, "int32"),
		`Machine:` + valueToGoStringPricing(this.Machine, "string"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *QuoteInitialResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pricing.QuoteInitialResponse{` +
		`ErrorCode:` + valueToGoStringPricing(this.ErrorCode, "int32"),
		`ErrorMessage:` + valueToGoStringPricing(this.ErrorMessage, "string"),
		`Quote:` + fmt.Sprintf("%#v", this.Quote),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func valueToGoStringPricing(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringPricing(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func (this *Quote) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Quote)
	if !ok {
		return fmt.Errorf("that is not of type *Quote")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Quote but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Quotebut is not nil && this == nil")
	}
	if this.Isin != nil && that1.Isin != nil {
		if *this.Isin != *that1.Isin {
			return fmt.Errorf("Isin this(%v) Not Equal that(%v)", *this.Isin, *that1.Isin)
		}
	} else if this.Isin != nil {
		return fmt.Errorf("this.Isin == nil && that.Isin != nil")
	} else if that1.Isin != nil {
		return fmt.Errorf("Isin this(%v) Not Equal that(%v)", this.Isin, that1.Isin)
	}
	if this.Sedol != nil && that1.Sedol != nil {
		if *this.Sedol != *that1.Sedol {
			return fmt.Errorf("Sedol this(%v) Not Equal that(%v)", *this.Sedol, *that1.Sedol)
		}
	} else if this.Sedol != nil {
		return fmt.Errorf("this.Sedol == nil && that.Sedol != nil")
	} else if that1.Sedol != nil {
		return fmt.Errorf("Sedol this(%v) Not Equal that(%v)", this.Sedol, that1.Sedol)
	}
	if this.Description != nil && that1.Description != nil {
		if *this.Description != *that1.Description {
			return fmt.Errorf("Description this(%v) Not Equal that(%v)", *this.Description, *that1.Description)
		}
	} else if this.Description != nil {
		return fmt.Errorf("this.Description == nil && that.Description != nil")
	} else if that1.Description != nil {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if this.Crncy != nil && that1.Crncy != nil {
		if *this.Crncy != *that1.Crncy {
			return fmt.Errorf("Crncy this(%v) Not Equal that(%v)", *this.Crncy, *that1.Crncy)
		}
	} else if this.Crncy != nil {
		return fmt.Errorf("this.Crncy == nil && that.Crncy != nil")
	} else if that1.Crncy != nil {
		return fmt.Errorf("Crncy this(%v) Not Equal that(%v)", this.Crncy, that1.Crncy)
	}
	if this.PxTradeLotSize != nil && that1.PxTradeLotSize != nil {
		if *this.PxTradeLotSize != *that1.PxTradeLotSize {
			return fmt.Errorf("PxTradeLotSize this(%v) Not Equal that(%v)", *this.PxTradeLotSize, *that1.PxTradeLotSize)
		}
	} else if this.PxTradeLotSize != nil {
		return fmt.Errorf("this.PxTradeLotSize == nil && that.PxTradeLotSize != nil")
	} else if that1.PxTradeLotSize != nil {
		return fmt.Errorf("PxTradeLotSize this(%v) Not Equal that(%v)", this.PxTradeLotSize, that1.PxTradeLotSize)
	}
	if this.RoundLot != nil && that1.RoundLot != nil {
		if *this.RoundLot != *that1.RoundLot {
			return fmt.Errorf("RoundLot this(%v) Not Equal that(%v)", *this.RoundLot, *that1.RoundLot)
		}
	} else if this.RoundLot != nil {
		return fmt.Errorf("this.RoundLot == nil && that.RoundLot != nil")
	} else if that1.RoundLot != nil {
		return fmt.Errorf("RoundLot this(%v) Not Equal that(%v)", this.RoundLot, that1.RoundLot)
	}
	if this.ExchCode != nil && that1.ExchCode != nil {
		if *this.ExchCode != *that1.ExchCode {
			return fmt.Errorf("ExchCode this(%v) Not Equal that(%v)", *this.ExchCode, *that1.ExchCode)
		}
	} else if this.ExchCode != nil {
		return fmt.Errorf("this.ExchCode == nil && that.ExchCode != nil")
	} else if that1.ExchCode != nil {
		return fmt.Errorf("ExchCode this(%v) Not Equal that(%v)", this.ExchCode, that1.ExchCode)
	}
	if this.PrimExch != nil && that1.PrimExch != nil {
		if *this.PrimExch != *that1.PrimExch {
			return fmt.Errorf("PrimExch this(%v) Not Equal that(%v)", *this.PrimExch, *that1.PrimExch)
		}
	} else if this.PrimExch != nil {
		return fmt.Errorf("this.PrimExch == nil && that.PrimExch != nil")
	} else if that1.PrimExch != nil {
		return fmt.Errorf("PrimExch this(%v) Not Equal that(%v)", this.PrimExch, that1.PrimExch)
	}
	if this.Expiry != nil && that1.Expiry != nil {
		if *this.Expiry != *that1.Expiry {
			return fmt.Errorf("Expiry this(%v) Not Equal that(%v)", *this.Expiry, *that1.Expiry)
		}
	} else if this.Expiry != nil {
		return fmt.Errorf("this.Expiry == nil && that.Expiry != nil")
	} else if that1.Expiry != nil {
		return fmt.Errorf("Expiry this(%v) Not Equal that(%v)", this.Expiry, that1.Expiry)
	}
	if this.Multiplier != nil && that1.Multiplier != nil {
		if *this.Multiplier != *that1.Multiplier {
			return fmt.Errorf("Multiplier this(%v) Not Equal that(%v)", *this.Multiplier, *that1.Multiplier)
		}
	} else if this.Multiplier != nil {
		return fmt.Errorf("this.Multiplier == nil && that.Multiplier != nil")
	} else if that1.Multiplier != nil {
		return fmt.Errorf("Multiplier this(%v) Not Equal that(%v)", this.Multiplier, that1.Multiplier)
	}
	if this.TickSize != nil && that1.TickSize != nil {
		if *this.TickSize != *that1.TickSize {
			return fmt.Errorf("TickSize this(%v) Not Equal that(%v)", *this.TickSize, *that1.TickSize)
		}
	} else if this.TickSize != nil {
		return fmt.Errorf("this.TickSize == nil && that.TickSize != nil")
	} else if that1.TickSize != nil {
		return fmt.Errorf("TickSize this(%v) Not Equal that(%v)", this.TickSize, that1.TickSize)
	}
	if this.OpenInterest != nil && that1.OpenInterest != nil {
		if *this.OpenInterest != *that1.OpenInterest {
			return fmt.Errorf("OpenInterest this(%v) Not Equal that(%v)", *this.OpenInterest, *that1.OpenInterest)
		}
	} else if this.OpenInterest != nil {
		return fmt.Errorf("this.OpenInterest == nil && that.OpenInterest != nil")
	} else if that1.OpenInterest != nil {
		return fmt.Errorf("OpenInterest this(%v) Not Equal that(%v)", this.OpenInterest, that1.OpenInterest)
	}
	if this.FirstNoticeDate != nil && that1.FirstNoticeDate != nil {
		if *this.FirstNoticeDate != *that1.FirstNoticeDate {
			return fmt.Errorf("FirstNoticeDate this(%v) Not Equal that(%v)", *this.FirstNoticeDate, *that1.FirstNoticeDate)
		}
	} else if this.FirstNoticeDate != nil {
		return fmt.Errorf("this.FirstNoticeDate == nil && that.FirstNoticeDate != nil")
	} else if that1.FirstNoticeDate != nil {
		return fmt.Errorf("FirstNoticeDate this(%v) Not Equal that(%v)", this.FirstNoticeDate, that1.FirstNoticeDate)
	}
	if this.Symbol != nil && that1.Symbol != nil {
		if *this.Symbol != *that1.Symbol {
			return fmt.Errorf("Symbol this(%v) Not Equal that(%v)", *this.Symbol, *that1.Symbol)
		}
	} else if this.Symbol != nil {
		return fmt.Errorf("this.Symbol == nil && that.Symbol != nil")
	} else if that1.Symbol != nil {
		return fmt.Errorf("Symbol this(%v) Not Equal that(%v)", this.Symbol, that1.Symbol)
	}
	if this.SymbolRoot != nil && that1.SymbolRoot != nil {
		if *this.SymbolRoot != *that1.SymbolRoot {
			return fmt.Errorf("SymbolRoot this(%v) Not Equal that(%v)", *this.SymbolRoot, *that1.SymbolRoot)
		}
	} else if this.SymbolRoot != nil {
		return fmt.Errorf("this.SymbolRoot == nil && that.SymbolRoot != nil")
	} else if that1.SymbolRoot != nil {
		return fmt.Errorf("SymbolRoot this(%v) Not Equal that(%v)", this.SymbolRoot, that1.SymbolRoot)
	}
	if this.Margin != nil && that1.Margin != nil {
		if *this.Margin != *that1.Margin {
			return fmt.Errorf("Margin this(%v) Not Equal that(%v)", *this.Margin, *that1.Margin)
		}
	} else if this.Margin != nil {
		return fmt.Errorf("this.Margin == nil && that.Margin != nil")
	} else if that1.Margin != nil {
		return fmt.Errorf("Margin this(%v) Not Equal that(%v)", this.Margin, that1.Margin)
	}
	if this.PriceScale != nil && that1.PriceScale != nil {
		if *this.PriceScale != *that1.PriceScale {
			return fmt.Errorf("PriceScale this(%v) Not Equal that(%v)", *this.PriceScale, *that1.PriceScale)
		}
	} else if this.PriceScale != nil {
		return fmt.Errorf("this.PriceScale == nil && that.PriceScale != nil")
	} else if that1.PriceScale != nil {
		return fmt.Errorf("PriceScale this(%v) Not Equal that(%v)", this.PriceScale, that1.PriceScale)
	}
	if this.Country != nil && that1.Country != nil {
		if *this.Country != *that1.Country {
			return fmt.Errorf("Country this(%v) Not Equal that(%v)", *this.Country, *that1.Country)
		}
	} else if this.Country != nil {
		return fmt.Errorf("this.Country == nil && that.Country != nil")
	} else if that1.Country != nil {
		return fmt.Errorf("Country this(%v) Not Equal that(%v)", this.Country, that1.Country)
	}
	if this.LastPrice != nil && that1.LastPrice != nil {
		if *this.LastPrice != *that1.LastPrice {
			return fmt.Errorf("LastPrice this(%v) Not Equal that(%v)", *this.LastPrice, *that1.LastPrice)
		}
	} else if this.LastPrice != nil {
		return fmt.Errorf("this.LastPrice == nil && that.LastPrice != nil")
	} else if that1.LastPrice != nil {
		return fmt.Errorf("LastPrice this(%v) Not Equal that(%v)", this.LastPrice, that1.LastPrice)
	}
	if this.SizeLastTrade != nil && that1.SizeLastTrade != nil {
		if *this.SizeLastTrade != *that1.SizeLastTrade {
			return fmt.Errorf("SizeLastTrade this(%v) Not Equal that(%v)", *this.SizeLastTrade, *that1.SizeLastTrade)
		}
	} else if this.SizeLastTrade != nil {
		return fmt.Errorf("this.SizeLastTrade == nil && that.SizeLastTrade != nil")
	} else if that1.SizeLastTrade != nil {
		return fmt.Errorf("SizeLastTrade this(%v) Not Equal that(%v)", this.SizeLastTrade, that1.SizeLastTrade)
	}
	if this.Bid != nil && that1.Bid != nil {
		if *this.Bid != *that1.Bid {
			return fmt.Errorf("Bid this(%v) Not Equal that(%v)", *this.Bid, *that1.Bid)
		}
	} else if this.Bid != nil {
		return fmt.Errorf("this.Bid == nil && that.Bid != nil")
	} else if that1.Bid != nil {
		return fmt.Errorf("Bid this(%v) Not Equal that(%v)", this.Bid, that1.Bid)
	}
	if this.BidSize != nil && that1.BidSize != nil {
		if *this.BidSize != *that1.BidSize {
			return fmt.Errorf("BidSize this(%v) Not Equal that(%v)", *this.BidSize, *that1.BidSize)
		}
	} else if this.BidSize != nil {
		return fmt.Errorf("this.BidSize == nil && that.BidSize != nil")
	} else if that1.BidSize != nil {
		return fmt.Errorf("BidSize this(%v) Not Equal that(%v)", this.BidSize, that1.BidSize)
	}
	if this.Ask != nil && that1.Ask != nil {
		if *this.Ask != *that1.Ask {
			return fmt.Errorf("Ask this(%v) Not Equal that(%v)", *this.Ask, *that1.Ask)
		}
	} else if this.Ask != nil {
		return fmt.Errorf("this.Ask == nil && that.Ask != nil")
	} else if that1.Ask != nil {
		return fmt.Errorf("Ask this(%v) Not Equal that(%v)", this.Ask, that1.Ask)
	}
	if this.AskSize != nil && that1.AskSize != nil {
		if *this.AskSize != *that1.AskSize {
			return fmt.Errorf("AskSize this(%v) Not Equal that(%v)", *this.AskSize, *that1.AskSize)
		}
	} else if this.AskSize != nil {
		return fmt.Errorf("this.AskSize == nil && that.AskSize != nil")
	} else if that1.AskSize != nil {
		return fmt.Errorf("AskSize this(%v) Not Equal that(%v)", this.AskSize, that1.AskSize)
	}
	if this.SpreadBa != nil && that1.SpreadBa != nil {
		if *this.SpreadBa != *that1.SpreadBa {
			return fmt.Errorf("SpreadBa this(%v) Not Equal that(%v)", *this.SpreadBa, *that1.SpreadBa)
		}
	} else if this.SpreadBa != nil {
		return fmt.Errorf("this.SpreadBa == nil && that.SpreadBa != nil")
	} else if that1.SpreadBa != nil {
		return fmt.Errorf("SpreadBa this(%v) Not Equal that(%v)", this.SpreadBa, that1.SpreadBa)
	}
	if this.High != nil && that1.High != nil {
		if *this.High != *that1.High {
			return fmt.Errorf("High this(%v) Not Equal that(%v)", *this.High, *that1.High)
		}
	} else if this.High != nil {
		return fmt.Errorf("this.High == nil && that.High != nil")
	} else if that1.High != nil {
		return fmt.Errorf("High this(%v) Not Equal that(%v)", this.High, that1.High)
	}
	if this.Low != nil && that1.Low != nil {
		if *this.Low != *that1.Low {
			return fmt.Errorf("Low this(%v) Not Equal that(%v)", *this.Low, *that1.Low)
		}
	} else if this.Low != nil {
		return fmt.Errorf("this.Low == nil && that.Low != nil")
	} else if that1.Low != nil {
		return fmt.Errorf("Low this(%v) Not Equal that(%v)", this.Low, that1.Low)
	}
	if this.Open != nil && that1.Open != nil {
		if *this.Open != *that1.Open {
			return fmt.Errorf("Open this(%v) Not Equal that(%v)", *this.Open, *that1.Open)
		}
	} else if this.Open != nil {
		return fmt.Errorf("this.Open == nil && that.Open != nil")
	} else if that1.Open != nil {
		return fmt.Errorf("Open this(%v) Not Equal that(%v)", this.Open, that1.Open)
	}
	if this.Close != nil && that1.Close != nil {
		if *this.Close != *that1.Close {
			return fmt.Errorf("Close this(%v) Not Equal that(%v)", *this.Close, *that1.Close)
		}
	} else if this.Close != nil {
		return fmt.Errorf("this.Close == nil && that.Close != nil")
	} else if that1.Close != nil {
		return fmt.Errorf("Close this(%v) Not Equal that(%v)", this.Close, that1.Close)
	}
	if this.Volume != nil && that1.Volume != nil {
		if *this.Volume != *that1.Volume {
			return fmt.Errorf("Volume this(%v) Not Equal that(%v)", *this.Volume, *that1.Volume)
		}
	} else if this.Volume != nil {
		return fmt.Errorf("this.Volume == nil && that.Volume != nil")
	} else if that1.Volume != nil {
		return fmt.Errorf("Volume this(%v) Not Equal that(%v)", this.Volume, that1.Volume)
	}
	if this.BidDatetime != nil && that1.BidDatetime != nil {
		if *this.BidDatetime != *that1.BidDatetime {
			return fmt.Errorf("BidDatetime this(%v) Not Equal that(%v)", *this.BidDatetime, *that1.BidDatetime)
		}
	} else if this.BidDatetime != nil {
		return fmt.Errorf("this.BidDatetime == nil && that.BidDatetime != nil")
	} else if that1.BidDatetime != nil {
		return fmt.Errorf("BidDatetime this(%v) Not Equal that(%v)", this.BidDatetime, that1.BidDatetime)
	}
	if this.AskDatetime != nil && that1.AskDatetime != nil {
		if *this.AskDatetime != *that1.AskDatetime {
			return fmt.Errorf("AskDatetime this(%v) Not Equal that(%v)", *this.AskDatetime, *that1.AskDatetime)
		}
	} else if this.AskDatetime != nil {
		return fmt.Errorf("this.AskDatetime == nil && that.AskDatetime != nil")
	} else if that1.AskDatetime != nil {
		return fmt.Errorf("AskDatetime this(%v) Not Equal that(%v)", this.AskDatetime, that1.AskDatetime)
	}
	if this.LastDatetime != nil && that1.LastDatetime != nil {
		if *this.LastDatetime != *that1.LastDatetime {
			return fmt.Errorf("LastDatetime this(%v) Not Equal that(%v)", *this.LastDatetime, *that1.LastDatetime)
		}
	} else if this.LastDatetime != nil {
		return fmt.Errorf("this.LastDatetime == nil && that.LastDatetime != nil")
	} else if that1.LastDatetime != nil {
		return fmt.Errorf("LastDatetime this(%v) Not Equal that(%v)", this.LastDatetime, that1.LastDatetime)
	}
	if this.Bid1 != nil && that1.Bid1 != nil {
		if *this.Bid1 != *that1.Bid1 {
			return fmt.Errorf("Bid1 this(%v) Not Equal that(%v)", *this.Bid1, *that1.Bid1)
		}
	} else if this.Bid1 != nil {
		return fmt.Errorf("this.Bid1 == nil && that.Bid1 != nil")
	} else if that1.Bid1 != nil {
		return fmt.Errorf("Bid1 this(%v) Not Equal that(%v)", this.Bid1, that1.Bid1)
	}
	if this.Bid1Size != nil && that1.Bid1Size != nil {
		if *this.Bid1Size != *that1.Bid1Size {
			return fmt.Errorf("Bid1Size this(%v) Not Equal that(%v)", *this.Bid1Size, *that1.Bid1Size)
		}
	} else if this.Bid1Size != nil {
		return fmt.Errorf("this.Bid1Size == nil && that.Bid1Size != nil")
	} else if that1.Bid1Size != nil {
		return fmt.Errorf("Bid1Size this(%v) Not Equal that(%v)", this.Bid1Size, that1.Bid1Size)
	}
	if this.Bid2 != nil && that1.Bid2 != nil {
		if *this.Bid2 != *that1.Bid2 {
			return fmt.Errorf("Bid2 this(%v) Not Equal that(%v)", *this.Bid2, *that1.Bid2)
		}
	} else if this.Bid2 != nil {
		return fmt.Errorf("this.Bid2 == nil && that.Bid2 != nil")
	} else if that1.Bid2 != nil {
		return fmt.Errorf("Bid2 this(%v) Not Equal that(%v)", this.Bid2, that1.Bid2)
	}
	if this.Bid2Size != nil && that1.Bid2Size != nil {
		if *this.Bid2Size != *that1.Bid2Size {
			return fmt.Errorf("Bid2Size this(%v) Not Equal that(%v)", *this.Bid2Size, *that1.Bid2Size)
		}
	} else if this.Bid2Size != nil {
		return fmt.Errorf("this.Bid2Size == nil && that.Bid2Size != nil")
	} else if that1.Bid2Size != nil {
		return fmt.Errorf("Bid2Size this(%v) Not Equal that(%v)", this.Bid2Size, that1.Bid2Size)
	}
	if this.Bid3 != nil && that1.Bid3 != nil {
		if *this.Bid3 != *that1.Bid3 {
			return fmt.Errorf("Bid3 this(%v) Not Equal that(%v)", *this.Bid3, *that1.Bid3)
		}
	} else if this.Bid3 != nil {
		return fmt.Errorf("this.Bid3 == nil && that.Bid3 != nil")
	} else if that1.Bid3 != nil {
		return fmt.Errorf("Bid3 this(%v) Not Equal that(%v)", this.Bid3, that1.Bid3)
	}
	if this.Bid3Size != nil && that1.Bid3Size != nil {
		if *this.Bid3Size != *that1.Bid3Size {
			return fmt.Errorf("Bid3Size this(%v) Not Equal that(%v)", *this.Bid3Size, *that1.Bid3Size)
		}
	} else if this.Bid3Size != nil {
		return fmt.Errorf("this.Bid3Size == nil && that.Bid3Size != nil")
	} else if that1.Bid3Size != nil {
		return fmt.Errorf("Bid3Size this(%v) Not Equal that(%v)", this.Bid3Size, that1.Bid3Size)
	}
	if this.Bid4 != nil && that1.Bid4 != nil {
		if *this.Bid4 != *that1.Bid4 {
			return fmt.Errorf("Bid4 this(%v) Not Equal that(%v)", *this.Bid4, *that1.Bid4)
		}
	} else if this.Bid4 != nil {
		return fmt.Errorf("this.Bid4 == nil && that.Bid4 != nil")
	} else if that1.Bid4 != nil {
		return fmt.Errorf("Bid4 this(%v) Not Equal that(%v)", this.Bid4, that1.Bid4)
	}
	if this.Bid4Size != nil && that1.Bid4Size != nil {
		if *this.Bid4Size != *that1.Bid4Size {
			return fmt.Errorf("Bid4Size this(%v) Not Equal that(%v)", *this.Bid4Size, *that1.Bid4Size)
		}
	} else if this.Bid4Size != nil {
		return fmt.Errorf("this.Bid4Size == nil && that.Bid4Size != nil")
	} else if that1.Bid4Size != nil {
		return fmt.Errorf("Bid4Size this(%v) Not Equal that(%v)", this.Bid4Size, that1.Bid4Size)
	}
	if this.Bid5 != nil && that1.Bid5 != nil {
		if *this.Bid5 != *that1.Bid5 {
			return fmt.Errorf("Bid5 this(%v) Not Equal that(%v)", *this.Bid5, *that1.Bid5)
		}
	} else if this.Bid5 != nil {
		return fmt.Errorf("this.Bid5 == nil && that.Bid5 != nil")
	} else if that1.Bid5 != nil {
		return fmt.Errorf("Bid5 this(%v) Not Equal that(%v)", this.Bid5, that1.Bid5)
	}
	if this.Bid5Size != nil && that1.Bid5Size != nil {
		if *this.Bid5Size != *that1.Bid5Size {
			return fmt.Errorf("Bid5Size this(%v) Not Equal that(%v)", *this.Bid5Size, *that1.Bid5Size)
		}
	} else if this.Bid5Size != nil {
		return fmt.Errorf("this.Bid5Size == nil && that.Bid5Size != nil")
	} else if that1.Bid5Size != nil {
		return fmt.Errorf("Bid5Size this(%v) Not Equal that(%v)", this.Bid5Size, that1.Bid5Size)
	}
	if this.Ask1 != nil && that1.Ask1 != nil {
		if *this.Ask1 != *that1.Ask1 {
			return fmt.Errorf("Ask1 this(%v) Not Equal that(%v)", *this.Ask1, *that1.Ask1)
		}
	} else if this.Ask1 != nil {
		return fmt.Errorf("this.Ask1 == nil && that.Ask1 != nil")
	} else if that1.Ask1 != nil {
		return fmt.Errorf("Ask1 this(%v) Not Equal that(%v)", this.Ask1, that1.Ask1)
	}
	if this.Ask1Size != nil && that1.Ask1Size != nil {
		if *this.Ask1Size != *that1.Ask1Size {
			return fmt.Errorf("Ask1Size this(%v) Not Equal that(%v)", *this.Ask1Size, *that1.Ask1Size)
		}
	} else if this.Ask1Size != nil {
		return fmt.Errorf("this.Ask1Size == nil && that.Ask1Size != nil")
	} else if that1.Ask1Size != nil {
		return fmt.Errorf("Ask1Size this(%v) Not Equal that(%v)", this.Ask1Size, that1.Ask1Size)
	}
	if this.Ask2 != nil && that1.Ask2 != nil {
		if *this.Ask2 != *that1.Ask2 {
			return fmt.Errorf("Ask2 this(%v) Not Equal that(%v)", *this.Ask2, *that1.Ask2)
		}
	} else if this.Ask2 != nil {
		return fmt.Errorf("this.Ask2 == nil && that.Ask2 != nil")
	} else if that1.Ask2 != nil {
		return fmt.Errorf("Ask2 this(%v) Not Equal that(%v)", this.Ask2, that1.Ask2)
	}
	if this.Ask2Size != nil && that1.Ask2Size != nil {
		if *this.Ask2Size != *that1.Ask2Size {
			return fmt.Errorf("Ask2Size this(%v) Not Equal that(%v)", *this.Ask2Size, *that1.Ask2Size)
		}
	} else if this.Ask2Size != nil {
		return fmt.Errorf("this.Ask2Size == nil && that.Ask2Size != nil")
	} else if that1.Ask2Size != nil {
		return fmt.Errorf("Ask2Size this(%v) Not Equal that(%v)", this.Ask2Size, that1.Ask2Size)
	}
	if this.Ask3 != nil && that1.Ask3 != nil {
		if *this.Ask3 != *that1.Ask3 {
			return fmt.Errorf("Ask3 this(%v) Not Equal that(%v)", *this.Ask3, *that1.Ask3)
		}
	} else if this.Ask3 != nil {
		return fmt.Errorf("this.Ask3 == nil && that.Ask3 != nil")
	} else if that1.Ask3 != nil {
		return fmt.Errorf("Ask3 this(%v) Not Equal that(%v)", this.Ask3, that1.Ask3)
	}
	if this.Ask3Size != nil && that1.Ask3Size != nil {
		if *this.Ask3Size != *that1.Ask3Size {
			return fmt.Errorf("Ask3Size this(%v) Not Equal that(%v)", *this.Ask3Size, *that1.Ask3Size)
		}
	} else if this.Ask3Size != nil {
		return fmt.Errorf("this.Ask3Size == nil && that.Ask3Size != nil")
	} else if that1.Ask3Size != nil {
		return fmt.Errorf("Ask3Size this(%v) Not Equal that(%v)", this.Ask3Size, that1.Ask3Size)
	}
	if this.Ask4 != nil && that1.Ask4 != nil {
		if *this.Ask4 != *that1.Ask4 {
			return fmt.Errorf("Ask4 this(%v) Not Equal that(%v)", *this.Ask4, *that1.Ask4)
		}
	} else if this.Ask4 != nil {
		return fmt.Errorf("this.Ask4 == nil && that.Ask4 != nil")
	} else if that1.Ask4 != nil {
		return fmt.Errorf("Ask4 this(%v) Not Equal that(%v)", this.Ask4, that1.Ask4)
	}
	if this.Ask4Size != nil && that1.Ask4Size != nil {
		if *this.Ask4Size != *that1.Ask4Size {
			return fmt.Errorf("Ask4Size this(%v) Not Equal that(%v)", *this.Ask4Size, *that1.Ask4Size)
		}
	} else if this.Ask4Size != nil {
		return fmt.Errorf("this.Ask4Size == nil && that.Ask4Size != nil")
	} else if that1.Ask4Size != nil {
		return fmt.Errorf("Ask4Size this(%v) Not Equal that(%v)", this.Ask4Size, that1.Ask4Size)
	}
	if this.Ask5 != nil && that1.Ask5 != nil {
		if *this.Ask5 != *that1.Ask5 {
			return fmt.Errorf("Ask5 this(%v) Not Equal that(%v)", *this.Ask5, *that1.Ask5)
		}
	} else if this.Ask5 != nil {
		return fmt.Errorf("this.Ask5 == nil && that.Ask5 != nil")
	} else if that1.Ask5 != nil {
		return fmt.Errorf("Ask5 this(%v) Not Equal that(%v)", this.Ask5, that1.Ask5)
	}
	if this.Ask5Size != nil && that1.Ask5Size != nil {
		if *this.Ask5Size != *that1.Ask5Size {
			return fmt.Errorf("Ask5Size this(%v) Not Equal that(%v)", *this.Ask5Size, *that1.Ask5Size)
		}
	} else if this.Ask5Size != nil {
		return fmt.Errorf("this.Ask5Size == nil && that.Ask5Size != nil")
	} else if that1.Ask5Size != nil {
		return fmt.Errorf("Ask5Size this(%v) Not Equal that(%v)", this.Ask5Size, that1.Ask5Size)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Quote) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Quote)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Isin != nil && that1.Isin != nil {
		if *this.Isin != *that1.Isin {
			return false
		}
	} else if this.Isin != nil {
		return false
	} else if that1.Isin != nil {
		return false
	}
	if this.Sedol != nil && that1.Sedol != nil {
		if *this.Sedol != *that1.Sedol {
			return false
		}
	} else if this.Sedol != nil {
		return false
	} else if that1.Sedol != nil {
		return false
	}
	if this.Description != nil && that1.Description != nil {
		if *this.Description != *that1.Description {
			return false
		}
	} else if this.Description != nil {
		return false
	} else if that1.Description != nil {
		return false
	}
	if this.Crncy != nil && that1.Crncy != nil {
		if *this.Crncy != *that1.Crncy {
			return false
		}
	} else if this.Crncy != nil {
		return false
	} else if that1.Crncy != nil {
		return false
	}
	if this.PxTradeLotSize != nil && that1.PxTradeLotSize != nil {
		if *this.PxTradeLotSize != *that1.PxTradeLotSize {
			return false
		}
	} else if this.PxTradeLotSize != nil {
		return false
	} else if that1.PxTradeLotSize != nil {
		return false
	}
	if this.RoundLot != nil && that1.RoundLot != nil {
		if *this.RoundLot != *that1.RoundLot {
			return false
		}
	} else if this.RoundLot != nil {
		return false
	} else if that1.RoundLot != nil {
		return false
	}
	if this.ExchCode != nil && that1.ExchCode != nil {
		if *this.ExchCode != *that1.ExchCode {
			return false
		}
	} else if this.ExchCode != nil {
		return false
	} else if that1.ExchCode != nil {
		return false
	}
	if this.PrimExch != nil && that1.PrimExch != nil {
		if *this.PrimExch != *that1.PrimExch {
			return false
		}
	} else if this.PrimExch != nil {
		return false
	} else if that1.PrimExch != nil {
		return false
	}
	if this.Expiry != nil && that1.Expiry != nil {
		if *this.Expiry != *that1.Expiry {
			return false
		}
	} else if this.Expiry != nil {
		return false
	} else if that1.Expiry != nil {
		return false
	}
	if this.Multiplier != nil && that1.Multiplier != nil {
		if *this.Multiplier != *that1.Multiplier {
			return false
		}
	} else if this.Multiplier != nil {
		return false
	} else if that1.Multiplier != nil {
		return false
	}
	if this.TickSize != nil && that1.TickSize != nil {
		if *this.TickSize != *that1.TickSize {
			return false
		}
	} else if this.TickSize != nil {
		return false
	} else if that1.TickSize != nil {
		return false
	}
	if this.OpenInterest != nil && that1.OpenInterest != nil {
		if *this.OpenInterest != *that1.OpenInterest {
			return false
		}
	} else if this.OpenInterest != nil {
		return false
	} else if that1.OpenInterest != nil {
		return false
	}
	if this.FirstNoticeDate != nil && that1.FirstNoticeDate != nil {
		if *this.FirstNoticeDate != *that1.FirstNoticeDate {
			return false
		}
	} else if this.FirstNoticeDate != nil {
		return false
	} else if that1.FirstNoticeDate != nil {
		return false
	}
	if this.Symbol != nil && that1.Symbol != nil {
		if *this.Symbol != *that1.Symbol {
			return false
		}
	} else if this.Symbol != nil {
		return false
	} else if that1.Symbol != nil {
		return false
	}
	if this.SymbolRoot != nil && that1.SymbolRoot != nil {
		if *this.SymbolRoot != *that1.SymbolRoot {
			return false
		}
	} else if this.SymbolRoot != nil {
		return false
	} else if that1.SymbolRoot != nil {
		return false
	}
	if this.Margin != nil && that1.Margin != nil {
		if *this.Margin != *that1.Margin {
			return false
		}
	} else if this.Margin != nil {
		return false
	} else if that1.Margin != nil {
		return false
	}
	if this.PriceScale != nil && that1.PriceScale != nil {
		if *this.PriceScale != *that1.PriceScale {
			return false
		}
	} else if this.PriceScale != nil {
		return false
	} else if that1.PriceScale != nil {
		return false
	}
	if this.Country != nil && that1.Country != nil {
		if *this.Country != *that1.Country {
			return false
		}
	} else if this.Country != nil {
		return false
	} else if that1.Country != nil {
		return false
	}
	if this.LastPrice != nil && that1.LastPrice != nil {
		if *this.LastPrice != *that1.LastPrice {
			return false
		}
	} else if this.LastPrice != nil {
		return false
	} else if that1.LastPrice != nil {
		return false
	}
	if this.SizeLastTrade != nil && that1.SizeLastTrade != nil {
		if *this.SizeLastTrade != *that1.SizeLastTrade {
			return false
		}
	} else if this.SizeLastTrade != nil {
		return false
	} else if that1.SizeLastTrade != nil {
		return false
	}
	if this.Bid != nil && that1.Bid != nil {
		if *this.Bid != *that1.Bid {
			return false
		}
	} else if this.Bid != nil {
		return false
	} else if that1.Bid != nil {
		return false
	}
	if this.BidSize != nil && that1.BidSize != nil {
		if *this.BidSize != *that1.BidSize {
			return false
		}
	} else if this.BidSize != nil {
		return false
	} else if that1.BidSize != nil {
		return false
	}
	if this.Ask != nil && that1.Ask != nil {
		if *this.Ask != *that1.Ask {
			return false
		}
	} else if this.Ask != nil {
		return false
	} else if that1.Ask != nil {
		return false
	}
	if this.AskSize != nil && that1.AskSize != nil {
		if *this.AskSize != *that1.AskSize {
			return false
		}
	} else if this.AskSize != nil {
		return false
	} else if that1.AskSize != nil {
		return false
	}
	if this.SpreadBa != nil && that1.SpreadBa != nil {
		if *this.SpreadBa != *that1.SpreadBa {
			return false
		}
	} else if this.SpreadBa != nil {
		return false
	} else if that1.SpreadBa != nil {
		return false
	}
	if this.High != nil && that1.High != nil {
		if *this.High != *that1.High {
			return false
		}
	} else if this.High != nil {
		return false
	} else if that1.High != nil {
		return false
	}
	if this.Low != nil && that1.Low != nil {
		if *this.Low != *that1.Low {
			return false
		}
	} else if this.Low != nil {
		return false
	} else if that1.Low != nil {
		return false
	}
	if this.Open != nil && that1.Open != nil {
		if *this.Open != *that1.Open {
			return false
		}
	} else if this.Open != nil {
		return false
	} else if that1.Open != nil {
		return false
	}
	if this.Close != nil && that1.Close != nil {
		if *this.Close != *that1.Close {
			return false
		}
	} else if this.Close != nil {
		return false
	} else if that1.Close != nil {
		return false
	}
	if this.Volume != nil && that1.Volume != nil {
		if *this.Volume != *that1.Volume {
			return false
		}
	} else if this.Volume != nil {
		return false
	} else if that1.Volume != nil {
		return false
	}
	if this.BidDatetime != nil && that1.BidDatetime != nil {
		if *this.BidDatetime != *that1.BidDatetime {
			return false
		}
	} else if this.BidDatetime != nil {
		return false
	} else if that1.BidDatetime != nil {
		return false
	}
	if this.AskDatetime != nil && that1.AskDatetime != nil {
		if *this.AskDatetime != *that1.AskDatetime {
			return false
		}
	} else if this.AskDatetime != nil {
		return false
	} else if that1.AskDatetime != nil {
		return false
	}
	if this.LastDatetime != nil && that1.LastDatetime != nil {
		if *this.LastDatetime != *that1.LastDatetime {
			return false
		}
	} else if this.LastDatetime != nil {
		return false
	} else if that1.LastDatetime != nil {
		return false
	}
	if this.Bid1 != nil && that1.Bid1 != nil {
		if *this.Bid1 != *that1.Bid1 {
			return false
		}
	} else if this.Bid1 != nil {
		return false
	} else if that1.Bid1 != nil {
		return false
	}
	if this.Bid1Size != nil && that1.Bid1Size != nil {
		if *this.Bid1Size != *that1.Bid1Size {
			return false
		}
	} else if this.Bid1Size != nil {
		return false
	} else if that1.Bid1Size != nil {
		return false
	}
	if this.Bid2 != nil && that1.Bid2 != nil {
		if *this.Bid2 != *that1.Bid2 {
			return false
		}
	} else if this.Bid2 != nil {
		return false
	} else if that1.Bid2 != nil {
		return false
	}
	if this.Bid2Size != nil && that1.Bid2Size != nil {
		if *this.Bid2Size != *that1.Bid2Size {
			return false
		}
	} else if this.Bid2Size != nil {
		return false
	} else if that1.Bid2Size != nil {
		return false
	}
	if this.Bid3 != nil && that1.Bid3 != nil {
		if *this.Bid3 != *that1.Bid3 {
			return false
		}
	} else if this.Bid3 != nil {
		return false
	} else if that1.Bid3 != nil {
		return false
	}
	if this.Bid3Size != nil && that1.Bid3Size != nil {
		if *this.Bid3Size != *that1.Bid3Size {
			return false
		}
	} else if this.Bid3Size != nil {
		return false
	} else if that1.Bid3Size != nil {
		return false
	}
	if this.Bid4 != nil && that1.Bid4 != nil {
		if *this.Bid4 != *that1.Bid4 {
			return false
		}
	} else if this.Bid4 != nil {
		return false
	} else if that1.Bid4 != nil {
		return false
	}
	if this.Bid4Size != nil && that1.Bid4Size != nil {
		if *this.Bid4Size != *that1.Bid4Size {
			return false
		}
	} else if this.Bid4Size != nil {
		return false
	} else if that1.Bid4Size != nil {
		return false
	}
	if this.Bid5 != nil && that1.Bid5 != nil {
		if *this.Bid5 != *that1.Bid5 {
			return false
		}
	} else if this.Bid5 != nil {
		return false
	} else if that1.Bid5 != nil {
		return false
	}
	if this.Bid5Size != nil && that1.Bid5Size != nil {
		if *this.Bid5Size != *that1.Bid5Size {
			return false
		}
	} else if this.Bid5Size != nil {
		return false
	} else if that1.Bid5Size != nil {
		return false
	}
	if this.Ask1 != nil && that1.Ask1 != nil {
		if *this.Ask1 != *that1.Ask1 {
			return false
		}
	} else if this.Ask1 != nil {
		return false
	} else if that1.Ask1 != nil {
		return false
	}
	if this.Ask1Size != nil && that1.Ask1Size != nil {
		if *this.Ask1Size != *that1.Ask1Size {
			return false
		}
	} else if this.Ask1Size != nil {
		return false
	} else if that1.Ask1Size != nil {
		return false
	}
	if this.Ask2 != nil && that1.Ask2 != nil {
		if *this.Ask2 != *that1.Ask2 {
			return false
		}
	} else if this.Ask2 != nil {
		return false
	} else if that1.Ask2 != nil {
		return false
	}
	if this.Ask2Size != nil && that1.Ask2Size != nil {
		if *this.Ask2Size != *that1.Ask2Size {
			return false
		}
	} else if this.Ask2Size != nil {
		return false
	} else if that1.Ask2Size != nil {
		return false
	}
	if this.Ask3 != nil && that1.Ask3 != nil {
		if *this.Ask3 != *that1.Ask3 {
			return false
		}
	} else if this.Ask3 != nil {
		return false
	} else if that1.Ask3 != nil {
		return false
	}
	if this.Ask3Size != nil && that1.Ask3Size != nil {
		if *this.Ask3Size != *that1.Ask3Size {
			return false
		}
	} else if this.Ask3Size != nil {
		return false
	} else if that1.Ask3Size != nil {
		return false
	}
	if this.Ask4 != nil && that1.Ask4 != nil {
		if *this.Ask4 != *that1.Ask4 {
			return false
		}
	} else if this.Ask4 != nil {
		return false
	} else if that1.Ask4 != nil {
		return false
	}
	if this.Ask4Size != nil && that1.Ask4Size != nil {
		if *this.Ask4Size != *that1.Ask4Size {
			return false
		}
	} else if this.Ask4Size != nil {
		return false
	} else if that1.Ask4Size != nil {
		return false
	}
	if this.Ask5 != nil && that1.Ask5 != nil {
		if *this.Ask5 != *that1.Ask5 {
			return false
		}
	} else if this.Ask5 != nil {
		return false
	} else if that1.Ask5 != nil {
		return false
	}
	if this.Ask5Size != nil && that1.Ask5Size != nil {
		if *this.Ask5Size != *that1.Ask5Size {
			return false
		}
	} else if this.Ask5Size != nil {
		return false
	} else if that1.Ask5Size != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *QuoteInitialRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QuoteInitialRequest)
	if !ok {
		return fmt.Errorf("that is not of type *QuoteInitialRequest")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QuoteInitialRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QuoteInitialRequestbut is not nil && this == nil")
	}
	if this.Symbol != nil && that1.Symbol != nil {
		if *this.Symbol != *that1.Symbol {
			return fmt.Errorf("Symbol this(%v) Not Equal that(%v)", *this.Symbol, *that1.Symbol)
		}
	} else if this.Symbol != nil {
		return fmt.Errorf("this.Symbol == nil && that.Symbol != nil")
	} else if that1.Symbol != nil {
		return fmt.Errorf("Symbol this(%v) Not Equal that(%v)", this.Symbol, that1.Symbol)
	}
	if this.Exchange != nil && that1.Exchange != nil {
		if *this.Exchange != *that1.Exchange {
			return fmt.Errorf("Exchange this(%v) Not Equal that(%v)", *this.Exchange, *that1.Exchange)
		}
	} else if this.Exchange != nil {
		return fmt.Errorf("this.Exchange == nil && that.Exchange != nil")
	} else if that1.Exchange != nil {
		return fmt.Errorf("Exchange this(%v) Not Equal that(%v)", this.Exchange, that1.Exchange)
	}
	if this.IncludeOptionChain != nil && that1.IncludeOptionChain != nil {
		if *this.IncludeOptionChain != *that1.IncludeOptionChain {
			return fmt.Errorf("IncludeOptionChain this(%v) Not Equal that(%v)", *this.IncludeOptionChain, *that1.IncludeOptionChain)
		}
	} else if this.IncludeOptionChain != nil {
		return fmt.Errorf("this.IncludeOptionChain == nil && that.IncludeOptionChain != nil")
	} else if that1.IncludeOptionChain != nil {
		return fmt.Errorf("IncludeOptionChain this(%v) Not Equal that(%v)", this.IncludeOptionChain, that1.IncludeOptionChain)
	}
	if this.Source != nil && that1.Source != nil {
		if *this.Source != *that1.Source {
			return fmt.Errorf("Source this(%v) Not Equal that(%v)", *this.Source, *that1.Source)
		}
	} else if this.Source != nil {
		return fmt.Errorf("this.Source == nil && that.Source != nil")
	} else if that1.Source != nil {
		return fmt.Errorf("Source this(%v) Not Equal that(%v)", this.Source, that1.Source)
	}
	if this.User != nil && that1.User != nil {
		if *this.User != *that1.User {
			return fmt.Errorf("User this(%v) Not Equal that(%v)", *this.User, *that1.User)
		}
	} else if this.User != nil {
		return fmt.Errorf("this.User == nil && that.User != nil")
	} else if that1.User != nil {
		return fmt.Errorf("User this(%v) Not Equal that(%v)", this.User, that1.User)
	}
	if this.UserId != nil && that1.UserId != nil {
		if *this.UserId != *that1.UserId {
			return fmt.Errorf("UserId this(%v) Not Equal that(%v)", *this.UserId, *that1.UserId)
		}
	} else if this.UserId != nil {
		return fmt.Errorf("this.UserId == nil && that.UserId != nil")
	} else if that1.UserId != nil {
		return fmt.Errorf("UserId this(%v) Not Equal that(%v)", this.UserId, that1.UserId)
	}
	if this.Machine != nil && that1.Machine != nil {
		if *this.Machine != *that1.Machine {
			return fmt.Errorf("Machine this(%v) Not Equal that(%v)", *this.Machine, *that1.Machine)
		}
	} else if this.Machine != nil {
		return fmt.Errorf("this.Machine == nil && that.Machine != nil")
	} else if that1.Machine != nil {
		return fmt.Errorf("Machine this(%v) Not Equal that(%v)", this.Machine, that1.Machine)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *QuoteInitialRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QuoteInitialRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Symbol != nil && that1.Symbol != nil {
		if *this.Symbol != *that1.Symbol {
			return false
		}
	} else if this.Symbol != nil {
		return false
	} else if that1.Symbol != nil {
		return false
	}
	if this.Exchange != nil && that1.Exchange != nil {
		if *this.Exchange != *that1.Exchange {
			return false
		}
	} else if this.Exchange != nil {
		return false
	} else if that1.Exchange != nil {
		return false
	}
	if this.IncludeOptionChain != nil && that1.IncludeOptionChain != nil {
		if *this.IncludeOptionChain != *that1.IncludeOptionChain {
			return false
		}
	} else if this.IncludeOptionChain != nil {
		return false
	} else if that1.IncludeOptionChain != nil {
		return false
	}
	if this.Source != nil && that1.Source != nil {
		if *this.Source != *that1.Source {
			return false
		}
	} else if this.Source != nil {
		return false
	} else if that1.Source != nil {
		return false
	}
	if this.User != nil && that1.User != nil {
		if *this.User != *that1.User {
			return false
		}
	} else if this.User != nil {
		return false
	} else if that1.User != nil {
		return false
	}
	if this.UserId != nil && that1.UserId != nil {
		if *this.UserId != *that1.UserId {
			return false
		}
	} else if this.UserId != nil {
		return false
	} else if that1.UserId != nil {
		return false
	}
	if this.Machine != nil && that1.Machine != nil {
		if *this.Machine != *that1.Machine {
			return false
		}
	} else if this.Machine != nil {
		return false
	} else if that1.Machine != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *QuoteInitialResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QuoteInitialResponse)
	if !ok {
		return fmt.Errorf("that is not of type *QuoteInitialResponse")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QuoteInitialResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QuoteInitialResponsebut is not nil && this == nil")
	}
	if this.ErrorCode != nil && that1.ErrorCode != nil {
		if *this.ErrorCode != *that1.ErrorCode {
			return fmt.Errorf("ErrorCode this(%v) Not Equal that(%v)", *this.ErrorCode, *that1.ErrorCode)
		}
	} else if this.ErrorCode != nil {
		return fmt.Errorf("this.ErrorCode == nil && that.ErrorCode != nil")
	} else if that1.ErrorCode != nil {
		return fmt.Errorf("ErrorCode this(%v) Not Equal that(%v)", this.ErrorCode, that1.ErrorCode)
	}
	if this.ErrorMessage != nil && that1.ErrorMessage != nil {
		if *this.ErrorMessage != *that1.ErrorMessage {
			return fmt.Errorf("ErrorMessage this(%v) Not Equal that(%v)", *this.ErrorMessage, *that1.ErrorMessage)
		}
	} else if this.ErrorMessage != nil {
		return fmt.Errorf("this.ErrorMessage == nil && that.ErrorMessage != nil")
	} else if that1.ErrorMessage != nil {
		return fmt.Errorf("ErrorMessage this(%v) Not Equal that(%v)", this.ErrorMessage, that1.ErrorMessage)
	}
	if !this.Quote.Equal(that1.Quote) {
		return fmt.Errorf("Quote this(%v) Not Equal that(%v)", this.Quote, that1.Quote)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *QuoteInitialResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QuoteInitialResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ErrorCode != nil && that1.ErrorCode != nil {
		if *this.ErrorCode != *that1.ErrorCode {
			return false
		}
	} else if this.ErrorCode != nil {
		return false
	} else if that1.ErrorCode != nil {
		return false
	}
	if this.ErrorMessage != nil && that1.ErrorMessage != nil {
		if *this.ErrorMessage != *that1.ErrorMessage {
			return false
		}
	} else if this.ErrorMessage != nil {
		return false
	} else if that1.ErrorMessage != nil {
		return false
	}
	if !this.Quote.Equal(that1.Quote) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
