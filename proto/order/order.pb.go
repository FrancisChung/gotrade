// Code generated by protoc-gen-gogo.
// source: order/order.proto
// DO NOT EDIT!

/*
	Package order is a generated protocol buffer package.

	It is generated from these files:
		order/order.proto

	It has these top-level messages:
		Order
		Execution
		Allocation
		NewOrderRequest
		NewOrderResponse
		CancelOrderRequest
		CancelOrderResponse
		ReplaceOrderRequest
		ReplaceOrderResponse
*/
package order

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import io "io"
import fmt "fmt"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import strings "strings"
import reflect "reflect"

import sort "sort"
import strconv "strconv"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type OrderStatus int32

const (
	OrderStatus_NEW                  OrderStatus = 0
	OrderStatus_PARTIALLY_FILLED     OrderStatus = 1
	OrderStatus_FILLED               OrderStatus = 2
	OrderStatus_DONE_FOR_DAY         OrderStatus = 3
	OrderStatus_CANCELLED            OrderStatus = 4
	OrderStatus_REPLACED             OrderStatus = 5
	OrderStatus_PENDING_CANCEL       OrderStatus = 6
	OrderStatus_STOPPED              OrderStatus = 7
	OrderStatus_REJECTED             OrderStatus = 8
	OrderStatus_SUSPENDED            OrderStatus = 9
	OrderStatus_PENDING_NEW          OrderStatus = 10
	OrderStatus_CALCULATED           OrderStatus = 11
	OrderStatus_EXPIRED              OrderStatus = 12
	OrderStatus_ACCEPTED_FOR_BIDDING OrderStatus = 13
	OrderStatus_PENDING_REPLACE      OrderStatus = 14
	OrderStatus_ORDER_RECEIVED       OrderStatus = 100
	OrderStatus_ORDER_SENT           OrderStatus = 101
	OrderStatus_MC_ACK_ORDER         OrderStatus = 102
	OrderStatus_MC_SENT_ORDER        OrderStatus = 103
	OrderStatus_CANCEL_RECEIVED      OrderStatus = 110
	OrderStatus_CANCEL_SENT          OrderStatus = 111
	OrderStatus_MC_ACK_CANCEL        OrderStatus = 112
	OrderStatus_MC_SENT_CANCEL       OrderStatus = 113
	OrderStatus_REPLACE_RECEIVED     OrderStatus = 120
	OrderStatus_REPLACE_SENT         OrderStatus = 121
	OrderStatus_MC_ACK_REPLACE       OrderStatus = 122
	OrderStatus_MC_SENT_REPLACE      OrderStatus = 123
	OrderStatus_EXECUTION_REPLACED   OrderStatus = 125
	OrderStatus_EXECUTION_CANCELLED  OrderStatus = 126
	OrderStatus_BOOKABLE             OrderStatus = 130
	OrderStatus_TRADE_PUMP_RECEIVED  OrderStatus = 131
	OrderStatus_TRADE_PUMP_PROCESSED OrderStatus = 132
	OrderStatus_BOOKING              OrderStatus = 133
	OrderStatus_SENT_PMS             OrderStatus = 134
	OrderStatus_BOOKED               OrderStatus = 135
)

var OrderStatus_name = map[int32]string{
	0:   "NEW",
	1:   "PARTIALLY_FILLED",
	2:   "FILLED",
	3:   "DONE_FOR_DAY",
	4:   "CANCELLED",
	5:   "REPLACED",
	6:   "PENDING_CANCEL",
	7:   "STOPPED",
	8:   "REJECTED",
	9:   "SUSPENDED",
	10:  "PENDING_NEW",
	11:  "CALCULATED",
	12:  "EXPIRED",
	13:  "ACCEPTED_FOR_BIDDING",
	14:  "PENDING_REPLACE",
	100: "ORDER_RECEIVED",
	101: "ORDER_SENT",
	102: "MC_ACK_ORDER",
	103: "MC_SENT_ORDER",
	110: "CANCEL_RECEIVED",
	111: "CANCEL_SENT",
	112: "MC_ACK_CANCEL",
	113: "MC_SENT_CANCEL",
	120: "REPLACE_RECEIVED",
	121: "REPLACE_SENT",
	122: "MC_ACK_REPLACE",
	123: "MC_SENT_REPLACE",
	125: "EXECUTION_REPLACED",
	126: "EXECUTION_CANCELLED",
	130: "BOOKABLE",
	131: "TRADE_PUMP_RECEIVED",
	132: "TRADE_PUMP_PROCESSED",
	133: "BOOKING",
	134: "SENT_PMS",
	135: "BOOKED",
}
var OrderStatus_value = map[string]int32{
	"NEW":                  0,
	"PARTIALLY_FILLED":     1,
	"FILLED":               2,
	"DONE_FOR_DAY":         3,
	"CANCELLED":            4,
	"REPLACED":             5,
	"PENDING_CANCEL":       6,
	"STOPPED":              7,
	"REJECTED":             8,
	"SUSPENDED":            9,
	"PENDING_NEW":          10,
	"CALCULATED":           11,
	"EXPIRED":              12,
	"ACCEPTED_FOR_BIDDING": 13,
	"PENDING_REPLACE":      14,
	"ORDER_RECEIVED":       100,
	"ORDER_SENT":           101,
	"MC_ACK_ORDER":         102,
	"MC_SENT_ORDER":        103,
	"CANCEL_RECEIVED":      110,
	"CANCEL_SENT":          111,
	"MC_ACK_CANCEL":        112,
	"MC_SENT_CANCEL":       113,
	"REPLACE_RECEIVED":     120,
	"REPLACE_SENT":         121,
	"MC_ACK_REPLACE":       122,
	"MC_SENT_REPLACE":      123,
	"EXECUTION_REPLACED":   125,
	"EXECUTION_CANCELLED":  126,
	"BOOKABLE":             130,
	"TRADE_PUMP_RECEIVED":  131,
	"TRADE_PUMP_PROCESSED": 132,
	"BOOKING":              133,
	"SENT_PMS":             134,
	"BOOKED":               135,
}

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}
func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}
func (x *OrderStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderStatus_value, data, "OrderStatus")
	if err != nil {
		return err
	}
	*x = OrderStatus(value)
	return nil
}

type Side int32

const (
	Side_BUY                Side = 1
	Side_SELL               Side = 2
	Side_BUY_MINUS          Side = 3
	Side_SELL_PLUS          Side = 4
	Side_SELL_SHORT         Side = 5
	Side_SELL_SHORT_EXEMPT  Side = 6
	Side_UNDISCLOSED        Side = 7
	Side_CROSS              Side = 8
	Side_CROSS_SHORT        Side = 9
	Side_CROSS_SHORT_EXEMPT Side = 10
	Side_AS_DEFINED         Side = 11
	Side_OPPOSITE           Side = 12
	Side_SUBSCRIBE          Side = 13
	Side_REDEEM             Side = 14
	Side_LEND               Side = 15
	Side_BORROW             Side = 16
)

var Side_name = map[int32]string{
	1:  "BUY",
	2:  "SELL",
	3:  "BUY_MINUS",
	4:  "SELL_PLUS",
	5:  "SELL_SHORT",
	6:  "SELL_SHORT_EXEMPT",
	7:  "UNDISCLOSED",
	8:  "CROSS",
	9:  "CROSS_SHORT",
	10: "CROSS_SHORT_EXEMPT",
	11: "AS_DEFINED",
	12: "OPPOSITE",
	13: "SUBSCRIBE",
	14: "REDEEM",
	15: "LEND",
	16: "BORROW",
}
var Side_value = map[string]int32{
	"BUY":                1,
	"SELL":               2,
	"BUY_MINUS":          3,
	"SELL_PLUS":          4,
	"SELL_SHORT":         5,
	"SELL_SHORT_EXEMPT":  6,
	"UNDISCLOSED":        7,
	"CROSS":              8,
	"CROSS_SHORT":        9,
	"CROSS_SHORT_EXEMPT": 10,
	"AS_DEFINED":         11,
	"OPPOSITE":           12,
	"SUBSCRIBE":          13,
	"REDEEM":             14,
	"LEND":               15,
	"BORROW":             16,
}

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}
func (x Side) String() string {
	return proto.EnumName(Side_name, int32(x))
}
func (x *Side) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Side_value, data, "Side")
	if err != nil {
		return err
	}
	*x = Side(value)
	return nil
}

type OrderType int32

const (
	OrderType_MARKET                        OrderType = 1
	OrderType_LIMIT                         OrderType = 2
	OrderType_STOP                          OrderType = 3
	OrderType_STOP_LIMIT                    OrderType = 4
	OrderType_MARKET_ON_CLOSE               OrderType = 5
	OrderType_WITH_OR_WITHOUT               OrderType = 6
	OrderType_LIMIT_OR_BETTER               OrderType = 7
	OrderType_LIMIT_WITH_OR_WITHOUT         OrderType = 8
	OrderType_ON_BASIS                      OrderType = 9
	OrderType_ON_CLOSE                      OrderType = 10
	OrderType_LIMIT_ON_CLOSE                OrderType = 11
	OrderType_FOREX_MARKET                  OrderType = 12
	OrderType_PREVIOUSLY_QUOTED             OrderType = 13
	OrderType_PREVIOUSLY_INDICATED          OrderType = 14
	OrderType_FOREX_LIMIT                   OrderType = 15
	OrderType_FOREX_SWAP                    OrderType = 16
	OrderType_FOREX_PREVIOUSLY_QUOTED       OrderType = 17
	OrderType_FUNARI                        OrderType = 18
	OrderType_MARKET_IF_TOUCHED             OrderType = 19
	OrderType_MARKET_WITH_LEFTOVER_AS_LIMIT OrderType = 20
	OrderType_PREVIOUS_FUND_VALUATION_POINT OrderType = 21
	OrderType_NEXT_FUND_VALUATION_POINT     OrderType = 22
	OrderType_PEGGED                        OrderType = 23
)

var OrderType_name = map[int32]string{
	1:  "MARKET",
	2:  "LIMIT",
	3:  "STOP",
	4:  "STOP_LIMIT",
	5:  "MARKET_ON_CLOSE",
	6:  "WITH_OR_WITHOUT",
	7:  "LIMIT_OR_BETTER",
	8:  "LIMIT_WITH_OR_WITHOUT",
	9:  "ON_BASIS",
	10: "ON_CLOSE",
	11: "LIMIT_ON_CLOSE",
	12: "FOREX_MARKET",
	13: "PREVIOUSLY_QUOTED",
	14: "PREVIOUSLY_INDICATED",
	15: "FOREX_LIMIT",
	16: "FOREX_SWAP",
	17: "FOREX_PREVIOUSLY_QUOTED",
	18: "FUNARI",
	19: "MARKET_IF_TOUCHED",
	20: "MARKET_WITH_LEFTOVER_AS_LIMIT",
	21: "PREVIOUS_FUND_VALUATION_POINT",
	22: "NEXT_FUND_VALUATION_POINT",
	23: "PEGGED",
}
var OrderType_value = map[string]int32{
	"MARKET":                        1,
	"LIMIT":                         2,
	"STOP":                          3,
	"STOP_LIMIT":                    4,
	"MARKET_ON_CLOSE":               5,
	"WITH_OR_WITHOUT":               6,
	"LIMIT_OR_BETTER":               7,
	"LIMIT_WITH_OR_WITHOUT":         8,
	"ON_BASIS":                      9,
	"ON_CLOSE":                      10,
	"LIMIT_ON_CLOSE":                11,
	"FOREX_MARKET":                  12,
	"PREVIOUSLY_QUOTED":             13,
	"PREVIOUSLY_INDICATED":          14,
	"FOREX_LIMIT":                   15,
	"FOREX_SWAP":                    16,
	"FOREX_PREVIOUSLY_QUOTED":       17,
	"FUNARI":                        18,
	"MARKET_IF_TOUCHED":             19,
	"MARKET_WITH_LEFTOVER_AS_LIMIT": 20,
	"PREVIOUS_FUND_VALUATION_POINT": 21,
	"NEXT_FUND_VALUATION_POINT":     22,
	"PEGGED":                        23,
}

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}
func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (x *OrderType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OrderType_value, data, "OrderType")
	if err != nil {
		return err
	}
	*x = OrderType(value)
	return nil
}

type TimeInForce int32

const (
	TimeInForce_DAY                 TimeInForce = 0
	TimeInForce_GOOD_TILL_CANCEL    TimeInForce = 1
	TimeInForce_AT_THE_OPENING      TimeInForce = 2
	TimeInForce_IMMEDIATE_OR_CANCEL TimeInForce = 3
	TimeInForce_FILL_OR_KILL        TimeInForce = 4
	TimeInForce_GOOD_TILL_CROSSING  TimeInForce = 5
	TimeInForce_GOOD_TILL_DATE      TimeInForce = 6
	TimeInForce_AT_THE_CLOSE        TimeInForce = 7
)

var TimeInForce_name = map[int32]string{
	0: "DAY",
	1: "GOOD_TILL_CANCEL",
	2: "AT_THE_OPENING",
	3: "IMMEDIATE_OR_CANCEL",
	4: "FILL_OR_KILL",
	5: "GOOD_TILL_CROSSING",
	6: "GOOD_TILL_DATE",
	7: "AT_THE_CLOSE",
}
var TimeInForce_value = map[string]int32{
	"DAY":                 0,
	"GOOD_TILL_CANCEL":    1,
	"AT_THE_OPENING":      2,
	"IMMEDIATE_OR_CANCEL": 3,
	"FILL_OR_KILL":        4,
	"GOOD_TILL_CROSSING":  5,
	"GOOD_TILL_DATE":      6,
	"AT_THE_CLOSE":        7,
}

func (x TimeInForce) Enum() *TimeInForce {
	p := new(TimeInForce)
	*p = x
	return p
}
func (x TimeInForce) String() string {
	return proto.EnumName(TimeInForce_name, int32(x))
}
func (x *TimeInForce) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TimeInForce_value, data, "TimeInForce")
	if err != nil {
		return err
	}
	*x = TimeInForce(value)
	return nil
}

type HandlInst int32

const (
	HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE HandlInst = 1
	HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC  HandlInst = 2
	HandlInst_MANUAL_ORDER                      HandlInst = 3
)

var HandlInst_name = map[int32]string{
	1: "AUTOMATED_EXECUTION_ORDER_PRIVATE",
	2: "AUTOMATED_EXECUTION_ORDER_PUBLIC",
	3: "MANUAL_ORDER",
}
var HandlInst_value = map[string]int32{
	"AUTOMATED_EXECUTION_ORDER_PRIVATE": 1,
	"AUTOMATED_EXECUTION_ORDER_PUBLIC":  2,
	"MANUAL_ORDER":                      3,
}

func (x HandlInst) Enum() *HandlInst {
	p := new(HandlInst)
	*p = x
	return p
}
func (x HandlInst) String() string {
	return proto.EnumName(HandlInst_name, int32(x))
}
func (x *HandlInst) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HandlInst_value, data, "HandlInst")
	if err != nil {
		return err
	}
	*x = HandlInst(value)
	return nil
}

type LastLiquidityInd int32

const (
	LastLiquidityInd_ADDED_LIQUIDITY      LastLiquidityInd = 1
	LastLiquidityInd_REMOVED_LIQUIDITY    LastLiquidityInd = 2
	LastLiquidityInd_LIQUIDITY_ROUTED_OUT LastLiquidityInd = 3
	LastLiquidityInd_AUCTION              LastLiquidityInd = 4
)

var LastLiquidityInd_name = map[int32]string{
	1: "ADDED_LIQUIDITY",
	2: "REMOVED_LIQUIDITY",
	3: "LIQUIDITY_ROUTED_OUT",
	4: "AUCTION",
}
var LastLiquidityInd_value = map[string]int32{
	"ADDED_LIQUIDITY":      1,
	"REMOVED_LIQUIDITY":    2,
	"LIQUIDITY_ROUTED_OUT": 3,
	"AUCTION":              4,
}

func (x LastLiquidityInd) Enum() *LastLiquidityInd {
	p := new(LastLiquidityInd)
	*p = x
	return p
}
func (x LastLiquidityInd) String() string {
	return proto.EnumName(LastLiquidityInd_name, int32(x))
}
func (x *LastLiquidityInd) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LastLiquidityInd_value, data, "LastLiquidityInd")
	if err != nil {
		return err
	}
	*x = LastLiquidityInd(value)
	return nil
}

type Order_OrderInstruction int32

const (
	Order_NEW     Order_OrderInstruction = 0
	Order_CANCEL  Order_OrderInstruction = 1
	Order_REPLACE Order_OrderInstruction = 2
)

var Order_OrderInstruction_name = map[int32]string{
	0: "NEW",
	1: "CANCEL",
	2: "REPLACE",
}
var Order_OrderInstruction_value = map[string]int32{
	"NEW":     0,
	"CANCEL":  1,
	"REPLACE": 2,
}

func (x Order_OrderInstruction) Enum() *Order_OrderInstruction {
	p := new(Order_OrderInstruction)
	*p = x
	return p
}
func (x Order_OrderInstruction) String() string {
	return proto.EnumName(Order_OrderInstruction_name, int32(x))
}
func (x *Order_OrderInstruction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Order_OrderInstruction_value, data, "Order_OrderInstruction")
	if err != nil {
		return err
	}
	*x = Order_OrderInstruction(value)
	return nil
}

type Execution_ExecType int32

const (
	Execution_NEW             Execution_ExecType = 0
	Execution_PARTIAL_FILL    Execution_ExecType = 1
	Execution_FILL            Execution_ExecType = 2
	Execution_DONE_FOR_DAY    Execution_ExecType = 3
	Execution_CANCELED        Execution_ExecType = 4
	Execution_REPLACE         Execution_ExecType = 5
	Execution_PENDING_CANCEL  Execution_ExecType = 6
	Execution_STOPPED         Execution_ExecType = 7
	Execution_REJECTED        Execution_ExecType = 8
	Execution_SUSPENDED       Execution_ExecType = 9
	Execution_PENDING_NEW     Execution_ExecType = 10
	Execution_CALCULATED      Execution_ExecType = 11
	Execution_EXPIRED         Execution_ExecType = 12
	Execution_RESTATED        Execution_ExecType = 13
	Execution_PENDING_REPLACE Execution_ExecType = 14
	Execution_TRADE           Execution_ExecType = 15
	Execution_TRADE_CORRECT   Execution_ExecType = 16
	Execution_TRADE_CANCEL    Execution_ExecType = 17
	Execution_ORDER_STATUS    Execution_ExecType = 18
)

var Execution_ExecType_name = map[int32]string{
	0:  "NEW",
	1:  "PARTIAL_FILL",
	2:  "FILL",
	3:  "DONE_FOR_DAY",
	4:  "CANCELED",
	5:  "REPLACE",
	6:  "PENDING_CANCEL",
	7:  "STOPPED",
	8:  "REJECTED",
	9:  "SUSPENDED",
	10: "PENDING_NEW",
	11: "CALCULATED",
	12: "EXPIRED",
	13: "RESTATED",
	14: "PENDING_REPLACE",
	15: "TRADE",
	16: "TRADE_CORRECT",
	17: "TRADE_CANCEL",
	18: "ORDER_STATUS",
}
var Execution_ExecType_value = map[string]int32{
	"NEW":             0,
	"PARTIAL_FILL":    1,
	"FILL":            2,
	"DONE_FOR_DAY":    3,
	"CANCELED":        4,
	"REPLACE":         5,
	"PENDING_CANCEL":  6,
	"STOPPED":         7,
	"REJECTED":        8,
	"SUSPENDED":       9,
	"PENDING_NEW":     10,
	"CALCULATED":      11,
	"EXPIRED":         12,
	"RESTATED":        13,
	"PENDING_REPLACE": 14,
	"TRADE":           15,
	"TRADE_CORRECT":   16,
	"TRADE_CANCEL":    17,
	"ORDER_STATUS":    18,
}

func (x Execution_ExecType) Enum() *Execution_ExecType {
	p := new(Execution_ExecType)
	*p = x
	return p
}
func (x Execution_ExecType) String() string {
	return proto.EnumName(Execution_ExecType_name, int32(x))
}
func (x *Execution_ExecType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Execution_ExecType_value, data, "Execution_ExecType")
	if err != nil {
		return err
	}
	*x = Execution_ExecType(value)
	return nil
}

type Order struct {
	// Idents
	ClientGuid  *string                 `protobuf:"bytes,1,req,name=client_guid" json:"client_guid,omitempty"`
	OrderId     *int32                  `protobuf:"varint,2,req,name=order_id" json:"order_id,omitempty"`
	OrderKey    *int32                  `protobuf:"varint,3,req,name=order_key" json:"order_key,omitempty"`
	Version     *int32                  `protobuf:"varint,4,req,name=version" json:"version,omitempty"`
	Instruction *Order_OrderInstruction `protobuf:"varint,5,opt,name=instruction,enum=proto.order.Order_OrderInstruction" json:"instruction,omitempty"`
	// basic
	Side     *Side    `protobuf:"varint,6,req,name=side,enum=proto.order.Side" json:"side,omitempty"`
	Quantity *float64 `protobuf:"fixed64,7,req,name=quantity" json:"quantity,omitempty"`
	Symbol   *string  `protobuf:"bytes,8,req,name=symbol" json:"symbol,omitempty"`
	// execution specific
	OrderType      *OrderType   `protobuf:"varint,16,req,name=order_type,enum=proto.order.OrderType" json:"order_type,omitempty"`
	Timeinforce    *TimeInForce `protobuf:"varint,17,req,name=timeinforce,enum=proto.order.TimeInForce" json:"timeinforce,omitempty"`
	LimitPrice     *float64     `protobuf:"fixed64,18,opt,name=limit_price" json:"limit_price,omitempty"`
	Exchange       *string      `protobuf:"bytes,19,opt,name=exchange" json:"exchange,omitempty"`
	Description    *string      `protobuf:"bytes,20,opt,name=description" json:"description,omitempty"`
	FilledQuantity *float64     `protobuf:"fixed64,21,opt,name=filled_quantity" json:"filled_quantity,omitempty"`
	FilledAvgPrice *float64     `protobuf:"fixed64,22,opt,name=filled_avg_price" json:"filled_avg_price,omitempty"`
	OrderStatus    *OrderStatus `protobuf:"varint,23,opt,name=order_status,enum=proto.order.OrderStatus" json:"order_status,omitempty"`
	// accounts
	AccountId       *int32  `protobuf:"varint,30,req,name=account_id" json:"account_id,omitempty"`
	BrokerUserid    *string `protobuf:"bytes,31,opt,name=broker_userid" json:"broker_userid,omitempty"`
	BrokerAccount   *string `protobuf:"bytes,32,opt,name=broker_account" json:"broker_account,omitempty"`
	MarketConnector *string `protobuf:"bytes,33,opt,name=market_connector" json:"market_connector,omitempty"`
	// execution extra
	SettlCcy       *string    `protobuf:"bytes,40,opt,name=settl_ccy" json:"settl_ccy,omitempty"`
	HandleInst     *HandlInst `protobuf:"varint,41,req,name=handle_inst,enum=proto.order.HandlInst" json:"handle_inst,omitempty"`
	Algo           *string    `protobuf:"bytes,42,opt,name=algo" json:"algo,omitempty"`
	IsComplete     *bool      `protobuf:"varint,43,opt,name=is_complete" json:"is_complete,omitempty"`
	IsBooked       *bool      `protobuf:"varint,44,opt,name=is_booked" json:"is_booked,omitempty"`
	IsExpired      *bool      `protobuf:"varint,45,opt,name=is_expired" json:"is_expired,omitempty"`
	TradeBookingId *int32     `protobuf:"varint,46,opt,name=trade_booking_id" json:"trade_booking_id,omitempty"`
	OpenClose      *string    `protobuf:"bytes,47,opt,name=open_close" json:"open_close,omitempty"`
	// source
	Source   *string `protobuf:"bytes,50,opt,name=source" json:"source,omitempty"`
	Trader   *string `protobuf:"bytes,51,opt,name=trader" json:"trader,omitempty"`
	TraderId *int32  `protobuf:"varint,52,req,name=trader_id" json:"trader_id,omitempty"`
	Machine  *string `protobuf:"bytes,53,opt,name=machine" json:"machine,omitempty"`
	Memo     *string `protobuf:"bytes,54,opt,name=memo" json:"memo,omitempty"`
	// timing
	CreateDatetime *string `protobuf:"bytes,60,opt,name=create_datetime" json:"create_datetime,omitempty"`
	SubmitDatetime *string `protobuf:"bytes,61,opt,name=submit_datetime" json:"submit_datetime,omitempty"`
	// array components
	Executions       []*Execution  `protobuf:"bytes,70,rep,name=executions" json:"executions,omitempty"`
	Allocations      []*Allocation `protobuf:"bytes,80,rep,name=allocations" json:"allocations,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Order) Reset()      { *m = Order{} }
func (*Order) ProtoMessage() {}

func (m *Order) GetClientGuid() string {
	if m != nil && m.ClientGuid != nil {
		return *m.ClientGuid
	}
	return ""
}

func (m *Order) GetOrderId() int32 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *Order) GetOrderKey() int32 {
	if m != nil && m.OrderKey != nil {
		return *m.OrderKey
	}
	return 0
}

func (m *Order) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *Order) GetInstruction() Order_OrderInstruction {
	if m != nil && m.Instruction != nil {
		return *m.Instruction
	}
	return Order_NEW
}

func (m *Order) GetSide() Side {
	if m != nil && m.Side != nil {
		return *m.Side
	}
	return Side_BUY
}

func (m *Order) GetQuantity() float64 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

func (m *Order) GetSymbol() string {
	if m != nil && m.Symbol != nil {
		return *m.Symbol
	}
	return ""
}

func (m *Order) GetOrderType() OrderType {
	if m != nil && m.OrderType != nil {
		return *m.OrderType
	}
	return OrderType_MARKET
}

func (m *Order) GetTimeinforce() TimeInForce {
	if m != nil && m.Timeinforce != nil {
		return *m.Timeinforce
	}
	return TimeInForce_DAY
}

func (m *Order) GetLimitPrice() float64 {
	if m != nil && m.LimitPrice != nil {
		return *m.LimitPrice
	}
	return 0
}

func (m *Order) GetExchange() string {
	if m != nil && m.Exchange != nil {
		return *m.Exchange
	}
	return ""
}

func (m *Order) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Order) GetFilledQuantity() float64 {
	if m != nil && m.FilledQuantity != nil {
		return *m.FilledQuantity
	}
	return 0
}

func (m *Order) GetFilledAvgPrice() float64 {
	if m != nil && m.FilledAvgPrice != nil {
		return *m.FilledAvgPrice
	}
	return 0
}

func (m *Order) GetOrderStatus() OrderStatus {
	if m != nil && m.OrderStatus != nil {
		return *m.OrderStatus
	}
	return OrderStatus_NEW
}

func (m *Order) GetAccountId() int32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *Order) GetBrokerUserid() string {
	if m != nil && m.BrokerUserid != nil {
		return *m.BrokerUserid
	}
	return ""
}

func (m *Order) GetBrokerAccount() string {
	if m != nil && m.BrokerAccount != nil {
		return *m.BrokerAccount
	}
	return ""
}

func (m *Order) GetMarketConnector() string {
	if m != nil && m.MarketConnector != nil {
		return *m.MarketConnector
	}
	return ""
}

func (m *Order) GetSettlCcy() string {
	if m != nil && m.SettlCcy != nil {
		return *m.SettlCcy
	}
	return ""
}

func (m *Order) GetHandleInst() HandlInst {
	if m != nil && m.HandleInst != nil {
		return *m.HandleInst
	}
	return HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE
}

func (m *Order) GetAlgo() string {
	if m != nil && m.Algo != nil {
		return *m.Algo
	}
	return ""
}

func (m *Order) GetIsComplete() bool {
	if m != nil && m.IsComplete != nil {
		return *m.IsComplete
	}
	return false
}

func (m *Order) GetIsBooked() bool {
	if m != nil && m.IsBooked != nil {
		return *m.IsBooked
	}
	return false
}

func (m *Order) GetIsExpired() bool {
	if m != nil && m.IsExpired != nil {
		return *m.IsExpired
	}
	return false
}

func (m *Order) GetTradeBookingId() int32 {
	if m != nil && m.TradeBookingId != nil {
		return *m.TradeBookingId
	}
	return 0
}

func (m *Order) GetOpenClose() string {
	if m != nil && m.OpenClose != nil {
		return *m.OpenClose
	}
	return ""
}

func (m *Order) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *Order) GetTrader() string {
	if m != nil && m.Trader != nil {
		return *m.Trader
	}
	return ""
}

func (m *Order) GetTraderId() int32 {
	if m != nil && m.TraderId != nil {
		return *m.TraderId
	}
	return 0
}

func (m *Order) GetMachine() string {
	if m != nil && m.Machine != nil {
		return *m.Machine
	}
	return ""
}

func (m *Order) GetMemo() string {
	if m != nil && m.Memo != nil {
		return *m.Memo
	}
	return ""
}

func (m *Order) GetCreateDatetime() string {
	if m != nil && m.CreateDatetime != nil {
		return *m.CreateDatetime
	}
	return ""
}

func (m *Order) GetSubmitDatetime() string {
	if m != nil && m.SubmitDatetime != nil {
		return *m.SubmitDatetime
	}
	return ""
}

func (m *Order) GetExecutions() []*Execution {
	if m != nil {
		return m.Executions
	}
	return nil
}

func (m *Order) GetAllocations() []*Allocation {
	if m != nil {
		return m.Allocations
	}
	return nil
}

type Execution struct {
	ExecutionId                  *int32              `protobuf:"varint,1,req,name=execution_id" json:"execution_id,omitempty"`
	OrderId                      *int32              `protobuf:"varint,2,req,name=order_id" json:"order_id,omitempty"`
	OrderKey                     *int32              `protobuf:"varint,3,opt,name=order_key" json:"order_key,omitempty"`
	ClientOrderId                *string             `protobuf:"bytes,5,opt,name=client_order_id" json:"client_order_id,omitempty"`
	BrokerOrderId                *string             `protobuf:"bytes,6,opt,name=broker_order_id" json:"broker_order_id,omitempty"`
	BrokerExecId                 *string             `protobuf:"bytes,7,opt,name=broker_exec_id" json:"broker_exec_id,omitempty"`
	PrevBrokerExecId             *string             `protobuf:"bytes,8,opt,name=prev_broker_exec_id" json:"prev_broker_exec_id,omitempty"`
	CancelReplaceByExececutionId *int32              `protobuf:"varint,9,opt,name=cancel_replace_by_exececution_id" json:"cancel_replace_by_exececution_id,omitempty"`
	OrderStatus                  *OrderStatus        `protobuf:"varint,10,opt,name=order_status,enum=proto.order.OrderStatus" json:"order_status,omitempty"`
	ExecType                     *Execution_ExecType `protobuf:"varint,11,opt,name=exec_type,enum=proto.order.Execution_ExecType" json:"exec_type,omitempty"`
	Quantity                     *float64            `protobuf:"fixed64,20,opt,name=quantity" json:"quantity,omitempty"`
	Price                        *float64            `protobuf:"fixed64,21,opt,name=price" json:"price,omitempty"`
	Text                         *string             `protobuf:"bytes,30,opt,name=text" json:"text,omitempty"`
	Lastmkt                      *string             `protobuf:"bytes,31,opt,name=lastmkt" json:"lastmkt,omitempty"`
	ExecBroker                   *string             `protobuf:"bytes,32,opt,name=exec_broker" json:"exec_broker,omitempty"`
	LastLiquidity                *LastLiquidityInd   `protobuf:"varint,33,opt,name=last_liquidity,enum=proto.order.LastLiquidityInd" json:"last_liquidity,omitempty"`
	CumQuantity                  *float64            `protobuf:"fixed64,50,opt,name=cum_quantity" json:"cum_quantity,omitempty"`
	AvgPrice                     *float64            `protobuf:"fixed64,51,opt,name=avg_price" json:"avg_price,omitempty"`
	CalcCumQuantity              *float64            `protobuf:"fixed64,52,opt,name=calc_cum_quantity" json:"calc_cum_quantity,omitempty"`
	CalcAvgPrice                 *float64            `protobuf:"fixed64,53,opt,name=calc_avg_price" json:"calc_avg_price,omitempty"`
	// timing
	BrokerExecDatetime *string `protobuf:"bytes,60,opt,name=broker_exec_datetime" json:"broker_exec_datetime,omitempty"`
	CreateDatetime     *string `protobuf:"bytes,61,opt,name=create_datetime" json:"create_datetime,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *Execution) Reset()      { *m = Execution{} }
func (*Execution) ProtoMessage() {}

func (m *Execution) GetExecutionId() int32 {
	if m != nil && m.ExecutionId != nil {
		return *m.ExecutionId
	}
	return 0
}

func (m *Execution) GetOrderId() int32 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *Execution) GetOrderKey() int32 {
	if m != nil && m.OrderKey != nil {
		return *m.OrderKey
	}
	return 0
}

func (m *Execution) GetClientOrderId() string {
	if m != nil && m.ClientOrderId != nil {
		return *m.ClientOrderId
	}
	return ""
}

func (m *Execution) GetBrokerOrderId() string {
	if m != nil && m.BrokerOrderId != nil {
		return *m.BrokerOrderId
	}
	return ""
}

func (m *Execution) GetBrokerExecId() string {
	if m != nil && m.BrokerExecId != nil {
		return *m.BrokerExecId
	}
	return ""
}

func (m *Execution) GetPrevBrokerExecId() string {
	if m != nil && m.PrevBrokerExecId != nil {
		return *m.PrevBrokerExecId
	}
	return ""
}

func (m *Execution) GetCancelReplaceByExececutionId() int32 {
	if m != nil && m.CancelReplaceByExececutionId != nil {
		return *m.CancelReplaceByExececutionId
	}
	return 0
}

func (m *Execution) GetOrderStatus() OrderStatus {
	if m != nil && m.OrderStatus != nil {
		return *m.OrderStatus
	}
	return OrderStatus_NEW
}

func (m *Execution) GetExecType() Execution_ExecType {
	if m != nil && m.ExecType != nil {
		return *m.ExecType
	}
	return Execution_NEW
}

func (m *Execution) GetQuantity() float64 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

func (m *Execution) GetPrice() float64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Execution) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *Execution) GetLastmkt() string {
	if m != nil && m.Lastmkt != nil {
		return *m.Lastmkt
	}
	return ""
}

func (m *Execution) GetExecBroker() string {
	if m != nil && m.ExecBroker != nil {
		return *m.ExecBroker
	}
	return ""
}

func (m *Execution) GetLastLiquidity() LastLiquidityInd {
	if m != nil && m.LastLiquidity != nil {
		return *m.LastLiquidity
	}
	return LastLiquidityInd_ADDED_LIQUIDITY
}

func (m *Execution) GetCumQuantity() float64 {
	if m != nil && m.CumQuantity != nil {
		return *m.CumQuantity
	}
	return 0
}

func (m *Execution) GetAvgPrice() float64 {
	if m != nil && m.AvgPrice != nil {
		return *m.AvgPrice
	}
	return 0
}

func (m *Execution) GetCalcCumQuantity() float64 {
	if m != nil && m.CalcCumQuantity != nil {
		return *m.CalcCumQuantity
	}
	return 0
}

func (m *Execution) GetCalcAvgPrice() float64 {
	if m != nil && m.CalcAvgPrice != nil {
		return *m.CalcAvgPrice
	}
	return 0
}

func (m *Execution) GetBrokerExecDatetime() string {
	if m != nil && m.BrokerExecDatetime != nil {
		return *m.BrokerExecDatetime
	}
	return ""
}

func (m *Execution) GetCreateDatetime() string {
	if m != nil && m.CreateDatetime != nil {
		return *m.CreateDatetime
	}
	return ""
}

type Allocation struct {
	AllocationId     *int32   `protobuf:"varint,1,opt,name=allocation_id" json:"allocation_id,omitempty"`
	OrderKey         *int32   `protobuf:"varint,2,opt,name=order_key" json:"order_key,omitempty"`
	StrategyId       *int32   `protobuf:"varint,3,opt,name=strategy_id" json:"strategy_id,omitempty"`
	Quantity         *float64 `protobuf:"fixed64,10,opt,name=quantity" json:"quantity,omitempty"`
	Ratio            *float64 `protobuf:"fixed64,11,opt,name=ratio" json:"ratio,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Allocation) Reset()      { *m = Allocation{} }
func (*Allocation) ProtoMessage() {}

func (m *Allocation) GetAllocationId() int32 {
	if m != nil && m.AllocationId != nil {
		return *m.AllocationId
	}
	return 0
}

func (m *Allocation) GetOrderKey() int32 {
	if m != nil && m.OrderKey != nil {
		return *m.OrderKey
	}
	return 0
}

func (m *Allocation) GetStrategyId() int32 {
	if m != nil && m.StrategyId != nil {
		return *m.StrategyId
	}
	return 0
}

func (m *Allocation) GetQuantity() float64 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

func (m *Allocation) GetRatio() float64 {
	if m != nil && m.Ratio != nil {
		return *m.Ratio
	}
	return 0
}

type NewOrderRequest struct {
	Order            *Order `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *NewOrderRequest) Reset()      { *m = NewOrderRequest{} }
func (*NewOrderRequest) ProtoMessage() {}

func (m *NewOrderRequest) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type NewOrderResponse struct {
	ErrorCode        *int32  `protobuf:"varint,1,opt,name=error_code" json:"error_code,omitempty"`
	ErrorMessage     *string `protobuf:"bytes,2,opt,name=error_message" json:"error_message,omitempty"`
	Order            *Order  `protobuf:"bytes,10,opt,name=order" json:"order,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NewOrderResponse) Reset()      { *m = NewOrderResponse{} }
func (*NewOrderResponse) ProtoMessage() {}

func (m *NewOrderResponse) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *NewOrderResponse) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *NewOrderResponse) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type CancelOrderRequest struct {
	ClientGuid       *string `protobuf:"bytes,1,req,name=client_guid" json:"client_guid,omitempty"`
	OrderId          *int32  `protobuf:"varint,2,opt,name=order_id" json:"order_id,omitempty"`
	OrderKey         *int32  `protobuf:"varint,3,req,name=order_key" json:"order_key,omitempty"`
	Version          *int32  `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	Source           *string `protobuf:"bytes,50,opt,name=source" json:"source,omitempty"`
	Trader           *string `protobuf:"bytes,51,opt,name=trader" json:"trader,omitempty"`
	TraderId         *int32  `protobuf:"varint,52,req,name=trader_id" json:"trader_id,omitempty"`
	Machine          *string `protobuf:"bytes,53,opt,name=machine" json:"machine,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CancelOrderRequest) Reset()      { *m = CancelOrderRequest{} }
func (*CancelOrderRequest) ProtoMessage() {}

func (m *CancelOrderRequest) GetClientGuid() string {
	if m != nil && m.ClientGuid != nil {
		return *m.ClientGuid
	}
	return ""
}

func (m *CancelOrderRequest) GetOrderId() int32 {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return 0
}

func (m *CancelOrderRequest) GetOrderKey() int32 {
	if m != nil && m.OrderKey != nil {
		return *m.OrderKey
	}
	return 0
}

func (m *CancelOrderRequest) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *CancelOrderRequest) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *CancelOrderRequest) GetTrader() string {
	if m != nil && m.Trader != nil {
		return *m.Trader
	}
	return ""
}

func (m *CancelOrderRequest) GetTraderId() int32 {
	if m != nil && m.TraderId != nil {
		return *m.TraderId
	}
	return 0
}

func (m *CancelOrderRequest) GetMachine() string {
	if m != nil && m.Machine != nil {
		return *m.Machine
	}
	return ""
}

type CancelOrderResponse struct {
	ErrorCode        *int32  `protobuf:"varint,1,opt,name=error_code" json:"error_code,omitempty"`
	ErrorMessage     *string `protobuf:"bytes,2,opt,name=error_message" json:"error_message,omitempty"`
	Order            *Order  `protobuf:"bytes,10,opt,name=order" json:"order,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CancelOrderResponse) Reset()      { *m = CancelOrderResponse{} }
func (*CancelOrderResponse) ProtoMessage() {}

func (m *CancelOrderResponse) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *CancelOrderResponse) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *CancelOrderResponse) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type ReplaceOrderRequest struct {
	Order            *Order  `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
	Source           *string `protobuf:"bytes,50,opt,name=source" json:"source,omitempty"`
	Trader           *string `protobuf:"bytes,51,opt,name=trader" json:"trader,omitempty"`
	TraderId         *int32  `protobuf:"varint,52,req,name=trader_id" json:"trader_id,omitempty"`
	Machine          *string `protobuf:"bytes,53,opt,name=machine" json:"machine,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReplaceOrderRequest) Reset()      { *m = ReplaceOrderRequest{} }
func (*ReplaceOrderRequest) ProtoMessage() {}

func (m *ReplaceOrderRequest) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *ReplaceOrderRequest) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *ReplaceOrderRequest) GetTrader() string {
	if m != nil && m.Trader != nil {
		return *m.Trader
	}
	return ""
}

func (m *ReplaceOrderRequest) GetTraderId() int32 {
	if m != nil && m.TraderId != nil {
		return *m.TraderId
	}
	return 0
}

func (m *ReplaceOrderRequest) GetMachine() string {
	if m != nil && m.Machine != nil {
		return *m.Machine
	}
	return ""
}

type ReplaceOrderResponse struct {
	ErrorCode        *int32  `protobuf:"varint,1,opt,name=error_code" json:"error_code,omitempty"`
	ErrorMessage     *string `protobuf:"bytes,2,opt,name=error_message" json:"error_message,omitempty"`
	Order            *Order  `protobuf:"bytes,10,opt,name=order" json:"order,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReplaceOrderResponse) Reset()      { *m = ReplaceOrderResponse{} }
func (*ReplaceOrderResponse) ProtoMessage() {}

func (m *ReplaceOrderResponse) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *ReplaceOrderResponse) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *ReplaceOrderResponse) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.order.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterEnum("proto.order.Side", Side_name, Side_value)
	proto.RegisterEnum("proto.order.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("proto.order.TimeInForce", TimeInForce_name, TimeInForce_value)
	proto.RegisterEnum("proto.order.HandlInst", HandlInst_name, HandlInst_value)
	proto.RegisterEnum("proto.order.LastLiquidityInd", LastLiquidityInd_name, LastLiquidityInd_value)
	proto.RegisterEnum("proto.order.Order_OrderInstruction", Order_OrderInstruction_name, Order_OrderInstruction_value)
	proto.RegisterEnum("proto.order.Execution_ExecType", Execution_ExecType_name, Execution_ExecType_value)
}
func (m *Order) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ClientGuid = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderKey", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderKey = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instruction", wireType)
			}
			var v Order_OrderInstruction
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (Order_OrderInstruction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Instruction = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			var v Side
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (Side(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Side = &v
			hasFields[0] |= uint64(0x00000010)
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Quantity = &v2
			hasFields[0] |= uint64(0x00000020)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Symbol = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000040)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			var v OrderType
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (OrderType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderType = &v
			hasFields[0] |= uint64(0x00000080)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeinforce", wireType)
			}
			var v TimeInForce
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (TimeInForce(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timeinforce = &v
			hasFields[0] |= uint64(0x00000100)
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.LimitPrice = &v2
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Exchange = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 21:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledQuantity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.FilledQuantity = &v2
		case 22:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledAvgPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.FilledAvgPrice = &v2
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderStatus", wireType)
			}
			var v OrderStatus
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (OrderStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderStatus = &v
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AccountId = &v
			hasFields[0] |= uint64(0x00000200)
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerUserid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.BrokerUserid = &s
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.BrokerAccount = &s
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketConnector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.MarketConnector = &s
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlCcy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.SettlCcy = &s
			iNdEx = postIndex
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandleInst", wireType)
			}
			var v HandlInst
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (HandlInst(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HandleInst = &v
			hasFields[0] |= uint64(0x00000400)
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Algo = &s
			iNdEx = postIndex
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsComplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsComplete = &b
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBooked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsBooked = &b
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExpired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsExpired = &b
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeBookingId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TradeBookingId = &v
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenClose", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.OpenClose = &s
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Source = &s
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Trader = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TraderId = &v
			hasFields[0] |= uint64(0x00000800)
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Machine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Machine = &s
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Memo = &s
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDatetime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.CreateDatetime = &s
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitDatetime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.SubmitDatetime = &s
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executions = append(m.Executions, &Execution{})
			if err := m.Executions[len(m.Executions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allocations = append(m.Allocations, &Allocation{})
			if err := m.Allocations[len(m.Allocations)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipOrder(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("client_guid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("order_id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("order_key")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("version")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("side")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("quantity")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("symbol")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("order_type")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("timeinforce")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("account_id")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("handle_inst")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("trader_id")
	}

	return nil
}
func (m *Execution) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecutionId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderKey", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderKey = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ClientOrderId = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.BrokerOrderId = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerExecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.BrokerExecId = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevBrokerExecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.PrevBrokerExecId = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReplaceByExececutionId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelReplaceByExececutionId = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderStatus", wireType)
			}
			var v OrderStatus
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (OrderStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderStatus = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecType", wireType)
			}
			var v Execution_ExecType
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (Execution_ExecType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecType = &v
		case 20:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Quantity = &v2
		case 21:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Price = &v2
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Text = &s
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastmkt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Lastmkt = &s
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecBroker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ExecBroker = &s
			iNdEx = postIndex
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLiquidity", wireType)
			}
			var v LastLiquidityInd
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (LastLiquidityInd(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastLiquidity = &v
		case 50:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumQuantity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.CumQuantity = &v2
		case 51:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.AvgPrice = &v2
		case 52:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalcCumQuantity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.CalcCumQuantity = &v2
		case 53:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalcAvgPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.CalcAvgPrice = &v2
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerExecDatetime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.BrokerExecDatetime = &s
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDatetime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.CreateDatetime = &s
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipOrder(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("execution_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("order_id")
	}

	return nil
}
func (m *Allocation) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllocationId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderKey", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderKey = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StrategyId = &v
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Quantity = &v2
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Ratio = &v2
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipOrder(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *NewOrderRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &Order{}
			}
			if err := m.Order.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipOrder(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *NewOrderResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrorCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ErrorMessage = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &Order{}
			}
			if err := m.Order.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipOrder(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *CancelOrderRequest) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ClientGuid = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderKey", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrderKey = &v
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Source = &s
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Trader = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TraderId = &v
			hasFields[0] |= uint64(0x00000004)
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Machine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Machine = &s
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipOrder(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("client_guid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("order_key")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("trader_id")
	}

	return nil
}
func (m *CancelOrderResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrorCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ErrorMessage = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &Order{}
			}
			if err := m.Order.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipOrder(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func (m *ReplaceOrderRequest) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &Order{}
			}
			if err := m.Order.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Source = &s
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Trader = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TraderId = &v
			hasFields[0] |= uint64(0x00000001)
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Machine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Machine = &s
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipOrder(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("trader_id")
	}

	return nil
}
func (m *ReplaceOrderResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrorCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ErrorMessage = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &Order{}
			}
			if err := m.Order.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			iNdEx -= sizeOfWire
			skippy, err := skipOrder(data[iNdEx:])
			if err != nil {
				return err
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	return nil
}
func skipOrder(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for {
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOrder(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}
func (this *Order) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Order{`,
		`ClientGuid:` + valueToStringOrder(this.ClientGuid) + `,`,
		`OrderId:` + valueToStringOrder(this.OrderId) + `,`,
		`OrderKey:` + valueToStringOrder(this.OrderKey) + `,`,
		`Version:` + valueToStringOrder(this.Version) + `,`,
		`Instruction:` + valueToStringOrder(this.Instruction) + `,`,
		`Side:` + valueToStringOrder(this.Side) + `,`,
		`Quantity:` + valueToStringOrder(this.Quantity) + `,`,
		`Symbol:` + valueToStringOrder(this.Symbol) + `,`,
		`OrderType:` + valueToStringOrder(this.OrderType) + `,`,
		`Timeinforce:` + valueToStringOrder(this.Timeinforce) + `,`,
		`LimitPrice:` + valueToStringOrder(this.LimitPrice) + `,`,
		`Exchange:` + valueToStringOrder(this.Exchange) + `,`,
		`Description:` + valueToStringOrder(this.Description) + `,`,
		`FilledQuantity:` + valueToStringOrder(this.FilledQuantity) + `,`,
		`FilledAvgPrice:` + valueToStringOrder(this.FilledAvgPrice) + `,`,
		`OrderStatus:` + valueToStringOrder(this.OrderStatus) + `,`,
		`AccountId:` + valueToStringOrder(this.AccountId) + `,`,
		`BrokerUserid:` + valueToStringOrder(this.BrokerUserid) + `,`,
		`BrokerAccount:` + valueToStringOrder(this.BrokerAccount) + `,`,
		`MarketConnector:` + valueToStringOrder(this.MarketConnector) + `,`,
		`SettlCcy:` + valueToStringOrder(this.SettlCcy) + `,`,
		`HandleInst:` + valueToStringOrder(this.HandleInst) + `,`,
		`Algo:` + valueToStringOrder(this.Algo) + `,`,
		`IsComplete:` + valueToStringOrder(this.IsComplete) + `,`,
		`IsBooked:` + valueToStringOrder(this.IsBooked) + `,`,
		`IsExpired:` + valueToStringOrder(this.IsExpired) + `,`,
		`TradeBookingId:` + valueToStringOrder(this.TradeBookingId) + `,`,
		`OpenClose:` + valueToStringOrder(this.OpenClose) + `,`,
		`Source:` + valueToStringOrder(this.Source) + `,`,
		`Trader:` + valueToStringOrder(this.Trader) + `,`,
		`TraderId:` + valueToStringOrder(this.TraderId) + `,`,
		`Machine:` + valueToStringOrder(this.Machine) + `,`,
		`Memo:` + valueToStringOrder(this.Memo) + `,`,
		`CreateDatetime:` + valueToStringOrder(this.CreateDatetime) + `,`,
		`SubmitDatetime:` + valueToStringOrder(this.SubmitDatetime) + `,`,
		`Executions:` + strings.Replace(fmt.Sprintf("%v", this.Executions), "Execution", "Execution", 1) + `,`,
		`Allocations:` + strings.Replace(fmt.Sprintf("%v", this.Allocations), "Allocation", "Allocation", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Execution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Execution{`,
		`ExecutionId:` + valueToStringOrder(this.ExecutionId) + `,`,
		`OrderId:` + valueToStringOrder(this.OrderId) + `,`,
		`OrderKey:` + valueToStringOrder(this.OrderKey) + `,`,
		`ClientOrderId:` + valueToStringOrder(this.ClientOrderId) + `,`,
		`BrokerOrderId:` + valueToStringOrder(this.BrokerOrderId) + `,`,
		`BrokerExecId:` + valueToStringOrder(this.BrokerExecId) + `,`,
		`PrevBrokerExecId:` + valueToStringOrder(this.PrevBrokerExecId) + `,`,
		`CancelReplaceByExececutionId:` + valueToStringOrder(this.CancelReplaceByExececutionId) + `,`,
		`OrderStatus:` + valueToStringOrder(this.OrderStatus) + `,`,
		`ExecType:` + valueToStringOrder(this.ExecType) + `,`,
		`Quantity:` + valueToStringOrder(this.Quantity) + `,`,
		`Price:` + valueToStringOrder(this.Price) + `,`,
		`Text:` + valueToStringOrder(this.Text) + `,`,
		`Lastmkt:` + valueToStringOrder(this.Lastmkt) + `,`,
		`ExecBroker:` + valueToStringOrder(this.ExecBroker) + `,`,
		`LastLiquidity:` + valueToStringOrder(this.LastLiquidity) + `,`,
		`CumQuantity:` + valueToStringOrder(this.CumQuantity) + `,`,
		`AvgPrice:` + valueToStringOrder(this.AvgPrice) + `,`,
		`CalcCumQuantity:` + valueToStringOrder(this.CalcCumQuantity) + `,`,
		`CalcAvgPrice:` + valueToStringOrder(this.CalcAvgPrice) + `,`,
		`BrokerExecDatetime:` + valueToStringOrder(this.BrokerExecDatetime) + `,`,
		`CreateDatetime:` + valueToStringOrder(this.CreateDatetime) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Allocation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Allocation{`,
		`AllocationId:` + valueToStringOrder(this.AllocationId) + `,`,
		`OrderKey:` + valueToStringOrder(this.OrderKey) + `,`,
		`StrategyId:` + valueToStringOrder(this.StrategyId) + `,`,
		`Quantity:` + valueToStringOrder(this.Quantity) + `,`,
		`Ratio:` + valueToStringOrder(this.Ratio) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewOrderRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewOrderRequest{`,
		`Order:` + strings.Replace(fmt.Sprintf("%v", this.Order), "Order", "Order", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewOrderResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewOrderResponse{`,
		`ErrorCode:` + valueToStringOrder(this.ErrorCode) + `,`,
		`ErrorMessage:` + valueToStringOrder(this.ErrorMessage) + `,`,
		`Order:` + strings.Replace(fmt.Sprintf("%v", this.Order), "Order", "Order", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelOrderRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelOrderRequest{`,
		`ClientGuid:` + valueToStringOrder(this.ClientGuid) + `,`,
		`OrderId:` + valueToStringOrder(this.OrderId) + `,`,
		`OrderKey:` + valueToStringOrder(this.OrderKey) + `,`,
		`Version:` + valueToStringOrder(this.Version) + `,`,
		`Source:` + valueToStringOrder(this.Source) + `,`,
		`Trader:` + valueToStringOrder(this.Trader) + `,`,
		`TraderId:` + valueToStringOrder(this.TraderId) + `,`,
		`Machine:` + valueToStringOrder(this.Machine) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelOrderResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelOrderResponse{`,
		`ErrorCode:` + valueToStringOrder(this.ErrorCode) + `,`,
		`ErrorMessage:` + valueToStringOrder(this.ErrorMessage) + `,`,
		`Order:` + strings.Replace(fmt.Sprintf("%v", this.Order), "Order", "Order", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceOrderRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceOrderRequest{`,
		`Order:` + strings.Replace(fmt.Sprintf("%v", this.Order), "Order", "Order", 1) + `,`,
		`Source:` + valueToStringOrder(this.Source) + `,`,
		`Trader:` + valueToStringOrder(this.Trader) + `,`,
		`TraderId:` + valueToStringOrder(this.TraderId) + `,`,
		`Machine:` + valueToStringOrder(this.Machine) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceOrderResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceOrderResponse{`,
		`ErrorCode:` + valueToStringOrder(this.ErrorCode) + `,`,
		`ErrorMessage:` + valueToStringOrder(this.ErrorMessage) + `,`,
		`Order:` + strings.Replace(fmt.Sprintf("%v", this.Order), "Order", "Order", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOrder(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Order) Size() (n int) {
	var l int
	_ = l
	if m.ClientGuid != nil {
		l = len(*m.ClientGuid)
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.OrderId != nil {
		n += 1 + sovOrder(uint64(*m.OrderId))
	}
	if m.OrderKey != nil {
		n += 1 + sovOrder(uint64(*m.OrderKey))
	}
	if m.Version != nil {
		n += 1 + sovOrder(uint64(*m.Version))
	}
	if m.Instruction != nil {
		n += 1 + sovOrder(uint64(*m.Instruction))
	}
	if m.Side != nil {
		n += 1 + sovOrder(uint64(*m.Side))
	}
	if m.Quantity != nil {
		n += 9
	}
	if m.Symbol != nil {
		l = len(*m.Symbol)
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.OrderType != nil {
		n += 2 + sovOrder(uint64(*m.OrderType))
	}
	if m.Timeinforce != nil {
		n += 2 + sovOrder(uint64(*m.Timeinforce))
	}
	if m.LimitPrice != nil {
		n += 10
	}
	if m.Exchange != nil {
		l = len(*m.Exchange)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.FilledQuantity != nil {
		n += 10
	}
	if m.FilledAvgPrice != nil {
		n += 10
	}
	if m.OrderStatus != nil {
		n += 2 + sovOrder(uint64(*m.OrderStatus))
	}
	if m.AccountId != nil {
		n += 2 + sovOrder(uint64(*m.AccountId))
	}
	if m.BrokerUserid != nil {
		l = len(*m.BrokerUserid)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.BrokerAccount != nil {
		l = len(*m.BrokerAccount)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.MarketConnector != nil {
		l = len(*m.MarketConnector)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.SettlCcy != nil {
		l = len(*m.SettlCcy)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.HandleInst != nil {
		n += 2 + sovOrder(uint64(*m.HandleInst))
	}
	if m.Algo != nil {
		l = len(*m.Algo)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.IsComplete != nil {
		n += 3
	}
	if m.IsBooked != nil {
		n += 3
	}
	if m.IsExpired != nil {
		n += 3
	}
	if m.TradeBookingId != nil {
		n += 2 + sovOrder(uint64(*m.TradeBookingId))
	}
	if m.OpenClose != nil {
		l = len(*m.OpenClose)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.Source != nil {
		l = len(*m.Source)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.Trader != nil {
		l = len(*m.Trader)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.TraderId != nil {
		n += 2 + sovOrder(uint64(*m.TraderId))
	}
	if m.Machine != nil {
		l = len(*m.Machine)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.Memo != nil {
		l = len(*m.Memo)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.CreateDatetime != nil {
		l = len(*m.CreateDatetime)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.SubmitDatetime != nil {
		l = len(*m.SubmitDatetime)
		n += 2 + l + sovOrder(uint64(l))
	}
	if len(m.Executions) > 0 {
		for _, e := range m.Executions {
			l = e.Size()
			n += 2 + l + sovOrder(uint64(l))
		}
	}
	if len(m.Allocations) > 0 {
		for _, e := range m.Allocations {
			l = e.Size()
			n += 2 + l + sovOrder(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Execution) Size() (n int) {
	var l int
	_ = l
	if m.ExecutionId != nil {
		n += 1 + sovOrder(uint64(*m.ExecutionId))
	}
	if m.OrderId != nil {
		n += 1 + sovOrder(uint64(*m.OrderId))
	}
	if m.OrderKey != nil {
		n += 1 + sovOrder(uint64(*m.OrderKey))
	}
	if m.ClientOrderId != nil {
		l = len(*m.ClientOrderId)
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.BrokerOrderId != nil {
		l = len(*m.BrokerOrderId)
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.BrokerExecId != nil {
		l = len(*m.BrokerExecId)
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.PrevBrokerExecId != nil {
		l = len(*m.PrevBrokerExecId)
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.CancelReplaceByExececutionId != nil {
		n += 1 + sovOrder(uint64(*m.CancelReplaceByExececutionId))
	}
	if m.OrderStatus != nil {
		n += 1 + sovOrder(uint64(*m.OrderStatus))
	}
	if m.ExecType != nil {
		n += 1 + sovOrder(uint64(*m.ExecType))
	}
	if m.Quantity != nil {
		n += 10
	}
	if m.Price != nil {
		n += 10
	}
	if m.Text != nil {
		l = len(*m.Text)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.Lastmkt != nil {
		l = len(*m.Lastmkt)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.ExecBroker != nil {
		l = len(*m.ExecBroker)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.LastLiquidity != nil {
		n += 2 + sovOrder(uint64(*m.LastLiquidity))
	}
	if m.CumQuantity != nil {
		n += 10
	}
	if m.AvgPrice != nil {
		n += 10
	}
	if m.CalcCumQuantity != nil {
		n += 10
	}
	if m.CalcAvgPrice != nil {
		n += 10
	}
	if m.BrokerExecDatetime != nil {
		l = len(*m.BrokerExecDatetime)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.CreateDatetime != nil {
		l = len(*m.CreateDatetime)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Allocation) Size() (n int) {
	var l int
	_ = l
	if m.AllocationId != nil {
		n += 1 + sovOrder(uint64(*m.AllocationId))
	}
	if m.OrderKey != nil {
		n += 1 + sovOrder(uint64(*m.OrderKey))
	}
	if m.StrategyId != nil {
		n += 1 + sovOrder(uint64(*m.StrategyId))
	}
	if m.Quantity != nil {
		n += 9
	}
	if m.Ratio != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewOrderRequest) Size() (n int) {
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewOrderResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != nil {
		n += 1 + sovOrder(uint64(*m.ErrorCode))
	}
	if m.ErrorMessage != nil {
		l = len(*m.ErrorMessage)
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelOrderRequest) Size() (n int) {
	var l int
	_ = l
	if m.ClientGuid != nil {
		l = len(*m.ClientGuid)
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.OrderId != nil {
		n += 1 + sovOrder(uint64(*m.OrderId))
	}
	if m.OrderKey != nil {
		n += 1 + sovOrder(uint64(*m.OrderKey))
	}
	if m.Version != nil {
		n += 1 + sovOrder(uint64(*m.Version))
	}
	if m.Source != nil {
		l = len(*m.Source)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.Trader != nil {
		l = len(*m.Trader)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.TraderId != nil {
		n += 2 + sovOrder(uint64(*m.TraderId))
	}
	if m.Machine != nil {
		l = len(*m.Machine)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelOrderResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != nil {
		n += 1 + sovOrder(uint64(*m.ErrorCode))
	}
	if m.ErrorMessage != nil {
		l = len(*m.ErrorMessage)
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplaceOrderRequest) Size() (n int) {
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Source != nil {
		l = len(*m.Source)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.Trader != nil {
		l = len(*m.Trader)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.TraderId != nil {
		n += 2 + sovOrder(uint64(*m.TraderId))
	}
	if m.Machine != nil {
		l = len(*m.Machine)
		n += 2 + l + sovOrder(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplaceOrderResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != nil {
		n += 1 + sovOrder(uint64(*m.ErrorCode))
	}
	if m.ErrorMessage != nil {
		l = len(*m.ErrorMessage)
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOrder(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func NewPopulatedOrder(r randyOrder, easy bool) *Order {
	this := &Order{}
	v1 := randStringOrder(r)
	this.ClientGuid = &v1
	v2 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v2 *= -1
	}
	this.OrderId = &v2
	v3 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v3 *= -1
	}
	this.OrderKey = &v3
	v4 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v4 *= -1
	}
	this.Version = &v4
	if r.Intn(10) != 0 {
		v5 := Order_OrderInstruction([]int32{0, 1, 2}[r.Intn(3)])
		this.Instruction = &v5
	}
	v6 := Side([]int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}[r.Intn(16)])
	this.Side = &v6
	v7 := float64(r.Float64())
	if r.Intn(2) == 0 {
		v7 *= -1
	}
	this.Quantity = &v7
	v8 := randStringOrder(r)
	this.Symbol = &v8
	v9 := OrderType([]int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}[r.Intn(23)])
	this.OrderType = &v9
	v10 := TimeInForce([]int32{0, 1, 2, 3, 4, 5, 6, 7}[r.Intn(8)])
	this.Timeinforce = &v10
	if r.Intn(10) != 0 {
		v11 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		this.LimitPrice = &v11
	}
	if r.Intn(10) != 0 {
		v12 := randStringOrder(r)
		this.Exchange = &v12
	}
	if r.Intn(10) != 0 {
		v13 := randStringOrder(r)
		this.Description = &v13
	}
	if r.Intn(10) != 0 {
		v14 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		this.FilledQuantity = &v14
	}
	if r.Intn(10) != 0 {
		v15 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v15 *= -1
		}
		this.FilledAvgPrice = &v15
	}
	if r.Intn(10) != 0 {
		v16 := OrderStatus([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 100, 101, 102, 103, 110, 111, 112, 113, 120, 121, 122, 123, 125, 126, 130, 131, 132, 133, 134, 135}[r.Intn(35)])
		this.OrderStatus = &v16
	}
	v17 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v17 *= -1
	}
	this.AccountId = &v17
	if r.Intn(10) != 0 {
		v18 := randStringOrder(r)
		this.BrokerUserid = &v18
	}
	if r.Intn(10) != 0 {
		v19 := randStringOrder(r)
		this.BrokerAccount = &v19
	}
	if r.Intn(10) != 0 {
		v20 := randStringOrder(r)
		this.MarketConnector = &v20
	}
	if r.Intn(10) != 0 {
		v21 := randStringOrder(r)
		this.SettlCcy = &v21
	}
	v22 := HandlInst([]int32{1, 2, 3}[r.Intn(3)])
	this.HandleInst = &v22
	if r.Intn(10) != 0 {
		v23 := randStringOrder(r)
		this.Algo = &v23
	}
	if r.Intn(10) != 0 {
		v24 := bool(bool(r.Intn(2) == 0))
		this.IsComplete = &v24
	}
	if r.Intn(10) != 0 {
		v25 := bool(bool(r.Intn(2) == 0))
		this.IsBooked = &v25
	}
	if r.Intn(10) != 0 {
		v26 := bool(bool(r.Intn(2) == 0))
		this.IsExpired = &v26
	}
	if r.Intn(10) != 0 {
		v27 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v27 *= -1
		}
		this.TradeBookingId = &v27
	}
	if r.Intn(10) != 0 {
		v28 := randStringOrder(r)
		this.OpenClose = &v28
	}
	if r.Intn(10) != 0 {
		v29 := randStringOrder(r)
		this.Source = &v29
	}
	if r.Intn(10) != 0 {
		v30 := randStringOrder(r)
		this.Trader = &v30
	}
	v31 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v31 *= -1
	}
	this.TraderId = &v31
	if r.Intn(10) != 0 {
		v32 := randStringOrder(r)
		this.Machine = &v32
	}
	if r.Intn(10) != 0 {
		v33 := randStringOrder(r)
		this.Memo = &v33
	}
	if r.Intn(10) != 0 {
		v34 := randStringOrder(r)
		this.CreateDatetime = &v34
	}
	if r.Intn(10) != 0 {
		v35 := randStringOrder(r)
		this.SubmitDatetime = &v35
	}
	if r.Intn(10) != 0 {
		v36 := r.Intn(10)
		this.Executions = make([]*Execution, v36)
		for i := 0; i < v36; i++ {
			this.Executions[i] = NewPopulatedExecution(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v37 := r.Intn(10)
		this.Allocations = make([]*Allocation, v37)
		for i := 0; i < v37; i++ {
			this.Allocations[i] = NewPopulatedAllocation(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrder(r, 81)
	}
	return this
}

func NewPopulatedExecution(r randyOrder, easy bool) *Execution {
	this := &Execution{}
	v38 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v38 *= -1
	}
	this.ExecutionId = &v38
	v39 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v39 *= -1
	}
	this.OrderId = &v39
	if r.Intn(10) != 0 {
		v40 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v40 *= -1
		}
		this.OrderKey = &v40
	}
	if r.Intn(10) != 0 {
		v41 := randStringOrder(r)
		this.ClientOrderId = &v41
	}
	if r.Intn(10) != 0 {
		v42 := randStringOrder(r)
		this.BrokerOrderId = &v42
	}
	if r.Intn(10) != 0 {
		v43 := randStringOrder(r)
		this.BrokerExecId = &v43
	}
	if r.Intn(10) != 0 {
		v44 := randStringOrder(r)
		this.PrevBrokerExecId = &v44
	}
	if r.Intn(10) != 0 {
		v45 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v45 *= -1
		}
		this.CancelReplaceByExececutionId = &v45
	}
	if r.Intn(10) != 0 {
		v46 := OrderStatus([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 100, 101, 102, 103, 110, 111, 112, 113, 120, 121, 122, 123, 125, 126, 130, 131, 132, 133, 134, 135}[r.Intn(35)])
		this.OrderStatus = &v46
	}
	if r.Intn(10) != 0 {
		v47 := Execution_ExecType([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}[r.Intn(19)])
		this.ExecType = &v47
	}
	if r.Intn(10) != 0 {
		v48 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v48 *= -1
		}
		this.Quantity = &v48
	}
	if r.Intn(10) != 0 {
		v49 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v49 *= -1
		}
		this.Price = &v49
	}
	if r.Intn(10) != 0 {
		v50 := randStringOrder(r)
		this.Text = &v50
	}
	if r.Intn(10) != 0 {
		v51 := randStringOrder(r)
		this.Lastmkt = &v51
	}
	if r.Intn(10) != 0 {
		v52 := randStringOrder(r)
		this.ExecBroker = &v52
	}
	if r.Intn(10) != 0 {
		v53 := LastLiquidityInd([]int32{1, 2, 3, 4}[r.Intn(4)])
		this.LastLiquidity = &v53
	}
	if r.Intn(10) != 0 {
		v54 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v54 *= -1
		}
		this.CumQuantity = &v54
	}
	if r.Intn(10) != 0 {
		v55 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v55 *= -1
		}
		this.AvgPrice = &v55
	}
	if r.Intn(10) != 0 {
		v56 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v56 *= -1
		}
		this.CalcCumQuantity = &v56
	}
	if r.Intn(10) != 0 {
		v57 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v57 *= -1
		}
		this.CalcAvgPrice = &v57
	}
	if r.Intn(10) != 0 {
		v58 := randStringOrder(r)
		this.BrokerExecDatetime = &v58
	}
	if r.Intn(10) != 0 {
		v59 := randStringOrder(r)
		this.CreateDatetime = &v59
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrder(r, 62)
	}
	return this
}

func NewPopulatedAllocation(r randyOrder, easy bool) *Allocation {
	this := &Allocation{}
	if r.Intn(10) != 0 {
		v60 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v60 *= -1
		}
		this.AllocationId = &v60
	}
	if r.Intn(10) != 0 {
		v61 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v61 *= -1
		}
		this.OrderKey = &v61
	}
	if r.Intn(10) != 0 {
		v62 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v62 *= -1
		}
		this.StrategyId = &v62
	}
	if r.Intn(10) != 0 {
		v63 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v63 *= -1
		}
		this.Quantity = &v63
	}
	if r.Intn(10) != 0 {
		v64 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v64 *= -1
		}
		this.Ratio = &v64
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrder(r, 12)
	}
	return this
}

func NewPopulatedNewOrderRequest(r randyOrder, easy bool) *NewOrderRequest {
	this := &NewOrderRequest{}
	if r.Intn(10) != 0 {
		this.Order = NewPopulatedOrder(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrder(r, 2)
	}
	return this
}

func NewPopulatedNewOrderResponse(r randyOrder, easy bool) *NewOrderResponse {
	this := &NewOrderResponse{}
	if r.Intn(10) != 0 {
		v65 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v65 *= -1
		}
		this.ErrorCode = &v65
	}
	if r.Intn(10) != 0 {
		v66 := randStringOrder(r)
		this.ErrorMessage = &v66
	}
	if r.Intn(10) != 0 {
		this.Order = NewPopulatedOrder(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrder(r, 11)
	}
	return this
}

func NewPopulatedCancelOrderRequest(r randyOrder, easy bool) *CancelOrderRequest {
	this := &CancelOrderRequest{}
	v67 := randStringOrder(r)
	this.ClientGuid = &v67
	if r.Intn(10) != 0 {
		v68 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v68 *= -1
		}
		this.OrderId = &v68
	}
	v69 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v69 *= -1
	}
	this.OrderKey = &v69
	if r.Intn(10) != 0 {
		v70 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v70 *= -1
		}
		this.Version = &v70
	}
	if r.Intn(10) != 0 {
		v71 := randStringOrder(r)
		this.Source = &v71
	}
	if r.Intn(10) != 0 {
		v72 := randStringOrder(r)
		this.Trader = &v72
	}
	v73 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v73 *= -1
	}
	this.TraderId = &v73
	if r.Intn(10) != 0 {
		v74 := randStringOrder(r)
		this.Machine = &v74
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrder(r, 54)
	}
	return this
}

func NewPopulatedCancelOrderResponse(r randyOrder, easy bool) *CancelOrderResponse {
	this := &CancelOrderResponse{}
	if r.Intn(10) != 0 {
		v75 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v75 *= -1
		}
		this.ErrorCode = &v75
	}
	if r.Intn(10) != 0 {
		v76 := randStringOrder(r)
		this.ErrorMessage = &v76
	}
	if r.Intn(10) != 0 {
		this.Order = NewPopulatedOrder(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrder(r, 11)
	}
	return this
}

func NewPopulatedReplaceOrderRequest(r randyOrder, easy bool) *ReplaceOrderRequest {
	this := &ReplaceOrderRequest{}
	if r.Intn(10) != 0 {
		this.Order = NewPopulatedOrder(r, easy)
	}
	if r.Intn(10) != 0 {
		v77 := randStringOrder(r)
		this.Source = &v77
	}
	if r.Intn(10) != 0 {
		v78 := randStringOrder(r)
		this.Trader = &v78
	}
	v79 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v79 *= -1
	}
	this.TraderId = &v79
	if r.Intn(10) != 0 {
		v80 := randStringOrder(r)
		this.Machine = &v80
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrder(r, 54)
	}
	return this
}

func NewPopulatedReplaceOrderResponse(r randyOrder, easy bool) *ReplaceOrderResponse {
	this := &ReplaceOrderResponse{}
	if r.Intn(10) != 0 {
		v81 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v81 *= -1
		}
		this.ErrorCode = &v81
	}
	if r.Intn(10) != 0 {
		v82 := randStringOrder(r)
		this.ErrorMessage = &v82
	}
	if r.Intn(10) != 0 {
		this.Order = NewPopulatedOrder(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrder(r, 11)
	}
	return this
}

type randyOrder interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneOrder(r randyOrder) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringOrder(r randyOrder) string {
	v83 := r.Intn(100)
	tmps := make([]rune, v83)
	for i := 0; i < v83; i++ {
		tmps[i] = randUTF8RuneOrder(r)
	}
	return string(tmps)
}
func randUnrecognizedOrder(r randyOrder, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldOrder(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldOrder(data []byte, r randyOrder, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateOrder(data, uint64(key))
		v84 := r.Int63()
		if r.Intn(2) == 0 {
			v84 *= -1
		}
		data = encodeVarintPopulateOrder(data, uint64(v84))
	case 1:
		data = encodeVarintPopulateOrder(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateOrder(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateOrder(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateOrder(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateOrder(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Order) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Order) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientGuid == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("client_guid")
	} else {
		data[i] = 0xa
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.ClientGuid)))
		i += copy(data[i:], *m.ClientGuid)
	}
	if m.OrderId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("order_id")
	} else {
		data[i] = 0x10
		i++
		i = encodeVarintOrder(data, i, uint64(*m.OrderId))
	}
	if m.OrderKey == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("order_key")
	} else {
		data[i] = 0x18
		i++
		i = encodeVarintOrder(data, i, uint64(*m.OrderKey))
	}
	if m.Version == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("version")
	} else {
		data[i] = 0x20
		i++
		i = encodeVarintOrder(data, i, uint64(*m.Version))
	}
	if m.Instruction != nil {
		data[i] = 0x28
		i++
		i = encodeVarintOrder(data, i, uint64(*m.Instruction))
	}
	if m.Side == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("side")
	} else {
		data[i] = 0x30
		i++
		i = encodeVarintOrder(data, i, uint64(*m.Side))
	}
	if m.Quantity == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("quantity")
	} else {
		data[i] = 0x39
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(*m.Quantity)))
	}
	if m.Symbol == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("symbol")
	} else {
		data[i] = 0x42
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Symbol)))
		i += copy(data[i:], *m.Symbol)
	}
	if m.OrderType == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("order_type")
	} else {
		data[i] = 0x80
		i++
		data[i] = 0x1
		i++
		i = encodeVarintOrder(data, i, uint64(*m.OrderType))
	}
	if m.Timeinforce == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("timeinforce")
	} else {
		data[i] = 0x88
		i++
		data[i] = 0x1
		i++
		i = encodeVarintOrder(data, i, uint64(*m.Timeinforce))
	}
	if m.LimitPrice != nil {
		data[i] = 0x91
		i++
		data[i] = 0x1
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(*m.LimitPrice)))
	}
	if m.Exchange != nil {
		data[i] = 0x9a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Exchange)))
		i += copy(data[i:], *m.Exchange)
	}
	if m.Description != nil {
		data[i] = 0xa2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Description)))
		i += copy(data[i:], *m.Description)
	}
	if m.FilledQuantity != nil {
		data[i] = 0xa9
		i++
		data[i] = 0x1
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(*m.FilledQuantity)))
	}
	if m.FilledAvgPrice != nil {
		data[i] = 0xb1
		i++
		data[i] = 0x1
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(*m.FilledAvgPrice)))
	}
	if m.OrderStatus != nil {
		data[i] = 0xb8
		i++
		data[i] = 0x1
		i++
		i = encodeVarintOrder(data, i, uint64(*m.OrderStatus))
	}
	if m.AccountId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("account_id")
	} else {
		data[i] = 0xf0
		i++
		data[i] = 0x1
		i++
		i = encodeVarintOrder(data, i, uint64(*m.AccountId))
	}
	if m.BrokerUserid != nil {
		data[i] = 0xfa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.BrokerUserid)))
		i += copy(data[i:], *m.BrokerUserid)
	}
	if m.BrokerAccount != nil {
		data[i] = 0x82
		i++
		data[i] = 0x2
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.BrokerAccount)))
		i += copy(data[i:], *m.BrokerAccount)
	}
	if m.MarketConnector != nil {
		data[i] = 0x8a
		i++
		data[i] = 0x2
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.MarketConnector)))
		i += copy(data[i:], *m.MarketConnector)
	}
	if m.SettlCcy != nil {
		data[i] = 0xc2
		i++
		data[i] = 0x2
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.SettlCcy)))
		i += copy(data[i:], *m.SettlCcy)
	}
	if m.HandleInst == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("handle_inst")
	} else {
		data[i] = 0xc8
		i++
		data[i] = 0x2
		i++
		i = encodeVarintOrder(data, i, uint64(*m.HandleInst))
	}
	if m.Algo != nil {
		data[i] = 0xd2
		i++
		data[i] = 0x2
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Algo)))
		i += copy(data[i:], *m.Algo)
	}
	if m.IsComplete != nil {
		data[i] = 0xd8
		i++
		data[i] = 0x2
		i++
		if *m.IsComplete {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.IsBooked != nil {
		data[i] = 0xe0
		i++
		data[i] = 0x2
		i++
		if *m.IsBooked {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.IsExpired != nil {
		data[i] = 0xe8
		i++
		data[i] = 0x2
		i++
		if *m.IsExpired {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.TradeBookingId != nil {
		data[i] = 0xf0
		i++
		data[i] = 0x2
		i++
		i = encodeVarintOrder(data, i, uint64(*m.TradeBookingId))
	}
	if m.OpenClose != nil {
		data[i] = 0xfa
		i++
		data[i] = 0x2
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.OpenClose)))
		i += copy(data[i:], *m.OpenClose)
	}
	if m.Source != nil {
		data[i] = 0x92
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Source)))
		i += copy(data[i:], *m.Source)
	}
	if m.Trader != nil {
		data[i] = 0x9a
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Trader)))
		i += copy(data[i:], *m.Trader)
	}
	if m.TraderId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("trader_id")
	} else {
		data[i] = 0xa0
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(*m.TraderId))
	}
	if m.Machine != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Machine)))
		i += copy(data[i:], *m.Machine)
	}
	if m.Memo != nil {
		data[i] = 0xb2
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Memo)))
		i += copy(data[i:], *m.Memo)
	}
	if m.CreateDatetime != nil {
		data[i] = 0xe2
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.CreateDatetime)))
		i += copy(data[i:], *m.CreateDatetime)
	}
	if m.SubmitDatetime != nil {
		data[i] = 0xea
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.SubmitDatetime)))
		i += copy(data[i:], *m.SubmitDatetime)
	}
	if len(m.Executions) > 0 {
		for _, msg := range m.Executions {
			data[i] = 0xb2
			i++
			data[i] = 0x4
			i++
			i = encodeVarintOrder(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Allocations) > 0 {
		for _, msg := range m.Allocations {
			data[i] = 0x82
			i++
			data[i] = 0x5
			i++
			i = encodeVarintOrder(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Execution) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Execution) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExecutionId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("execution_id")
	} else {
		data[i] = 0x8
		i++
		i = encodeVarintOrder(data, i, uint64(*m.ExecutionId))
	}
	if m.OrderId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("order_id")
	} else {
		data[i] = 0x10
		i++
		i = encodeVarintOrder(data, i, uint64(*m.OrderId))
	}
	if m.OrderKey != nil {
		data[i] = 0x18
		i++
		i = encodeVarintOrder(data, i, uint64(*m.OrderKey))
	}
	if m.ClientOrderId != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.ClientOrderId)))
		i += copy(data[i:], *m.ClientOrderId)
	}
	if m.BrokerOrderId != nil {
		data[i] = 0x32
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.BrokerOrderId)))
		i += copy(data[i:], *m.BrokerOrderId)
	}
	if m.BrokerExecId != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.BrokerExecId)))
		i += copy(data[i:], *m.BrokerExecId)
	}
	if m.PrevBrokerExecId != nil {
		data[i] = 0x42
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.PrevBrokerExecId)))
		i += copy(data[i:], *m.PrevBrokerExecId)
	}
	if m.CancelReplaceByExececutionId != nil {
		data[i] = 0x48
		i++
		i = encodeVarintOrder(data, i, uint64(*m.CancelReplaceByExececutionId))
	}
	if m.OrderStatus != nil {
		data[i] = 0x50
		i++
		i = encodeVarintOrder(data, i, uint64(*m.OrderStatus))
	}
	if m.ExecType != nil {
		data[i] = 0x58
		i++
		i = encodeVarintOrder(data, i, uint64(*m.ExecType))
	}
	if m.Quantity != nil {
		data[i] = 0xa1
		i++
		data[i] = 0x1
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(*m.Quantity)))
	}
	if m.Price != nil {
		data[i] = 0xa9
		i++
		data[i] = 0x1
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(*m.Price)))
	}
	if m.Text != nil {
		data[i] = 0xf2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Text)))
		i += copy(data[i:], *m.Text)
	}
	if m.Lastmkt != nil {
		data[i] = 0xfa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Lastmkt)))
		i += copy(data[i:], *m.Lastmkt)
	}
	if m.ExecBroker != nil {
		data[i] = 0x82
		i++
		data[i] = 0x2
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.ExecBroker)))
		i += copy(data[i:], *m.ExecBroker)
	}
	if m.LastLiquidity != nil {
		data[i] = 0x88
		i++
		data[i] = 0x2
		i++
		i = encodeVarintOrder(data, i, uint64(*m.LastLiquidity))
	}
	if m.CumQuantity != nil {
		data[i] = 0x91
		i++
		data[i] = 0x3
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(*m.CumQuantity)))
	}
	if m.AvgPrice != nil {
		data[i] = 0x99
		i++
		data[i] = 0x3
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(*m.AvgPrice)))
	}
	if m.CalcCumQuantity != nil {
		data[i] = 0xa1
		i++
		data[i] = 0x3
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(*m.CalcCumQuantity)))
	}
	if m.CalcAvgPrice != nil {
		data[i] = 0xa9
		i++
		data[i] = 0x3
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(*m.CalcAvgPrice)))
	}
	if m.BrokerExecDatetime != nil {
		data[i] = 0xe2
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.BrokerExecDatetime)))
		i += copy(data[i:], *m.BrokerExecDatetime)
	}
	if m.CreateDatetime != nil {
		data[i] = 0xea
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.CreateDatetime)))
		i += copy(data[i:], *m.CreateDatetime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Allocation) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Allocation) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AllocationId != nil {
		data[i] = 0x8
		i++
		i = encodeVarintOrder(data, i, uint64(*m.AllocationId))
	}
	if m.OrderKey != nil {
		data[i] = 0x10
		i++
		i = encodeVarintOrder(data, i, uint64(*m.OrderKey))
	}
	if m.StrategyId != nil {
		data[i] = 0x18
		i++
		i = encodeVarintOrder(data, i, uint64(*m.StrategyId))
	}
	if m.Quantity != nil {
		data[i] = 0x51
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(*m.Quantity)))
	}
	if m.Ratio != nil {
		data[i] = 0x59
		i++
		i = encodeFixed64Order(data, i, uint64(math.Float64bits(*m.Ratio)))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewOrderRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NewOrderRequest) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Order != nil {
		data[i] = 0xa
		i++
		i = encodeVarintOrder(data, i, uint64(m.Order.Size()))
		n1, err := m.Order.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewOrderResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NewOrderResponse) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != nil {
		data[i] = 0x8
		i++
		i = encodeVarintOrder(data, i, uint64(*m.ErrorCode))
	}
	if m.ErrorMessage != nil {
		data[i] = 0x12
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.ErrorMessage)))
		i += copy(data[i:], *m.ErrorMessage)
	}
	if m.Order != nil {
		data[i] = 0x52
		i++
		i = encodeVarintOrder(data, i, uint64(m.Order.Size()))
		n2, err := m.Order.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CancelOrderRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CancelOrderRequest) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientGuid == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("client_guid")
	} else {
		data[i] = 0xa
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.ClientGuid)))
		i += copy(data[i:], *m.ClientGuid)
	}
	if m.OrderId != nil {
		data[i] = 0x10
		i++
		i = encodeVarintOrder(data, i, uint64(*m.OrderId))
	}
	if m.OrderKey == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("order_key")
	} else {
		data[i] = 0x18
		i++
		i = encodeVarintOrder(data, i, uint64(*m.OrderKey))
	}
	if m.Version != nil {
		data[i] = 0x20
		i++
		i = encodeVarintOrder(data, i, uint64(*m.Version))
	}
	if m.Source != nil {
		data[i] = 0x92
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Source)))
		i += copy(data[i:], *m.Source)
	}
	if m.Trader != nil {
		data[i] = 0x9a
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Trader)))
		i += copy(data[i:], *m.Trader)
	}
	if m.TraderId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("trader_id")
	} else {
		data[i] = 0xa0
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(*m.TraderId))
	}
	if m.Machine != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Machine)))
		i += copy(data[i:], *m.Machine)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CancelOrderResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CancelOrderResponse) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != nil {
		data[i] = 0x8
		i++
		i = encodeVarintOrder(data, i, uint64(*m.ErrorCode))
	}
	if m.ErrorMessage != nil {
		data[i] = 0x12
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.ErrorMessage)))
		i += copy(data[i:], *m.ErrorMessage)
	}
	if m.Order != nil {
		data[i] = 0x52
		i++
		i = encodeVarintOrder(data, i, uint64(m.Order.Size()))
		n3, err := m.Order.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReplaceOrderRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReplaceOrderRequest) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Order != nil {
		data[i] = 0xa
		i++
		i = encodeVarintOrder(data, i, uint64(m.Order.Size()))
		n4, err := m.Order.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Source != nil {
		data[i] = 0x92
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Source)))
		i += copy(data[i:], *m.Source)
	}
	if m.Trader != nil {
		data[i] = 0x9a
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Trader)))
		i += copy(data[i:], *m.Trader)
	}
	if m.TraderId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("trader_id")
	} else {
		data[i] = 0xa0
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(*m.TraderId))
	}
	if m.Machine != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x3
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.Machine)))
		i += copy(data[i:], *m.Machine)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReplaceOrderResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReplaceOrderResponse) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != nil {
		data[i] = 0x8
		i++
		i = encodeVarintOrder(data, i, uint64(*m.ErrorCode))
	}
	if m.ErrorMessage != nil {
		data[i] = 0x12
		i++
		i = encodeVarintOrder(data, i, uint64(len(*m.ErrorMessage)))
		i += copy(data[i:], *m.ErrorMessage)
	}
	if m.Order != nil {
		data[i] = 0x52
		i++
		i = encodeVarintOrder(data, i, uint64(m.Order.Size()))
		n5, err := m.Order.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Order(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Order(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintOrder(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (this *Order) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&order.Order{` +
		`ClientGuid:` + valueToGoStringOrder(this.ClientGuid, "string"),
		`OrderId:` + valueToGoStringOrder(this.OrderId, "int32"),
		`OrderKey:` + valueToGoStringOrder(this.OrderKey, "int32"),
		`Version:` + valueToGoStringOrder(this.Version, "int32"),
		`Instruction:` + valueToGoStringOrder(this.Instruction, "order.Order_OrderInstruction"),
		`Side:` + valueToGoStringOrder(this.Side, "order.Side"),
		`Quantity:` + valueToGoStringOrder(this.Quantity, "float64"),
		`Symbol:` + valueToGoStringOrder(this.Symbol, "string"),
		`OrderType:` + valueToGoStringOrder(this.OrderType, "order.OrderType"),
		`Timeinforce:` + valueToGoStringOrder(this.Timeinforce, "order.TimeInForce"),
		`LimitPrice:` + valueToGoStringOrder(this.LimitPrice, "float64"),
		`Exchange:` + valueToGoStringOrder(this.Exchange, "string"),
		`Description:` + valueToGoStringOrder(this.Description, "string"),
		`FilledQuantity:` + valueToGoStringOrder(this.FilledQuantity, "float64"),
		`FilledAvgPrice:` + valueToGoStringOrder(this.FilledAvgPrice, "float64"),
		`OrderStatus:` + valueToGoStringOrder(this.OrderStatus, "order.OrderStatus"),
		`AccountId:` + valueToGoStringOrder(this.AccountId, "int32"),
		`BrokerUserid:` + valueToGoStringOrder(this.BrokerUserid, "string"),
		`BrokerAccount:` + valueToGoStringOrder(this.BrokerAccount, "string"),
		`MarketConnector:` + valueToGoStringOrder(this.MarketConnector, "string"),
		`SettlCcy:` + valueToGoStringOrder(this.SettlCcy, "string"),
		`HandleInst:` + valueToGoStringOrder(this.HandleInst, "order.HandlInst"),
		`Algo:` + valueToGoStringOrder(this.Algo, "string"),
		`IsComplete:` + valueToGoStringOrder(this.IsComplete, "bool"),
		`IsBooked:` + valueToGoStringOrder(this.IsBooked, "bool"),
		`IsExpired:` + valueToGoStringOrder(this.IsExpired, "bool"),
		`TradeBookingId:` + valueToGoStringOrder(this.TradeBookingId, "int32"),
		`OpenClose:` + valueToGoStringOrder(this.OpenClose, "string"),
		`Source:` + valueToGoStringOrder(this.Source, "string"),
		`Trader:` + valueToGoStringOrder(this.Trader, "string"),
		`TraderId:` + valueToGoStringOrder(this.TraderId, "int32"),
		`Machine:` + valueToGoStringOrder(this.Machine, "string"),
		`Memo:` + valueToGoStringOrder(this.Memo, "string"),
		`CreateDatetime:` + valueToGoStringOrder(this.CreateDatetime, "string"),
		`SubmitDatetime:` + valueToGoStringOrder(this.SubmitDatetime, "string"),
		`Executions:` + fmt.Sprintf("%#v", this.Executions),
		`Allocations:` + fmt.Sprintf("%#v", this.Allocations),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Execution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&order.Execution{` +
		`ExecutionId:` + valueToGoStringOrder(this.ExecutionId, "int32"),
		`OrderId:` + valueToGoStringOrder(this.OrderId, "int32"),
		`OrderKey:` + valueToGoStringOrder(this.OrderKey, "int32"),
		`ClientOrderId:` + valueToGoStringOrder(this.ClientOrderId, "string"),
		`BrokerOrderId:` + valueToGoStringOrder(this.BrokerOrderId, "string"),
		`BrokerExecId:` + valueToGoStringOrder(this.BrokerExecId, "string"),
		`PrevBrokerExecId:` + valueToGoStringOrder(this.PrevBrokerExecId, "string"),
		`CancelReplaceByExececutionId:` + valueToGoStringOrder(this.CancelReplaceByExececutionId, "int32"),
		`OrderStatus:` + valueToGoStringOrder(this.OrderStatus, "order.OrderStatus"),
		`ExecType:` + valueToGoStringOrder(this.ExecType, "order.Execution_ExecType"),
		`Quantity:` + valueToGoStringOrder(this.Quantity, "float64"),
		`Price:` + valueToGoStringOrder(this.Price, "float64"),
		`Text:` + valueToGoStringOrder(this.Text, "string"),
		`Lastmkt:` + valueToGoStringOrder(this.Lastmkt, "string"),
		`ExecBroker:` + valueToGoStringOrder(this.ExecBroker, "string"),
		`LastLiquidity:` + valueToGoStringOrder(this.LastLiquidity, "order.LastLiquidityInd"),
		`CumQuantity:` + valueToGoStringOrder(this.CumQuantity, "float64"),
		`AvgPrice:` + valueToGoStringOrder(this.AvgPrice, "float64"),
		`CalcCumQuantity:` + valueToGoStringOrder(this.CalcCumQuantity, "float64"),
		`CalcAvgPrice:` + valueToGoStringOrder(this.CalcAvgPrice, "float64"),
		`BrokerExecDatetime:` + valueToGoStringOrder(this.BrokerExecDatetime, "string"),
		`CreateDatetime:` + valueToGoStringOrder(this.CreateDatetime, "string"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Allocation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&order.Allocation{` +
		`AllocationId:` + valueToGoStringOrder(this.AllocationId, "int32"),
		`OrderKey:` + valueToGoStringOrder(this.OrderKey, "int32"),
		`StrategyId:` + valueToGoStringOrder(this.StrategyId, "int32"),
		`Quantity:` + valueToGoStringOrder(this.Quantity, "float64"),
		`Ratio:` + valueToGoStringOrder(this.Ratio, "float64"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *NewOrderRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&order.NewOrderRequest{` +
		`Order:` + fmt.Sprintf("%#v", this.Order),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *NewOrderResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&order.NewOrderResponse{` +
		`ErrorCode:` + valueToGoStringOrder(this.ErrorCode, "int32"),
		`ErrorMessage:` + valueToGoStringOrder(this.ErrorMessage, "string"),
		`Order:` + fmt.Sprintf("%#v", this.Order),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *CancelOrderRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&order.CancelOrderRequest{` +
		`ClientGuid:` + valueToGoStringOrder(this.ClientGuid, "string"),
		`OrderId:` + valueToGoStringOrder(this.OrderId, "int32"),
		`OrderKey:` + valueToGoStringOrder(this.OrderKey, "int32"),
		`Version:` + valueToGoStringOrder(this.Version, "int32"),
		`Source:` + valueToGoStringOrder(this.Source, "string"),
		`Trader:` + valueToGoStringOrder(this.Trader, "string"),
		`TraderId:` + valueToGoStringOrder(this.TraderId, "int32"),
		`Machine:` + valueToGoStringOrder(this.Machine, "string"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *CancelOrderResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&order.CancelOrderResponse{` +
		`ErrorCode:` + valueToGoStringOrder(this.ErrorCode, "int32"),
		`ErrorMessage:` + valueToGoStringOrder(this.ErrorMessage, "string"),
		`Order:` + fmt.Sprintf("%#v", this.Order),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *ReplaceOrderRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&order.ReplaceOrderRequest{` +
		`Order:` + fmt.Sprintf("%#v", this.Order),
		`Source:` + valueToGoStringOrder(this.Source, "string"),
		`Trader:` + valueToGoStringOrder(this.Trader, "string"),
		`TraderId:` + valueToGoStringOrder(this.TraderId, "int32"),
		`Machine:` + valueToGoStringOrder(this.Machine, "string"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *ReplaceOrderResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&order.ReplaceOrderResponse{` +
		`ErrorCode:` + valueToGoStringOrder(this.ErrorCode, "int32"),
		`ErrorMessage:` + valueToGoStringOrder(this.ErrorMessage, "string"),
		`Order:` + fmt.Sprintf("%#v", this.Order),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func valueToGoStringOrder(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringOrder(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func (this *Order) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Order)
	if !ok {
		return fmt.Errorf("that is not of type *Order")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Order but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Orderbut is not nil && this == nil")
	}
	if this.ClientGuid != nil && that1.ClientGuid != nil {
		if *this.ClientGuid != *that1.ClientGuid {
			return fmt.Errorf("ClientGuid this(%v) Not Equal that(%v)", *this.ClientGuid, *that1.ClientGuid)
		}
	} else if this.ClientGuid != nil {
		return fmt.Errorf("this.ClientGuid == nil && that.ClientGuid != nil")
	} else if that1.ClientGuid != nil {
		return fmt.Errorf("ClientGuid this(%v) Not Equal that(%v)", this.ClientGuid, that1.ClientGuid)
	}
	if this.OrderId != nil && that1.OrderId != nil {
		if *this.OrderId != *that1.OrderId {
			return fmt.Errorf("OrderId this(%v) Not Equal that(%v)", *this.OrderId, *that1.OrderId)
		}
	} else if this.OrderId != nil {
		return fmt.Errorf("this.OrderId == nil && that.OrderId != nil")
	} else if that1.OrderId != nil {
		return fmt.Errorf("OrderId this(%v) Not Equal that(%v)", this.OrderId, that1.OrderId)
	}
	if this.OrderKey != nil && that1.OrderKey != nil {
		if *this.OrderKey != *that1.OrderKey {
			return fmt.Errorf("OrderKey this(%v) Not Equal that(%v)", *this.OrderKey, *that1.OrderKey)
		}
	} else if this.OrderKey != nil {
		return fmt.Errorf("this.OrderKey == nil && that.OrderKey != nil")
	} else if that1.OrderKey != nil {
		return fmt.Errorf("OrderKey this(%v) Not Equal that(%v)", this.OrderKey, that1.OrderKey)
	}
	if this.Version != nil && that1.Version != nil {
		if *this.Version != *that1.Version {
			return fmt.Errorf("Version this(%v) Not Equal that(%v)", *this.Version, *that1.Version)
		}
	} else if this.Version != nil {
		return fmt.Errorf("this.Version == nil && that.Version != nil")
	} else if that1.Version != nil {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if this.Instruction != nil && that1.Instruction != nil {
		if *this.Instruction != *that1.Instruction {
			return fmt.Errorf("Instruction this(%v) Not Equal that(%v)", *this.Instruction, *that1.Instruction)
		}
	} else if this.Instruction != nil {
		return fmt.Errorf("this.Instruction == nil && that.Instruction != nil")
	} else if that1.Instruction != nil {
		return fmt.Errorf("Instruction this(%v) Not Equal that(%v)", this.Instruction, that1.Instruction)
	}
	if this.Side != nil && that1.Side != nil {
		if *this.Side != *that1.Side {
			return fmt.Errorf("Side this(%v) Not Equal that(%v)", *this.Side, *that1.Side)
		}
	} else if this.Side != nil {
		return fmt.Errorf("this.Side == nil && that.Side != nil")
	} else if that1.Side != nil {
		return fmt.Errorf("Side this(%v) Not Equal that(%v)", this.Side, that1.Side)
	}
	if this.Quantity != nil && that1.Quantity != nil {
		if *this.Quantity != *that1.Quantity {
			return fmt.Errorf("Quantity this(%v) Not Equal that(%v)", *this.Quantity, *that1.Quantity)
		}
	} else if this.Quantity != nil {
		return fmt.Errorf("this.Quantity == nil && that.Quantity != nil")
	} else if that1.Quantity != nil {
		return fmt.Errorf("Quantity this(%v) Not Equal that(%v)", this.Quantity, that1.Quantity)
	}
	if this.Symbol != nil && that1.Symbol != nil {
		if *this.Symbol != *that1.Symbol {
			return fmt.Errorf("Symbol this(%v) Not Equal that(%v)", *this.Symbol, *that1.Symbol)
		}
	} else if this.Symbol != nil {
		return fmt.Errorf("this.Symbol == nil && that.Symbol != nil")
	} else if that1.Symbol != nil {
		return fmt.Errorf("Symbol this(%v) Not Equal that(%v)", this.Symbol, that1.Symbol)
	}
	if this.OrderType != nil && that1.OrderType != nil {
		if *this.OrderType != *that1.OrderType {
			return fmt.Errorf("OrderType this(%v) Not Equal that(%v)", *this.OrderType, *that1.OrderType)
		}
	} else if this.OrderType != nil {
		return fmt.Errorf("this.OrderType == nil && that.OrderType != nil")
	} else if that1.OrderType != nil {
		return fmt.Errorf("OrderType this(%v) Not Equal that(%v)", this.OrderType, that1.OrderType)
	}
	if this.Timeinforce != nil && that1.Timeinforce != nil {
		if *this.Timeinforce != *that1.Timeinforce {
			return fmt.Errorf("Timeinforce this(%v) Not Equal that(%v)", *this.Timeinforce, *that1.Timeinforce)
		}
	} else if this.Timeinforce != nil {
		return fmt.Errorf("this.Timeinforce == nil && that.Timeinforce != nil")
	} else if that1.Timeinforce != nil {
		return fmt.Errorf("Timeinforce this(%v) Not Equal that(%v)", this.Timeinforce, that1.Timeinforce)
	}
	if this.LimitPrice != nil && that1.LimitPrice != nil {
		if *this.LimitPrice != *that1.LimitPrice {
			return fmt.Errorf("LimitPrice this(%v) Not Equal that(%v)", *this.LimitPrice, *that1.LimitPrice)
		}
	} else if this.LimitPrice != nil {
		return fmt.Errorf("this.LimitPrice == nil && that.LimitPrice != nil")
	} else if that1.LimitPrice != nil {
		return fmt.Errorf("LimitPrice this(%v) Not Equal that(%v)", this.LimitPrice, that1.LimitPrice)
	}
	if this.Exchange != nil && that1.Exchange != nil {
		if *this.Exchange != *that1.Exchange {
			return fmt.Errorf("Exchange this(%v) Not Equal that(%v)", *this.Exchange, *that1.Exchange)
		}
	} else if this.Exchange != nil {
		return fmt.Errorf("this.Exchange == nil && that.Exchange != nil")
	} else if that1.Exchange != nil {
		return fmt.Errorf("Exchange this(%v) Not Equal that(%v)", this.Exchange, that1.Exchange)
	}
	if this.Description != nil && that1.Description != nil {
		if *this.Description != *that1.Description {
			return fmt.Errorf("Description this(%v) Not Equal that(%v)", *this.Description, *that1.Description)
		}
	} else if this.Description != nil {
		return fmt.Errorf("this.Description == nil && that.Description != nil")
	} else if that1.Description != nil {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if this.FilledQuantity != nil && that1.FilledQuantity != nil {
		if *this.FilledQuantity != *that1.FilledQuantity {
			return fmt.Errorf("FilledQuantity this(%v) Not Equal that(%v)", *this.FilledQuantity, *that1.FilledQuantity)
		}
	} else if this.FilledQuantity != nil {
		return fmt.Errorf("this.FilledQuantity == nil && that.FilledQuantity != nil")
	} else if that1.FilledQuantity != nil {
		return fmt.Errorf("FilledQuantity this(%v) Not Equal that(%v)", this.FilledQuantity, that1.FilledQuantity)
	}
	if this.FilledAvgPrice != nil && that1.FilledAvgPrice != nil {
		if *this.FilledAvgPrice != *that1.FilledAvgPrice {
			return fmt.Errorf("FilledAvgPrice this(%v) Not Equal that(%v)", *this.FilledAvgPrice, *that1.FilledAvgPrice)
		}
	} else if this.FilledAvgPrice != nil {
		return fmt.Errorf("this.FilledAvgPrice == nil && that.FilledAvgPrice != nil")
	} else if that1.FilledAvgPrice != nil {
		return fmt.Errorf("FilledAvgPrice this(%v) Not Equal that(%v)", this.FilledAvgPrice, that1.FilledAvgPrice)
	}
	if this.OrderStatus != nil && that1.OrderStatus != nil {
		if *this.OrderStatus != *that1.OrderStatus {
			return fmt.Errorf("OrderStatus this(%v) Not Equal that(%v)", *this.OrderStatus, *that1.OrderStatus)
		}
	} else if this.OrderStatus != nil {
		return fmt.Errorf("this.OrderStatus == nil && that.OrderStatus != nil")
	} else if that1.OrderStatus != nil {
		return fmt.Errorf("OrderStatus this(%v) Not Equal that(%v)", this.OrderStatus, that1.OrderStatus)
	}
	if this.AccountId != nil && that1.AccountId != nil {
		if *this.AccountId != *that1.AccountId {
			return fmt.Errorf("AccountId this(%v) Not Equal that(%v)", *this.AccountId, *that1.AccountId)
		}
	} else if this.AccountId != nil {
		return fmt.Errorf("this.AccountId == nil && that.AccountId != nil")
	} else if that1.AccountId != nil {
		return fmt.Errorf("AccountId this(%v) Not Equal that(%v)", this.AccountId, that1.AccountId)
	}
	if this.BrokerUserid != nil && that1.BrokerUserid != nil {
		if *this.BrokerUserid != *that1.BrokerUserid {
			return fmt.Errorf("BrokerUserid this(%v) Not Equal that(%v)", *this.BrokerUserid, *that1.BrokerUserid)
		}
	} else if this.BrokerUserid != nil {
		return fmt.Errorf("this.BrokerUserid == nil && that.BrokerUserid != nil")
	} else if that1.BrokerUserid != nil {
		return fmt.Errorf("BrokerUserid this(%v) Not Equal that(%v)", this.BrokerUserid, that1.BrokerUserid)
	}
	if this.BrokerAccount != nil && that1.BrokerAccount != nil {
		if *this.BrokerAccount != *that1.BrokerAccount {
			return fmt.Errorf("BrokerAccount this(%v) Not Equal that(%v)", *this.BrokerAccount, *that1.BrokerAccount)
		}
	} else if this.BrokerAccount != nil {
		return fmt.Errorf("this.BrokerAccount == nil && that.BrokerAccount != nil")
	} else if that1.BrokerAccount != nil {
		return fmt.Errorf("BrokerAccount this(%v) Not Equal that(%v)", this.BrokerAccount, that1.BrokerAccount)
	}
	if this.MarketConnector != nil && that1.MarketConnector != nil {
		if *this.MarketConnector != *that1.MarketConnector {
			return fmt.Errorf("MarketConnector this(%v) Not Equal that(%v)", *this.MarketConnector, *that1.MarketConnector)
		}
	} else if this.MarketConnector != nil {
		return fmt.Errorf("this.MarketConnector == nil && that.MarketConnector != nil")
	} else if that1.MarketConnector != nil {
		return fmt.Errorf("MarketConnector this(%v) Not Equal that(%v)", this.MarketConnector, that1.MarketConnector)
	}
	if this.SettlCcy != nil && that1.SettlCcy != nil {
		if *this.SettlCcy != *that1.SettlCcy {
			return fmt.Errorf("SettlCcy this(%v) Not Equal that(%v)", *this.SettlCcy, *that1.SettlCcy)
		}
	} else if this.SettlCcy != nil {
		return fmt.Errorf("this.SettlCcy == nil && that.SettlCcy != nil")
	} else if that1.SettlCcy != nil {
		return fmt.Errorf("SettlCcy this(%v) Not Equal that(%v)", this.SettlCcy, that1.SettlCcy)
	}
	if this.HandleInst != nil && that1.HandleInst != nil {
		if *this.HandleInst != *that1.HandleInst {
			return fmt.Errorf("HandleInst this(%v) Not Equal that(%v)", *this.HandleInst, *that1.HandleInst)
		}
	} else if this.HandleInst != nil {
		return fmt.Errorf("this.HandleInst == nil && that.HandleInst != nil")
	} else if that1.HandleInst != nil {
		return fmt.Errorf("HandleInst this(%v) Not Equal that(%v)", this.HandleInst, that1.HandleInst)
	}
	if this.Algo != nil && that1.Algo != nil {
		if *this.Algo != *that1.Algo {
			return fmt.Errorf("Algo this(%v) Not Equal that(%v)", *this.Algo, *that1.Algo)
		}
	} else if this.Algo != nil {
		return fmt.Errorf("this.Algo == nil && that.Algo != nil")
	} else if that1.Algo != nil {
		return fmt.Errorf("Algo this(%v) Not Equal that(%v)", this.Algo, that1.Algo)
	}
	if this.IsComplete != nil && that1.IsComplete != nil {
		if *this.IsComplete != *that1.IsComplete {
			return fmt.Errorf("IsComplete this(%v) Not Equal that(%v)", *this.IsComplete, *that1.IsComplete)
		}
	} else if this.IsComplete != nil {
		return fmt.Errorf("this.IsComplete == nil && that.IsComplete != nil")
	} else if that1.IsComplete != nil {
		return fmt.Errorf("IsComplete this(%v) Not Equal that(%v)", this.IsComplete, that1.IsComplete)
	}
	if this.IsBooked != nil && that1.IsBooked != nil {
		if *this.IsBooked != *that1.IsBooked {
			return fmt.Errorf("IsBooked this(%v) Not Equal that(%v)", *this.IsBooked, *that1.IsBooked)
		}
	} else if this.IsBooked != nil {
		return fmt.Errorf("this.IsBooked == nil && that.IsBooked != nil")
	} else if that1.IsBooked != nil {
		return fmt.Errorf("IsBooked this(%v) Not Equal that(%v)", this.IsBooked, that1.IsBooked)
	}
	if this.IsExpired != nil && that1.IsExpired != nil {
		if *this.IsExpired != *that1.IsExpired {
			return fmt.Errorf("IsExpired this(%v) Not Equal that(%v)", *this.IsExpired, *that1.IsExpired)
		}
	} else if this.IsExpired != nil {
		return fmt.Errorf("this.IsExpired == nil && that.IsExpired != nil")
	} else if that1.IsExpired != nil {
		return fmt.Errorf("IsExpired this(%v) Not Equal that(%v)", this.IsExpired, that1.IsExpired)
	}
	if this.TradeBookingId != nil && that1.TradeBookingId != nil {
		if *this.TradeBookingId != *that1.TradeBookingId {
			return fmt.Errorf("TradeBookingId this(%v) Not Equal that(%v)", *this.TradeBookingId, *that1.TradeBookingId)
		}
	} else if this.TradeBookingId != nil {
		return fmt.Errorf("this.TradeBookingId == nil && that.TradeBookingId != nil")
	} else if that1.TradeBookingId != nil {
		return fmt.Errorf("TradeBookingId this(%v) Not Equal that(%v)", this.TradeBookingId, that1.TradeBookingId)
	}
	if this.OpenClose != nil && that1.OpenClose != nil {
		if *this.OpenClose != *that1.OpenClose {
			return fmt.Errorf("OpenClose this(%v) Not Equal that(%v)", *this.OpenClose, *that1.OpenClose)
		}
	} else if this.OpenClose != nil {
		return fmt.Errorf("this.OpenClose == nil && that.OpenClose != nil")
	} else if that1.OpenClose != nil {
		return fmt.Errorf("OpenClose this(%v) Not Equal that(%v)", this.OpenClose, that1.OpenClose)
	}
	if this.Source != nil && that1.Source != nil {
		if *this.Source != *that1.Source {
			return fmt.Errorf("Source this(%v) Not Equal that(%v)", *this.Source, *that1.Source)
		}
	} else if this.Source != nil {
		return fmt.Errorf("this.Source == nil && that.Source != nil")
	} else if that1.Source != nil {
		return fmt.Errorf("Source this(%v) Not Equal that(%v)", this.Source, that1.Source)
	}
	if this.Trader != nil && that1.Trader != nil {
		if *this.Trader != *that1.Trader {
			return fmt.Errorf("Trader this(%v) Not Equal that(%v)", *this.Trader, *that1.Trader)
		}
	} else if this.Trader != nil {
		return fmt.Errorf("this.Trader == nil && that.Trader != nil")
	} else if that1.Trader != nil {
		return fmt.Errorf("Trader this(%v) Not Equal that(%v)", this.Trader, that1.Trader)
	}
	if this.TraderId != nil && that1.TraderId != nil {
		if *this.TraderId != *that1.TraderId {
			return fmt.Errorf("TraderId this(%v) Not Equal that(%v)", *this.TraderId, *that1.TraderId)
		}
	} else if this.TraderId != nil {
		return fmt.Errorf("this.TraderId == nil && that.TraderId != nil")
	} else if that1.TraderId != nil {
		return fmt.Errorf("TraderId this(%v) Not Equal that(%v)", this.TraderId, that1.TraderId)
	}
	if this.Machine != nil && that1.Machine != nil {
		if *this.Machine != *that1.Machine {
			return fmt.Errorf("Machine this(%v) Not Equal that(%v)", *this.Machine, *that1.Machine)
		}
	} else if this.Machine != nil {
		return fmt.Errorf("this.Machine == nil && that.Machine != nil")
	} else if that1.Machine != nil {
		return fmt.Errorf("Machine this(%v) Not Equal that(%v)", this.Machine, that1.Machine)
	}
	if this.Memo != nil && that1.Memo != nil {
		if *this.Memo != *that1.Memo {
			return fmt.Errorf("Memo this(%v) Not Equal that(%v)", *this.Memo, *that1.Memo)
		}
	} else if this.Memo != nil {
		return fmt.Errorf("this.Memo == nil && that.Memo != nil")
	} else if that1.Memo != nil {
		return fmt.Errorf("Memo this(%v) Not Equal that(%v)", this.Memo, that1.Memo)
	}
	if this.CreateDatetime != nil && that1.CreateDatetime != nil {
		if *this.CreateDatetime != *that1.CreateDatetime {
			return fmt.Errorf("CreateDatetime this(%v) Not Equal that(%v)", *this.CreateDatetime, *that1.CreateDatetime)
		}
	} else if this.CreateDatetime != nil {
		return fmt.Errorf("this.CreateDatetime == nil && that.CreateDatetime != nil")
	} else if that1.CreateDatetime != nil {
		return fmt.Errorf("CreateDatetime this(%v) Not Equal that(%v)", this.CreateDatetime, that1.CreateDatetime)
	}
	if this.SubmitDatetime != nil && that1.SubmitDatetime != nil {
		if *this.SubmitDatetime != *that1.SubmitDatetime {
			return fmt.Errorf("SubmitDatetime this(%v) Not Equal that(%v)", *this.SubmitDatetime, *that1.SubmitDatetime)
		}
	} else if this.SubmitDatetime != nil {
		return fmt.Errorf("this.SubmitDatetime == nil && that.SubmitDatetime != nil")
	} else if that1.SubmitDatetime != nil {
		return fmt.Errorf("SubmitDatetime this(%v) Not Equal that(%v)", this.SubmitDatetime, that1.SubmitDatetime)
	}
	if len(this.Executions) != len(that1.Executions) {
		return fmt.Errorf("Executions this(%v) Not Equal that(%v)", len(this.Executions), len(that1.Executions))
	}
	for i := range this.Executions {
		if !this.Executions[i].Equal(that1.Executions[i]) {
			return fmt.Errorf("Executions this[%v](%v) Not Equal that[%v](%v)", i, this.Executions[i], i, that1.Executions[i])
		}
	}
	if len(this.Allocations) != len(that1.Allocations) {
		return fmt.Errorf("Allocations this(%v) Not Equal that(%v)", len(this.Allocations), len(that1.Allocations))
	}
	for i := range this.Allocations {
		if !this.Allocations[i].Equal(that1.Allocations[i]) {
			return fmt.Errorf("Allocations this[%v](%v) Not Equal that[%v](%v)", i, this.Allocations[i], i, that1.Allocations[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Order) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Order)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ClientGuid != nil && that1.ClientGuid != nil {
		if *this.ClientGuid != *that1.ClientGuid {
			return false
		}
	} else if this.ClientGuid != nil {
		return false
	} else if that1.ClientGuid != nil {
		return false
	}
	if this.OrderId != nil && that1.OrderId != nil {
		if *this.OrderId != *that1.OrderId {
			return false
		}
	} else if this.OrderId != nil {
		return false
	} else if that1.OrderId != nil {
		return false
	}
	if this.OrderKey != nil && that1.OrderKey != nil {
		if *this.OrderKey != *that1.OrderKey {
			return false
		}
	} else if this.OrderKey != nil {
		return false
	} else if that1.OrderKey != nil {
		return false
	}
	if this.Version != nil && that1.Version != nil {
		if *this.Version != *that1.Version {
			return false
		}
	} else if this.Version != nil {
		return false
	} else if that1.Version != nil {
		return false
	}
	if this.Instruction != nil && that1.Instruction != nil {
		if *this.Instruction != *that1.Instruction {
			return false
		}
	} else if this.Instruction != nil {
		return false
	} else if that1.Instruction != nil {
		return false
	}
	if this.Side != nil && that1.Side != nil {
		if *this.Side != *that1.Side {
			return false
		}
	} else if this.Side != nil {
		return false
	} else if that1.Side != nil {
		return false
	}
	if this.Quantity != nil && that1.Quantity != nil {
		if *this.Quantity != *that1.Quantity {
			return false
		}
	} else if this.Quantity != nil {
		return false
	} else if that1.Quantity != nil {
		return false
	}
	if this.Symbol != nil && that1.Symbol != nil {
		if *this.Symbol != *that1.Symbol {
			return false
		}
	} else if this.Symbol != nil {
		return false
	} else if that1.Symbol != nil {
		return false
	}
	if this.OrderType != nil && that1.OrderType != nil {
		if *this.OrderType != *that1.OrderType {
			return false
		}
	} else if this.OrderType != nil {
		return false
	} else if that1.OrderType != nil {
		return false
	}
	if this.Timeinforce != nil && that1.Timeinforce != nil {
		if *this.Timeinforce != *that1.Timeinforce {
			return false
		}
	} else if this.Timeinforce != nil {
		return false
	} else if that1.Timeinforce != nil {
		return false
	}
	if this.LimitPrice != nil && that1.LimitPrice != nil {
		if *this.LimitPrice != *that1.LimitPrice {
			return false
		}
	} else if this.LimitPrice != nil {
		return false
	} else if that1.LimitPrice != nil {
		return false
	}
	if this.Exchange != nil && that1.Exchange != nil {
		if *this.Exchange != *that1.Exchange {
			return false
		}
	} else if this.Exchange != nil {
		return false
	} else if that1.Exchange != nil {
		return false
	}
	if this.Description != nil && that1.Description != nil {
		if *this.Description != *that1.Description {
			return false
		}
	} else if this.Description != nil {
		return false
	} else if that1.Description != nil {
		return false
	}
	if this.FilledQuantity != nil && that1.FilledQuantity != nil {
		if *this.FilledQuantity != *that1.FilledQuantity {
			return false
		}
	} else if this.FilledQuantity != nil {
		return false
	} else if that1.FilledQuantity != nil {
		return false
	}
	if this.FilledAvgPrice != nil && that1.FilledAvgPrice != nil {
		if *this.FilledAvgPrice != *that1.FilledAvgPrice {
			return false
		}
	} else if this.FilledAvgPrice != nil {
		return false
	} else if that1.FilledAvgPrice != nil {
		return false
	}
	if this.OrderStatus != nil && that1.OrderStatus != nil {
		if *this.OrderStatus != *that1.OrderStatus {
			return false
		}
	} else if this.OrderStatus != nil {
		return false
	} else if that1.OrderStatus != nil {
		return false
	}
	if this.AccountId != nil && that1.AccountId != nil {
		if *this.AccountId != *that1.AccountId {
			return false
		}
	} else if this.AccountId != nil {
		return false
	} else if that1.AccountId != nil {
		return false
	}
	if this.BrokerUserid != nil && that1.BrokerUserid != nil {
		if *this.BrokerUserid != *that1.BrokerUserid {
			return false
		}
	} else if this.BrokerUserid != nil {
		return false
	} else if that1.BrokerUserid != nil {
		return false
	}
	if this.BrokerAccount != nil && that1.BrokerAccount != nil {
		if *this.BrokerAccount != *that1.BrokerAccount {
			return false
		}
	} else if this.BrokerAccount != nil {
		return false
	} else if that1.BrokerAccount != nil {
		return false
	}
	if this.MarketConnector != nil && that1.MarketConnector != nil {
		if *this.MarketConnector != *that1.MarketConnector {
			return false
		}
	} else if this.MarketConnector != nil {
		return false
	} else if that1.MarketConnector != nil {
		return false
	}
	if this.SettlCcy != nil && that1.SettlCcy != nil {
		if *this.SettlCcy != *that1.SettlCcy {
			return false
		}
	} else if this.SettlCcy != nil {
		return false
	} else if that1.SettlCcy != nil {
		return false
	}
	if this.HandleInst != nil && that1.HandleInst != nil {
		if *this.HandleInst != *that1.HandleInst {
			return false
		}
	} else if this.HandleInst != nil {
		return false
	} else if that1.HandleInst != nil {
		return false
	}
	if this.Algo != nil && that1.Algo != nil {
		if *this.Algo != *that1.Algo {
			return false
		}
	} else if this.Algo != nil {
		return false
	} else if that1.Algo != nil {
		return false
	}
	if this.IsComplete != nil && that1.IsComplete != nil {
		if *this.IsComplete != *that1.IsComplete {
			return false
		}
	} else if this.IsComplete != nil {
		return false
	} else if that1.IsComplete != nil {
		return false
	}
	if this.IsBooked != nil && that1.IsBooked != nil {
		if *this.IsBooked != *that1.IsBooked {
			return false
		}
	} else if this.IsBooked != nil {
		return false
	} else if that1.IsBooked != nil {
		return false
	}
	if this.IsExpired != nil && that1.IsExpired != nil {
		if *this.IsExpired != *that1.IsExpired {
			return false
		}
	} else if this.IsExpired != nil {
		return false
	} else if that1.IsExpired != nil {
		return false
	}
	if this.TradeBookingId != nil && that1.TradeBookingId != nil {
		if *this.TradeBookingId != *that1.TradeBookingId {
			return false
		}
	} else if this.TradeBookingId != nil {
		return false
	} else if that1.TradeBookingId != nil {
		return false
	}
	if this.OpenClose != nil && that1.OpenClose != nil {
		if *this.OpenClose != *that1.OpenClose {
			return false
		}
	} else if this.OpenClose != nil {
		return false
	} else if that1.OpenClose != nil {
		return false
	}
	if this.Source != nil && that1.Source != nil {
		if *this.Source != *that1.Source {
			return false
		}
	} else if this.Source != nil {
		return false
	} else if that1.Source != nil {
		return false
	}
	if this.Trader != nil && that1.Trader != nil {
		if *this.Trader != *that1.Trader {
			return false
		}
	} else if this.Trader != nil {
		return false
	} else if that1.Trader != nil {
		return false
	}
	if this.TraderId != nil && that1.TraderId != nil {
		if *this.TraderId != *that1.TraderId {
			return false
		}
	} else if this.TraderId != nil {
		return false
	} else if that1.TraderId != nil {
		return false
	}
	if this.Machine != nil && that1.Machine != nil {
		if *this.Machine != *that1.Machine {
			return false
		}
	} else if this.Machine != nil {
		return false
	} else if that1.Machine != nil {
		return false
	}
	if this.Memo != nil && that1.Memo != nil {
		if *this.Memo != *that1.Memo {
			return false
		}
	} else if this.Memo != nil {
		return false
	} else if that1.Memo != nil {
		return false
	}
	if this.CreateDatetime != nil && that1.CreateDatetime != nil {
		if *this.CreateDatetime != *that1.CreateDatetime {
			return false
		}
	} else if this.CreateDatetime != nil {
		return false
	} else if that1.CreateDatetime != nil {
		return false
	}
	if this.SubmitDatetime != nil && that1.SubmitDatetime != nil {
		if *this.SubmitDatetime != *that1.SubmitDatetime {
			return false
		}
	} else if this.SubmitDatetime != nil {
		return false
	} else if that1.SubmitDatetime != nil {
		return false
	}
	if len(this.Executions) != len(that1.Executions) {
		return false
	}
	for i := range this.Executions {
		if !this.Executions[i].Equal(that1.Executions[i]) {
			return false
		}
	}
	if len(this.Allocations) != len(that1.Allocations) {
		return false
	}
	for i := range this.Allocations {
		if !this.Allocations[i].Equal(that1.Allocations[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Execution) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Execution)
	if !ok {
		return fmt.Errorf("that is not of type *Execution")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Execution but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Executionbut is not nil && this == nil")
	}
	if this.ExecutionId != nil && that1.ExecutionId != nil {
		if *this.ExecutionId != *that1.ExecutionId {
			return fmt.Errorf("ExecutionId this(%v) Not Equal that(%v)", *this.ExecutionId, *that1.ExecutionId)
		}
	} else if this.ExecutionId != nil {
		return fmt.Errorf("this.ExecutionId == nil && that.ExecutionId != nil")
	} else if that1.ExecutionId != nil {
		return fmt.Errorf("ExecutionId this(%v) Not Equal that(%v)", this.ExecutionId, that1.ExecutionId)
	}
	if this.OrderId != nil && that1.OrderId != nil {
		if *this.OrderId != *that1.OrderId {
			return fmt.Errorf("OrderId this(%v) Not Equal that(%v)", *this.OrderId, *that1.OrderId)
		}
	} else if this.OrderId != nil {
		return fmt.Errorf("this.OrderId == nil && that.OrderId != nil")
	} else if that1.OrderId != nil {
		return fmt.Errorf("OrderId this(%v) Not Equal that(%v)", this.OrderId, that1.OrderId)
	}
	if this.OrderKey != nil && that1.OrderKey != nil {
		if *this.OrderKey != *that1.OrderKey {
			return fmt.Errorf("OrderKey this(%v) Not Equal that(%v)", *this.OrderKey, *that1.OrderKey)
		}
	} else if this.OrderKey != nil {
		return fmt.Errorf("this.OrderKey == nil && that.OrderKey != nil")
	} else if that1.OrderKey != nil {
		return fmt.Errorf("OrderKey this(%v) Not Equal that(%v)", this.OrderKey, that1.OrderKey)
	}
	if this.ClientOrderId != nil && that1.ClientOrderId != nil {
		if *this.ClientOrderId != *that1.ClientOrderId {
			return fmt.Errorf("ClientOrderId this(%v) Not Equal that(%v)", *this.ClientOrderId, *that1.ClientOrderId)
		}
	} else if this.ClientOrderId != nil {
		return fmt.Errorf("this.ClientOrderId == nil && that.ClientOrderId != nil")
	} else if that1.ClientOrderId != nil {
		return fmt.Errorf("ClientOrderId this(%v) Not Equal that(%v)", this.ClientOrderId, that1.ClientOrderId)
	}
	if this.BrokerOrderId != nil && that1.BrokerOrderId != nil {
		if *this.BrokerOrderId != *that1.BrokerOrderId {
			return fmt.Errorf("BrokerOrderId this(%v) Not Equal that(%v)", *this.BrokerOrderId, *that1.BrokerOrderId)
		}
	} else if this.BrokerOrderId != nil {
		return fmt.Errorf("this.BrokerOrderId == nil && that.BrokerOrderId != nil")
	} else if that1.BrokerOrderId != nil {
		return fmt.Errorf("BrokerOrderId this(%v) Not Equal that(%v)", this.BrokerOrderId, that1.BrokerOrderId)
	}
	if this.BrokerExecId != nil && that1.BrokerExecId != nil {
		if *this.BrokerExecId != *that1.BrokerExecId {
			return fmt.Errorf("BrokerExecId this(%v) Not Equal that(%v)", *this.BrokerExecId, *that1.BrokerExecId)
		}
	} else if this.BrokerExecId != nil {
		return fmt.Errorf("this.BrokerExecId == nil && that.BrokerExecId != nil")
	} else if that1.BrokerExecId != nil {
		return fmt.Errorf("BrokerExecId this(%v) Not Equal that(%v)", this.BrokerExecId, that1.BrokerExecId)
	}
	if this.PrevBrokerExecId != nil && that1.PrevBrokerExecId != nil {
		if *this.PrevBrokerExecId != *that1.PrevBrokerExecId {
			return fmt.Errorf("PrevBrokerExecId this(%v) Not Equal that(%v)", *this.PrevBrokerExecId, *that1.PrevBrokerExecId)
		}
	} else if this.PrevBrokerExecId != nil {
		return fmt.Errorf("this.PrevBrokerExecId == nil && that.PrevBrokerExecId != nil")
	} else if that1.PrevBrokerExecId != nil {
		return fmt.Errorf("PrevBrokerExecId this(%v) Not Equal that(%v)", this.PrevBrokerExecId, that1.PrevBrokerExecId)
	}
	if this.CancelReplaceByExececutionId != nil && that1.CancelReplaceByExececutionId != nil {
		if *this.CancelReplaceByExececutionId != *that1.CancelReplaceByExececutionId {
			return fmt.Errorf("CancelReplaceByExececutionId this(%v) Not Equal that(%v)", *this.CancelReplaceByExececutionId, *that1.CancelReplaceByExececutionId)
		}
	} else if this.CancelReplaceByExececutionId != nil {
		return fmt.Errorf("this.CancelReplaceByExececutionId == nil && that.CancelReplaceByExececutionId != nil")
	} else if that1.CancelReplaceByExececutionId != nil {
		return fmt.Errorf("CancelReplaceByExececutionId this(%v) Not Equal that(%v)", this.CancelReplaceByExececutionId, that1.CancelReplaceByExececutionId)
	}
	if this.OrderStatus != nil && that1.OrderStatus != nil {
		if *this.OrderStatus != *that1.OrderStatus {
			return fmt.Errorf("OrderStatus this(%v) Not Equal that(%v)", *this.OrderStatus, *that1.OrderStatus)
		}
	} else if this.OrderStatus != nil {
		return fmt.Errorf("this.OrderStatus == nil && that.OrderStatus != nil")
	} else if that1.OrderStatus != nil {
		return fmt.Errorf("OrderStatus this(%v) Not Equal that(%v)", this.OrderStatus, that1.OrderStatus)
	}
	if this.ExecType != nil && that1.ExecType != nil {
		if *this.ExecType != *that1.ExecType {
			return fmt.Errorf("ExecType this(%v) Not Equal that(%v)", *this.ExecType, *that1.ExecType)
		}
	} else if this.ExecType != nil {
		return fmt.Errorf("this.ExecType == nil && that.ExecType != nil")
	} else if that1.ExecType != nil {
		return fmt.Errorf("ExecType this(%v) Not Equal that(%v)", this.ExecType, that1.ExecType)
	}
	if this.Quantity != nil && that1.Quantity != nil {
		if *this.Quantity != *that1.Quantity {
			return fmt.Errorf("Quantity this(%v) Not Equal that(%v)", *this.Quantity, *that1.Quantity)
		}
	} else if this.Quantity != nil {
		return fmt.Errorf("this.Quantity == nil && that.Quantity != nil")
	} else if that1.Quantity != nil {
		return fmt.Errorf("Quantity this(%v) Not Equal that(%v)", this.Quantity, that1.Quantity)
	}
	if this.Price != nil && that1.Price != nil {
		if *this.Price != *that1.Price {
			return fmt.Errorf("Price this(%v) Not Equal that(%v)", *this.Price, *that1.Price)
		}
	} else if this.Price != nil {
		return fmt.Errorf("this.Price == nil && that.Price != nil")
	} else if that1.Price != nil {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	if this.Text != nil && that1.Text != nil {
		if *this.Text != *that1.Text {
			return fmt.Errorf("Text this(%v) Not Equal that(%v)", *this.Text, *that1.Text)
		}
	} else if this.Text != nil {
		return fmt.Errorf("this.Text == nil && that.Text != nil")
	} else if that1.Text != nil {
		return fmt.Errorf("Text this(%v) Not Equal that(%v)", this.Text, that1.Text)
	}
	if this.Lastmkt != nil && that1.Lastmkt != nil {
		if *this.Lastmkt != *that1.Lastmkt {
			return fmt.Errorf("Lastmkt this(%v) Not Equal that(%v)", *this.Lastmkt, *that1.Lastmkt)
		}
	} else if this.Lastmkt != nil {
		return fmt.Errorf("this.Lastmkt == nil && that.Lastmkt != nil")
	} else if that1.Lastmkt != nil {
		return fmt.Errorf("Lastmkt this(%v) Not Equal that(%v)", this.Lastmkt, that1.Lastmkt)
	}
	if this.ExecBroker != nil && that1.ExecBroker != nil {
		if *this.ExecBroker != *that1.ExecBroker {
			return fmt.Errorf("ExecBroker this(%v) Not Equal that(%v)", *this.ExecBroker, *that1.ExecBroker)
		}
	} else if this.ExecBroker != nil {
		return fmt.Errorf("this.ExecBroker == nil && that.ExecBroker != nil")
	} else if that1.ExecBroker != nil {
		return fmt.Errorf("ExecBroker this(%v) Not Equal that(%v)", this.ExecBroker, that1.ExecBroker)
	}
	if this.LastLiquidity != nil && that1.LastLiquidity != nil {
		if *this.LastLiquidity != *that1.LastLiquidity {
			return fmt.Errorf("LastLiquidity this(%v) Not Equal that(%v)", *this.LastLiquidity, *that1.LastLiquidity)
		}
	} else if this.LastLiquidity != nil {
		return fmt.Errorf("this.LastLiquidity == nil && that.LastLiquidity != nil")
	} else if that1.LastLiquidity != nil {
		return fmt.Errorf("LastLiquidity this(%v) Not Equal that(%v)", this.LastLiquidity, that1.LastLiquidity)
	}
	if this.CumQuantity != nil && that1.CumQuantity != nil {
		if *this.CumQuantity != *that1.CumQuantity {
			return fmt.Errorf("CumQuantity this(%v) Not Equal that(%v)", *this.CumQuantity, *that1.CumQuantity)
		}
	} else if this.CumQuantity != nil {
		return fmt.Errorf("this.CumQuantity == nil && that.CumQuantity != nil")
	} else if that1.CumQuantity != nil {
		return fmt.Errorf("CumQuantity this(%v) Not Equal that(%v)", this.CumQuantity, that1.CumQuantity)
	}
	if this.AvgPrice != nil && that1.AvgPrice != nil {
		if *this.AvgPrice != *that1.AvgPrice {
			return fmt.Errorf("AvgPrice this(%v) Not Equal that(%v)", *this.AvgPrice, *that1.AvgPrice)
		}
	} else if this.AvgPrice != nil {
		return fmt.Errorf("this.AvgPrice == nil && that.AvgPrice != nil")
	} else if that1.AvgPrice != nil {
		return fmt.Errorf("AvgPrice this(%v) Not Equal that(%v)", this.AvgPrice, that1.AvgPrice)
	}
	if this.CalcCumQuantity != nil && that1.CalcCumQuantity != nil {
		if *this.CalcCumQuantity != *that1.CalcCumQuantity {
			return fmt.Errorf("CalcCumQuantity this(%v) Not Equal that(%v)", *this.CalcCumQuantity, *that1.CalcCumQuantity)
		}
	} else if this.CalcCumQuantity != nil {
		return fmt.Errorf("this.CalcCumQuantity == nil && that.CalcCumQuantity != nil")
	} else if that1.CalcCumQuantity != nil {
		return fmt.Errorf("CalcCumQuantity this(%v) Not Equal that(%v)", this.CalcCumQuantity, that1.CalcCumQuantity)
	}
	if this.CalcAvgPrice != nil && that1.CalcAvgPrice != nil {
		if *this.CalcAvgPrice != *that1.CalcAvgPrice {
			return fmt.Errorf("CalcAvgPrice this(%v) Not Equal that(%v)", *this.CalcAvgPrice, *that1.CalcAvgPrice)
		}
	} else if this.CalcAvgPrice != nil {
		return fmt.Errorf("this.CalcAvgPrice == nil && that.CalcAvgPrice != nil")
	} else if that1.CalcAvgPrice != nil {
		return fmt.Errorf("CalcAvgPrice this(%v) Not Equal that(%v)", this.CalcAvgPrice, that1.CalcAvgPrice)
	}
	if this.BrokerExecDatetime != nil && that1.BrokerExecDatetime != nil {
		if *this.BrokerExecDatetime != *that1.BrokerExecDatetime {
			return fmt.Errorf("BrokerExecDatetime this(%v) Not Equal that(%v)", *this.BrokerExecDatetime, *that1.BrokerExecDatetime)
		}
	} else if this.BrokerExecDatetime != nil {
		return fmt.Errorf("this.BrokerExecDatetime == nil && that.BrokerExecDatetime != nil")
	} else if that1.BrokerExecDatetime != nil {
		return fmt.Errorf("BrokerExecDatetime this(%v) Not Equal that(%v)", this.BrokerExecDatetime, that1.BrokerExecDatetime)
	}
	if this.CreateDatetime != nil && that1.CreateDatetime != nil {
		if *this.CreateDatetime != *that1.CreateDatetime {
			return fmt.Errorf("CreateDatetime this(%v) Not Equal that(%v)", *this.CreateDatetime, *that1.CreateDatetime)
		}
	} else if this.CreateDatetime != nil {
		return fmt.Errorf("this.CreateDatetime == nil && that.CreateDatetime != nil")
	} else if that1.CreateDatetime != nil {
		return fmt.Errorf("CreateDatetime this(%v) Not Equal that(%v)", this.CreateDatetime, that1.CreateDatetime)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Execution) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Execution)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ExecutionId != nil && that1.ExecutionId != nil {
		if *this.ExecutionId != *that1.ExecutionId {
			return false
		}
	} else if this.ExecutionId != nil {
		return false
	} else if that1.ExecutionId != nil {
		return false
	}
	if this.OrderId != nil && that1.OrderId != nil {
		if *this.OrderId != *that1.OrderId {
			return false
		}
	} else if this.OrderId != nil {
		return false
	} else if that1.OrderId != nil {
		return false
	}
	if this.OrderKey != nil && that1.OrderKey != nil {
		if *this.OrderKey != *that1.OrderKey {
			return false
		}
	} else if this.OrderKey != nil {
		return false
	} else if that1.OrderKey != nil {
		return false
	}
	if this.ClientOrderId != nil && that1.ClientOrderId != nil {
		if *this.ClientOrderId != *that1.ClientOrderId {
			return false
		}
	} else if this.ClientOrderId != nil {
		return false
	} else if that1.ClientOrderId != nil {
		return false
	}
	if this.BrokerOrderId != nil && that1.BrokerOrderId != nil {
		if *this.BrokerOrderId != *that1.BrokerOrderId {
			return false
		}
	} else if this.BrokerOrderId != nil {
		return false
	} else if that1.BrokerOrderId != nil {
		return false
	}
	if this.BrokerExecId != nil && that1.BrokerExecId != nil {
		if *this.BrokerExecId != *that1.BrokerExecId {
			return false
		}
	} else if this.BrokerExecId != nil {
		return false
	} else if that1.BrokerExecId != nil {
		return false
	}
	if this.PrevBrokerExecId != nil && that1.PrevBrokerExecId != nil {
		if *this.PrevBrokerExecId != *that1.PrevBrokerExecId {
			return false
		}
	} else if this.PrevBrokerExecId != nil {
		return false
	} else if that1.PrevBrokerExecId != nil {
		return false
	}
	if this.CancelReplaceByExececutionId != nil && that1.CancelReplaceByExececutionId != nil {
		if *this.CancelReplaceByExececutionId != *that1.CancelReplaceByExececutionId {
			return false
		}
	} else if this.CancelReplaceByExececutionId != nil {
		return false
	} else if that1.CancelReplaceByExececutionId != nil {
		return false
	}
	if this.OrderStatus != nil && that1.OrderStatus != nil {
		if *this.OrderStatus != *that1.OrderStatus {
			return false
		}
	} else if this.OrderStatus != nil {
		return false
	} else if that1.OrderStatus != nil {
		return false
	}
	if this.ExecType != nil && that1.ExecType != nil {
		if *this.ExecType != *that1.ExecType {
			return false
		}
	} else if this.ExecType != nil {
		return false
	} else if that1.ExecType != nil {
		return false
	}
	if this.Quantity != nil && that1.Quantity != nil {
		if *this.Quantity != *that1.Quantity {
			return false
		}
	} else if this.Quantity != nil {
		return false
	} else if that1.Quantity != nil {
		return false
	}
	if this.Price != nil && that1.Price != nil {
		if *this.Price != *that1.Price {
			return false
		}
	} else if this.Price != nil {
		return false
	} else if that1.Price != nil {
		return false
	}
	if this.Text != nil && that1.Text != nil {
		if *this.Text != *that1.Text {
			return false
		}
	} else if this.Text != nil {
		return false
	} else if that1.Text != nil {
		return false
	}
	if this.Lastmkt != nil && that1.Lastmkt != nil {
		if *this.Lastmkt != *that1.Lastmkt {
			return false
		}
	} else if this.Lastmkt != nil {
		return false
	} else if that1.Lastmkt != nil {
		return false
	}
	if this.ExecBroker != nil && that1.ExecBroker != nil {
		if *this.ExecBroker != *that1.ExecBroker {
			return false
		}
	} else if this.ExecBroker != nil {
		return false
	} else if that1.ExecBroker != nil {
		return false
	}
	if this.LastLiquidity != nil && that1.LastLiquidity != nil {
		if *this.LastLiquidity != *that1.LastLiquidity {
			return false
		}
	} else if this.LastLiquidity != nil {
		return false
	} else if that1.LastLiquidity != nil {
		return false
	}
	if this.CumQuantity != nil && that1.CumQuantity != nil {
		if *this.CumQuantity != *that1.CumQuantity {
			return false
		}
	} else if this.CumQuantity != nil {
		return false
	} else if that1.CumQuantity != nil {
		return false
	}
	if this.AvgPrice != nil && that1.AvgPrice != nil {
		if *this.AvgPrice != *that1.AvgPrice {
			return false
		}
	} else if this.AvgPrice != nil {
		return false
	} else if that1.AvgPrice != nil {
		return false
	}
	if this.CalcCumQuantity != nil && that1.CalcCumQuantity != nil {
		if *this.CalcCumQuantity != *that1.CalcCumQuantity {
			return false
		}
	} else if this.CalcCumQuantity != nil {
		return false
	} else if that1.CalcCumQuantity != nil {
		return false
	}
	if this.CalcAvgPrice != nil && that1.CalcAvgPrice != nil {
		if *this.CalcAvgPrice != *that1.CalcAvgPrice {
			return false
		}
	} else if this.CalcAvgPrice != nil {
		return false
	} else if that1.CalcAvgPrice != nil {
		return false
	}
	if this.BrokerExecDatetime != nil && that1.BrokerExecDatetime != nil {
		if *this.BrokerExecDatetime != *that1.BrokerExecDatetime {
			return false
		}
	} else if this.BrokerExecDatetime != nil {
		return false
	} else if that1.BrokerExecDatetime != nil {
		return false
	}
	if this.CreateDatetime != nil && that1.CreateDatetime != nil {
		if *this.CreateDatetime != *that1.CreateDatetime {
			return false
		}
	} else if this.CreateDatetime != nil {
		return false
	} else if that1.CreateDatetime != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Allocation) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Allocation)
	if !ok {
		return fmt.Errorf("that is not of type *Allocation")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Allocation but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Allocationbut is not nil && this == nil")
	}
	if this.AllocationId != nil && that1.AllocationId != nil {
		if *this.AllocationId != *that1.AllocationId {
			return fmt.Errorf("AllocationId this(%v) Not Equal that(%v)", *this.AllocationId, *that1.AllocationId)
		}
	} else if this.AllocationId != nil {
		return fmt.Errorf("this.AllocationId == nil && that.AllocationId != nil")
	} else if that1.AllocationId != nil {
		return fmt.Errorf("AllocationId this(%v) Not Equal that(%v)", this.AllocationId, that1.AllocationId)
	}
	if this.OrderKey != nil && that1.OrderKey != nil {
		if *this.OrderKey != *that1.OrderKey {
			return fmt.Errorf("OrderKey this(%v) Not Equal that(%v)", *this.OrderKey, *that1.OrderKey)
		}
	} else if this.OrderKey != nil {
		return fmt.Errorf("this.OrderKey == nil && that.OrderKey != nil")
	} else if that1.OrderKey != nil {
		return fmt.Errorf("OrderKey this(%v) Not Equal that(%v)", this.OrderKey, that1.OrderKey)
	}
	if this.StrategyId != nil && that1.StrategyId != nil {
		if *this.StrategyId != *that1.StrategyId {
			return fmt.Errorf("StrategyId this(%v) Not Equal that(%v)", *this.StrategyId, *that1.StrategyId)
		}
	} else if this.StrategyId != nil {
		return fmt.Errorf("this.StrategyId == nil && that.StrategyId != nil")
	} else if that1.StrategyId != nil {
		return fmt.Errorf("StrategyId this(%v) Not Equal that(%v)", this.StrategyId, that1.StrategyId)
	}
	if this.Quantity != nil && that1.Quantity != nil {
		if *this.Quantity != *that1.Quantity {
			return fmt.Errorf("Quantity this(%v) Not Equal that(%v)", *this.Quantity, *that1.Quantity)
		}
	} else if this.Quantity != nil {
		return fmt.Errorf("this.Quantity == nil && that.Quantity != nil")
	} else if that1.Quantity != nil {
		return fmt.Errorf("Quantity this(%v) Not Equal that(%v)", this.Quantity, that1.Quantity)
	}
	if this.Ratio != nil && that1.Ratio != nil {
		if *this.Ratio != *that1.Ratio {
			return fmt.Errorf("Ratio this(%v) Not Equal that(%v)", *this.Ratio, *that1.Ratio)
		}
	} else if this.Ratio != nil {
		return fmt.Errorf("this.Ratio == nil && that.Ratio != nil")
	} else if that1.Ratio != nil {
		return fmt.Errorf("Ratio this(%v) Not Equal that(%v)", this.Ratio, that1.Ratio)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Allocation) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Allocation)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AllocationId != nil && that1.AllocationId != nil {
		if *this.AllocationId != *that1.AllocationId {
			return false
		}
	} else if this.AllocationId != nil {
		return false
	} else if that1.AllocationId != nil {
		return false
	}
	if this.OrderKey != nil && that1.OrderKey != nil {
		if *this.OrderKey != *that1.OrderKey {
			return false
		}
	} else if this.OrderKey != nil {
		return false
	} else if that1.OrderKey != nil {
		return false
	}
	if this.StrategyId != nil && that1.StrategyId != nil {
		if *this.StrategyId != *that1.StrategyId {
			return false
		}
	} else if this.StrategyId != nil {
		return false
	} else if that1.StrategyId != nil {
		return false
	}
	if this.Quantity != nil && that1.Quantity != nil {
		if *this.Quantity != *that1.Quantity {
			return false
		}
	} else if this.Quantity != nil {
		return false
	} else if that1.Quantity != nil {
		return false
	}
	if this.Ratio != nil && that1.Ratio != nil {
		if *this.Ratio != *that1.Ratio {
			return false
		}
	} else if this.Ratio != nil {
		return false
	} else if that1.Ratio != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NewOrderRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NewOrderRequest)
	if !ok {
		return fmt.Errorf("that is not of type *NewOrderRequest")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NewOrderRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NewOrderRequestbut is not nil && this == nil")
	}
	if !this.Order.Equal(that1.Order) {
		return fmt.Errorf("Order this(%v) Not Equal that(%v)", this.Order, that1.Order)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NewOrderRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NewOrderRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Order.Equal(that1.Order) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NewOrderResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NewOrderResponse)
	if !ok {
		return fmt.Errorf("that is not of type *NewOrderResponse")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NewOrderResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NewOrderResponsebut is not nil && this == nil")
	}
	if this.ErrorCode != nil && that1.ErrorCode != nil {
		if *this.ErrorCode != *that1.ErrorCode {
			return fmt.Errorf("ErrorCode this(%v) Not Equal that(%v)", *this.ErrorCode, *that1.ErrorCode)
		}
	} else if this.ErrorCode != nil {
		return fmt.Errorf("this.ErrorCode == nil && that.ErrorCode != nil")
	} else if that1.ErrorCode != nil {
		return fmt.Errorf("ErrorCode this(%v) Not Equal that(%v)", this.ErrorCode, that1.ErrorCode)
	}
	if this.ErrorMessage != nil && that1.ErrorMessage != nil {
		if *this.ErrorMessage != *that1.ErrorMessage {
			return fmt.Errorf("ErrorMessage this(%v) Not Equal that(%v)", *this.ErrorMessage, *that1.ErrorMessage)
		}
	} else if this.ErrorMessage != nil {
		return fmt.Errorf("this.ErrorMessage == nil && that.ErrorMessage != nil")
	} else if that1.ErrorMessage != nil {
		return fmt.Errorf("ErrorMessage this(%v) Not Equal that(%v)", this.ErrorMessage, that1.ErrorMessage)
	}
	if !this.Order.Equal(that1.Order) {
		return fmt.Errorf("Order this(%v) Not Equal that(%v)", this.Order, that1.Order)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NewOrderResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NewOrderResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ErrorCode != nil && that1.ErrorCode != nil {
		if *this.ErrorCode != *that1.ErrorCode {
			return false
		}
	} else if this.ErrorCode != nil {
		return false
	} else if that1.ErrorCode != nil {
		return false
	}
	if this.ErrorMessage != nil && that1.ErrorMessage != nil {
		if *this.ErrorMessage != *that1.ErrorMessage {
			return false
		}
	} else if this.ErrorMessage != nil {
		return false
	} else if that1.ErrorMessage != nil {
		return false
	}
	if !this.Order.Equal(that1.Order) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CancelOrderRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CancelOrderRequest)
	if !ok {
		return fmt.Errorf("that is not of type *CancelOrderRequest")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CancelOrderRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CancelOrderRequestbut is not nil && this == nil")
	}
	if this.ClientGuid != nil && that1.ClientGuid != nil {
		if *this.ClientGuid != *that1.ClientGuid {
			return fmt.Errorf("ClientGuid this(%v) Not Equal that(%v)", *this.ClientGuid, *that1.ClientGuid)
		}
	} else if this.ClientGuid != nil {
		return fmt.Errorf("this.ClientGuid == nil && that.ClientGuid != nil")
	} else if that1.ClientGuid != nil {
		return fmt.Errorf("ClientGuid this(%v) Not Equal that(%v)", this.ClientGuid, that1.ClientGuid)
	}
	if this.OrderId != nil && that1.OrderId != nil {
		if *this.OrderId != *that1.OrderId {
			return fmt.Errorf("OrderId this(%v) Not Equal that(%v)", *this.OrderId, *that1.OrderId)
		}
	} else if this.OrderId != nil {
		return fmt.Errorf("this.OrderId == nil && that.OrderId != nil")
	} else if that1.OrderId != nil {
		return fmt.Errorf("OrderId this(%v) Not Equal that(%v)", this.OrderId, that1.OrderId)
	}
	if this.OrderKey != nil && that1.OrderKey != nil {
		if *this.OrderKey != *that1.OrderKey {
			return fmt.Errorf("OrderKey this(%v) Not Equal that(%v)", *this.OrderKey, *that1.OrderKey)
		}
	} else if this.OrderKey != nil {
		return fmt.Errorf("this.OrderKey == nil && that.OrderKey != nil")
	} else if that1.OrderKey != nil {
		return fmt.Errorf("OrderKey this(%v) Not Equal that(%v)", this.OrderKey, that1.OrderKey)
	}
	if this.Version != nil && that1.Version != nil {
		if *this.Version != *that1.Version {
			return fmt.Errorf("Version this(%v) Not Equal that(%v)", *this.Version, *that1.Version)
		}
	} else if this.Version != nil {
		return fmt.Errorf("this.Version == nil && that.Version != nil")
	} else if that1.Version != nil {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if this.Source != nil && that1.Source != nil {
		if *this.Source != *that1.Source {
			return fmt.Errorf("Source this(%v) Not Equal that(%v)", *this.Source, *that1.Source)
		}
	} else if this.Source != nil {
		return fmt.Errorf("this.Source == nil && that.Source != nil")
	} else if that1.Source != nil {
		return fmt.Errorf("Source this(%v) Not Equal that(%v)", this.Source, that1.Source)
	}
	if this.Trader != nil && that1.Trader != nil {
		if *this.Trader != *that1.Trader {
			return fmt.Errorf("Trader this(%v) Not Equal that(%v)", *this.Trader, *that1.Trader)
		}
	} else if this.Trader != nil {
		return fmt.Errorf("this.Trader == nil && that.Trader != nil")
	} else if that1.Trader != nil {
		return fmt.Errorf("Trader this(%v) Not Equal that(%v)", this.Trader, that1.Trader)
	}
	if this.TraderId != nil && that1.TraderId != nil {
		if *this.TraderId != *that1.TraderId {
			return fmt.Errorf("TraderId this(%v) Not Equal that(%v)", *this.TraderId, *that1.TraderId)
		}
	} else if this.TraderId != nil {
		return fmt.Errorf("this.TraderId == nil && that.TraderId != nil")
	} else if that1.TraderId != nil {
		return fmt.Errorf("TraderId this(%v) Not Equal that(%v)", this.TraderId, that1.TraderId)
	}
	if this.Machine != nil && that1.Machine != nil {
		if *this.Machine != *that1.Machine {
			return fmt.Errorf("Machine this(%v) Not Equal that(%v)", *this.Machine, *that1.Machine)
		}
	} else if this.Machine != nil {
		return fmt.Errorf("this.Machine == nil && that.Machine != nil")
	} else if that1.Machine != nil {
		return fmt.Errorf("Machine this(%v) Not Equal that(%v)", this.Machine, that1.Machine)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CancelOrderRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CancelOrderRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ClientGuid != nil && that1.ClientGuid != nil {
		if *this.ClientGuid != *that1.ClientGuid {
			return false
		}
	} else if this.ClientGuid != nil {
		return false
	} else if that1.ClientGuid != nil {
		return false
	}
	if this.OrderId != nil && that1.OrderId != nil {
		if *this.OrderId != *that1.OrderId {
			return false
		}
	} else if this.OrderId != nil {
		return false
	} else if that1.OrderId != nil {
		return false
	}
	if this.OrderKey != nil && that1.OrderKey != nil {
		if *this.OrderKey != *that1.OrderKey {
			return false
		}
	} else if this.OrderKey != nil {
		return false
	} else if that1.OrderKey != nil {
		return false
	}
	if this.Version != nil && that1.Version != nil {
		if *this.Version != *that1.Version {
			return false
		}
	} else if this.Version != nil {
		return false
	} else if that1.Version != nil {
		return false
	}
	if this.Source != nil && that1.Source != nil {
		if *this.Source != *that1.Source {
			return false
		}
	} else if this.Source != nil {
		return false
	} else if that1.Source != nil {
		return false
	}
	if this.Trader != nil && that1.Trader != nil {
		if *this.Trader != *that1.Trader {
			return false
		}
	} else if this.Trader != nil {
		return false
	} else if that1.Trader != nil {
		return false
	}
	if this.TraderId != nil && that1.TraderId != nil {
		if *this.TraderId != *that1.TraderId {
			return false
		}
	} else if this.TraderId != nil {
		return false
	} else if that1.TraderId != nil {
		return false
	}
	if this.Machine != nil && that1.Machine != nil {
		if *this.Machine != *that1.Machine {
			return false
		}
	} else if this.Machine != nil {
		return false
	} else if that1.Machine != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CancelOrderResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CancelOrderResponse)
	if !ok {
		return fmt.Errorf("that is not of type *CancelOrderResponse")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CancelOrderResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CancelOrderResponsebut is not nil && this == nil")
	}
	if this.ErrorCode != nil && that1.ErrorCode != nil {
		if *this.ErrorCode != *that1.ErrorCode {
			return fmt.Errorf("ErrorCode this(%v) Not Equal that(%v)", *this.ErrorCode, *that1.ErrorCode)
		}
	} else if this.ErrorCode != nil {
		return fmt.Errorf("this.ErrorCode == nil && that.ErrorCode != nil")
	} else if that1.ErrorCode != nil {
		return fmt.Errorf("ErrorCode this(%v) Not Equal that(%v)", this.ErrorCode, that1.ErrorCode)
	}
	if this.ErrorMessage != nil && that1.ErrorMessage != nil {
		if *this.ErrorMessage != *that1.ErrorMessage {
			return fmt.Errorf("ErrorMessage this(%v) Not Equal that(%v)", *this.ErrorMessage, *that1.ErrorMessage)
		}
	} else if this.ErrorMessage != nil {
		return fmt.Errorf("this.ErrorMessage == nil && that.ErrorMessage != nil")
	} else if that1.ErrorMessage != nil {
		return fmt.Errorf("ErrorMessage this(%v) Not Equal that(%v)", this.ErrorMessage, that1.ErrorMessage)
	}
	if !this.Order.Equal(that1.Order) {
		return fmt.Errorf("Order this(%v) Not Equal that(%v)", this.Order, that1.Order)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CancelOrderResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CancelOrderResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ErrorCode != nil && that1.ErrorCode != nil {
		if *this.ErrorCode != *that1.ErrorCode {
			return false
		}
	} else if this.ErrorCode != nil {
		return false
	} else if that1.ErrorCode != nil {
		return false
	}
	if this.ErrorMessage != nil && that1.ErrorMessage != nil {
		if *this.ErrorMessage != *that1.ErrorMessage {
			return false
		}
	} else if this.ErrorMessage != nil {
		return false
	} else if that1.ErrorMessage != nil {
		return false
	}
	if !this.Order.Equal(that1.Order) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ReplaceOrderRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ReplaceOrderRequest)
	if !ok {
		return fmt.Errorf("that is not of type *ReplaceOrderRequest")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ReplaceOrderRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ReplaceOrderRequestbut is not nil && this == nil")
	}
	if !this.Order.Equal(that1.Order) {
		return fmt.Errorf("Order this(%v) Not Equal that(%v)", this.Order, that1.Order)
	}
	if this.Source != nil && that1.Source != nil {
		if *this.Source != *that1.Source {
			return fmt.Errorf("Source this(%v) Not Equal that(%v)", *this.Source, *that1.Source)
		}
	} else if this.Source != nil {
		return fmt.Errorf("this.Source == nil && that.Source != nil")
	} else if that1.Source != nil {
		return fmt.Errorf("Source this(%v) Not Equal that(%v)", this.Source, that1.Source)
	}
	if this.Trader != nil && that1.Trader != nil {
		if *this.Trader != *that1.Trader {
			return fmt.Errorf("Trader this(%v) Not Equal that(%v)", *this.Trader, *that1.Trader)
		}
	} else if this.Trader != nil {
		return fmt.Errorf("this.Trader == nil && that.Trader != nil")
	} else if that1.Trader != nil {
		return fmt.Errorf("Trader this(%v) Not Equal that(%v)", this.Trader, that1.Trader)
	}
	if this.TraderId != nil && that1.TraderId != nil {
		if *this.TraderId != *that1.TraderId {
			return fmt.Errorf("TraderId this(%v) Not Equal that(%v)", *this.TraderId, *that1.TraderId)
		}
	} else if this.TraderId != nil {
		return fmt.Errorf("this.TraderId == nil && that.TraderId != nil")
	} else if that1.TraderId != nil {
		return fmt.Errorf("TraderId this(%v) Not Equal that(%v)", this.TraderId, that1.TraderId)
	}
	if this.Machine != nil && that1.Machine != nil {
		if *this.Machine != *that1.Machine {
			return fmt.Errorf("Machine this(%v) Not Equal that(%v)", *this.Machine, *that1.Machine)
		}
	} else if this.Machine != nil {
		return fmt.Errorf("this.Machine == nil && that.Machine != nil")
	} else if that1.Machine != nil {
		return fmt.Errorf("Machine this(%v) Not Equal that(%v)", this.Machine, that1.Machine)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ReplaceOrderRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReplaceOrderRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Order.Equal(that1.Order) {
		return false
	}
	if this.Source != nil && that1.Source != nil {
		if *this.Source != *that1.Source {
			return false
		}
	} else if this.Source != nil {
		return false
	} else if that1.Source != nil {
		return false
	}
	if this.Trader != nil && that1.Trader != nil {
		if *this.Trader != *that1.Trader {
			return false
		}
	} else if this.Trader != nil {
		return false
	} else if that1.Trader != nil {
		return false
	}
	if this.TraderId != nil && that1.TraderId != nil {
		if *this.TraderId != *that1.TraderId {
			return false
		}
	} else if this.TraderId != nil {
		return false
	} else if that1.TraderId != nil {
		return false
	}
	if this.Machine != nil && that1.Machine != nil {
		if *this.Machine != *that1.Machine {
			return false
		}
	} else if this.Machine != nil {
		return false
	} else if that1.Machine != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ReplaceOrderResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ReplaceOrderResponse)
	if !ok {
		return fmt.Errorf("that is not of type *ReplaceOrderResponse")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ReplaceOrderResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ReplaceOrderResponsebut is not nil && this == nil")
	}
	if this.ErrorCode != nil && that1.ErrorCode != nil {
		if *this.ErrorCode != *that1.ErrorCode {
			return fmt.Errorf("ErrorCode this(%v) Not Equal that(%v)", *this.ErrorCode, *that1.ErrorCode)
		}
	} else if this.ErrorCode != nil {
		return fmt.Errorf("this.ErrorCode == nil && that.ErrorCode != nil")
	} else if that1.ErrorCode != nil {
		return fmt.Errorf("ErrorCode this(%v) Not Equal that(%v)", this.ErrorCode, that1.ErrorCode)
	}
	if this.ErrorMessage != nil && that1.ErrorMessage != nil {
		if *this.ErrorMessage != *that1.ErrorMessage {
			return fmt.Errorf("ErrorMessage this(%v) Not Equal that(%v)", *this.ErrorMessage, *that1.ErrorMessage)
		}
	} else if this.ErrorMessage != nil {
		return fmt.Errorf("this.ErrorMessage == nil && that.ErrorMessage != nil")
	} else if that1.ErrorMessage != nil {
		return fmt.Errorf("ErrorMessage this(%v) Not Equal that(%v)", this.ErrorMessage, that1.ErrorMessage)
	}
	if !this.Order.Equal(that1.Order) {
		return fmt.Errorf("Order this(%v) Not Equal that(%v)", this.Order, that1.Order)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ReplaceOrderResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReplaceOrderResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ErrorCode != nil && that1.ErrorCode != nil {
		if *this.ErrorCode != *that1.ErrorCode {
			return false
		}
	} else if this.ErrorCode != nil {
		return false
	} else if that1.ErrorCode != nil {
		return false
	}
	if this.ErrorMessage != nil && that1.ErrorMessage != nil {
		if *this.ErrorMessage != *that1.ErrorMessage {
			return false
		}
	} else if this.ErrorMessage != nil {
		return false
	} else if that1.ErrorMessage != nil {
		return false
	}
	if !this.Order.Equal(that1.Order) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
