syntax = "proto2";

package proto.order;

// CODE GEN FLAGS ===================================

option go_package = "order";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;

// ENTITIES ==========================================

message Order {
    // Idents
    required string      client_guid = 1 [(gogoproto.nullable) = false];
    required int32          order_id = 2 [(gogoproto.nullable) = false];
    required int32         order_key = 3 [(gogoproto.nullable) = false];
    required int32           version = 4 [(gogoproto.nullable) = false];
    enum OrderMessageType {
        NEW         = 0;
        CANCEL   	= 1;
        REPLACE     = 2;
    }
    optional OrderMessageType message_type = 5 [(gogoproto.nullable) = false];

    // basic
    required Side               side = 6 [(gogoproto.nullable) = false];
    required double         quantity = 7 [(gogoproto.nullable) = false];
    required string           symbol = 8 [(gogoproto.nullable) = false];

    // execution specific
    required OrderType    order_type = 16 [(gogoproto.nullable) = false];
    required TimeInForce timeinforce = 17 [(gogoproto.nullable) = false];
    optional double      limit_price = 18 [(gogoproto.nullable) = false];
    optional string         exchange = 19 [(gogoproto.nullable) = false];
    optional string      description = 20 [(gogoproto.nullable) = false];
    optional double  filled_quantity = 21 [(gogoproto.nullable) = false];
    optional double filled_avg_price = 22 [(gogoproto.nullable) = false];
    optional OrderStatus order_status = 23 [(gogoproto.nullable) = false];

    // accounts
    required int32        account_id = 30 [(gogoproto.nullable) = false];
    optional string    broker_userid = 31 [(gogoproto.nullable) = false];
    optional string   broker_account = 32 [(gogoproto.nullable) = false];
    optional string market_connector = 33 [(gogoproto.nullable) = false];

    // execution extra
    optional string        settl_ccy = 40 [(gogoproto.nullable) = false];
    required HandlInst   handle_inst = 41 [(gogoproto.nullable) = false];
    optional string             algo = 42 [(gogoproto.nullable) = false];
    optional bool        is_complete = 43 [(gogoproto.nullable) = false];
    optional bool          is_booked = 44 [(gogoproto.nullable) = false];
    optional bool         is_expired = 45 [(gogoproto.nullable) = false];
    optional int32  trade_booking_id = 46 [(gogoproto.nullable) = false];
    optional string       open_close = 47 [(gogoproto.nullable) = false];

    // source
    optional string           source = 50 [(gogoproto.nullable) = false];
    optional string           trader = 51 [(gogoproto.nullable) = false];
    required int32         trader_id = 52 [(gogoproto.nullable) = false];
    optional string          machine = 53 [(gogoproto.nullable) = false];
    optional string             memo = 54 [(gogoproto.nullable) = false];

    // timing
    optional string  create_datetime = 60 [(gogoproto.nullable) = false];
    optional string  submit_datetime = 61 [(gogoproto.nullable) = false];

    // array components
    repeated Execution    executions = 70 [(gogoproto.nullable) = false];
    repeated Allocation  allocations = 80 [(gogoproto.nullable) = false];
}

message Execution {
    required int32         execution_id = 1 [(gogoproto.nullable) = false];
    required int32             order_id = 2 [(gogoproto.nullable) = false];
    optional int32            order_key = 3 [(gogoproto.nullable) = false];

    optional string	    client_order_id = 5 [(gogoproto.nullable) = false];
    optional string     broker_order_id = 6 [(gogoproto.nullable) = false];
    optional string      broker_exec_id = 7 [(gogoproto.nullable) = false];
    optional string prev_broker_exec_id = 8 [(gogoproto.nullable) = false];
    optional int32  cancel_replace_by_exececution_id=9 [(gogoproto.nullable) = false];

    optional OrderStatus   order_status = 10 [(gogoproto.nullable) = false];

    enum ExecType {
        NEW 			= 0;
        PARTIAL_FILL 	= 1;
        FILL 			= 2;
        DONE_FOR_DAY 	= 3;
        CANCELED 		= 4;
        REPLACE 		= 5;
        PENDING_CANCEL 	= 6;
        STOPPED 		= 7;
        REJECTED 		= 8;
        SUSPENDED 		= 9;
        PENDING_NEW 	= 10;
        CALCULATED 		= 11;
        EXPIRED 		= 12;
        RESTATED 		= 13;
        PENDING_REPLACE = 14;
        TRADE 			= 15;
        TRADE_CORRECT 	= 16;
        TRADE_CANCEL 	= 17;
        ORDER_STATUS 	= 18;
    }
    optional ExecType         exec_type = 11 [(gogoproto.nullable) = false];

    optional double            quantity = 20 [(gogoproto.nullable) = false];
    optional double               price = 21 [(gogoproto.nullable) = false];

    optional string                text = 30 [(gogoproto.nullable) = false];
    optional string             lastmkt = 31 [(gogoproto.nullable) = false];
    optional string         exec_broker = 32 [(gogoproto.nullable) = false];
    optional LastLiquidityInd   last_liquidity = 33 [(gogoproto.nullable) = false];

    optional double        cum_quantity = 50 [(gogoproto.nullable) = false];
    optional double           avg_price = 51 [(gogoproto.nullable) = false];
    optional double   calc_cum_quantity = 52 [(gogoproto.nullable) = false];
    optional double      calc_avg_price = 53 [(gogoproto.nullable) = false];

    // timing
    optional string broker_exec_datetime = 60 [(gogoproto.nullable) = false];
    optional string      create_datetime = 61 [(gogoproto.nullable) = false];
}

message Allocation {
    optional int32         allocation_id = 1 [(gogoproto.nullable) = false];
    optional int32             order_key = 2 [(gogoproto.nullable) = false];
    optional int32           strategy_id = 3 [(gogoproto.nullable) = false];

    optional double             quantity = 10 [(gogoproto.nullable) = false];
    optional double             ratio    = 11 [(gogoproto.nullable) = false];
}

// ENUMS ==============================================

enum OrderStatus {
    NEW                     = 0;
    PARTIALLY_FILLED        = 1;
    FILLED                  = 2;
    DONE_FOR_DAY            = 3;
    CANCELLED               = 4;
    REPLACED                = 5;
    PENDING_CANCEL          = 6;
    STOPPED                 = 7;
    REJECTED                = 8;
    SUSPENDED               = 9;
    PENDING_NEW             = 10;
    CALCULATED              = 11;
    EXPIRED                 = 12;
    ACCEPTED_FOR_BIDDING    = 13;
    PENDING_REPLACE         = 14;
    ORDER_RECEIVED          = 100;
    ORDER_SENT              = 101;
    MC_ACK_ORDER            = 102;
    MC_SENT_ORDER           = 103;
    CANCEL_RECEIVED	        = 110;
    CANCEL_SENT	            = 111;
    MC_ACK_CANCEL	        = 112;
    MC_SENT_CANCEL	        = 113;
    REPLACE_RECEIVED        = 120;
    REPLACE_SENT	        = 121;
    MC_ACK_REPLACE	        = 122;
    MC_SENT_REPLACE	        = 123;
    EXECUTION_REPLACED	    = 125;
    EXECUTION_CANCELLED	    = 126;
    BOOKABLE	            = 130;
    TRADE_PUMP_RECEIVED		= 131;
    TRADE_PUMP_PROCESSED	= 132;
    BOOKING	                = 133;
    SENT_PMS                = 134;
    BOOKED                  = 135;

}

enum Side {
    UNKNOWN_SIDE        = 0;
    BUY                 = 1;
    SELL                = 2;
    BUY_MINUS           = 3;
    SELL_PLUS           = 4;
    SELL_SHORT          = 5;
    SELL_SHORT_EXEMPT   = 6;
    UNDISCLOSED         = 7;
    CROSS               = 8;
    CROSS_SHORT         = 9;
    CROSS_SHORT_EXEMPT  = 10;
    AS_DEFINED          = 11;
    OPPOSITE            = 12;
    SUBSCRIBE           = 13;
    REDEEM              = 14;
    LEND                = 15;
    BORROW              = 16;
}

enum OrderType {
    UNKNOWN_ORDER_TYPE              = 0;
    MARKET                          = 1;
    LIMIT                           = 2;
    STOP                            = 3;
    STOP_LIMIT                      = 4;
    MARKET_ON_CLOSE                 = 5;
    WITH_OR_WITHOUT                 = 6;
    LIMIT_OR_BETTER                 = 7;
    LIMIT_WITH_OR_WITHOUT           = 8;
    ON_BASIS                        = 9;
    ON_CLOSE                        = 10;
    LIMIT_ON_CLOSE                  = 11;
    FOREX_MARKET                    = 12;
    PREVIOUSLY_QUOTED               = 13;
    PREVIOUSLY_INDICATED            = 14;
    FOREX_LIMIT                     = 15;
    FOREX_SWAP                      = 16;
    FOREX_PREVIOUSLY_QUOTED         = 17;
    FUNARI                          = 18;
    MARKET_IF_TOUCHED               = 19;
    MARKET_WITH_LEFTOVER_AS_LIMIT   = 20;
    PREVIOUS_FUND_VALUATION_POINT   = 21;
    NEXT_FUND_VALUATION_POINT       = 22;
    PEGGED                          = 23;
}

enum TimeInForce {
    DAY                     =  0;
    GOOD_TILL_CANCEL        =  1;
    AT_THE_OPENING          =  2;
    IMMEDIATE_OR_CANCEL     =  3;
    FILL_OR_KILL            =  4;
    GOOD_TILL_CROSSING      =  5;
    GOOD_TILL_DATE          =  6;
    AT_THE_CLOSE            =  7;
}

enum HandlInst {
    UNKNOWN_HANDL_INST                  = 0;
    AUTOMATED_EXECUTION_ORDER_PRIVATE   = 1;
    AUTOMATED_EXECUTION_ORDER_PUBLIC    = 2;
    MANUAL_ORDER                        = 3;
}

enum LastLiquidityInd {
    UNKNOWN_LAST_LIQUIDITY_IND = 0;
    ADDED_LIQUIDITY         = 1;
    REMOVED_LIQUIDITY       = 2;
    LIQUIDITY_ROUTED_OUT    = 3;
    AUCTION                 = 4;
}


// MESSAGES =====================================

message NewOrderRequest {
    optional Order order = 1;
}
message NewOrderResponse {
    optional int32 error_code = 1 [(gogoproto.nullable) = false];
    optional string error_message = 2;
    optional Order order = 10;

}

message CancelOrderRequest {
    optional string      client_guid = 1  [(gogoproto.nullable) = false];
    required int32          order_id = 2  [(gogoproto.nullable) = false];
    optional int32         order_key = 3  [(gogoproto.nullable) = false];
    optional int32           version = 4  [(gogoproto.nullable) = false];
    optional string           source = 50 [(gogoproto.nullable) = false];
    optional string           trader = 51 [(gogoproto.nullable) = false];
    required int32         trader_id = 52 [(gogoproto.nullable) = false];
    optional string          machine = 53 [(gogoproto.nullable) = false];
}
message CancelOrderResponse {
    optional int32 error_code = 1 [(gogoproto.nullable) = false];
    optional string error_message = 2;
    optional Order order = 10;
}

message ReplaceOrderRequest {
    optional Order order = 1;
    optional string           source = 50 [(gogoproto.nullable) = false];
    optional string           trader = 51 [(gogoproto.nullable) = false];
    required int32         trader_id = 52 [(gogoproto.nullable) = false];
    optional string          machine = 53 [(gogoproto.nullable) = false];
}
message ReplaceOrderResponse {
    optional int32 error_code = 1 [(gogoproto.nullable) = false];
    optional string error_message = 2;
    optional Order order = 10;
}

service OrderRequestService {
    rpc New     (NewOrderRequest)     returns (NewOrderResponse);
    rpc Cancel  (CancelOrderRequest)  returns (CancelOrderResponse);
    rpc Replace (ReplaceOrderRequest) returns (ReplaceOrderResponse);
}